!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A0;    \/*  a0  *\/$/;"	m	struct:__anon69	access:public
A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A0;   \/*  a0  *\/$/;"	m	struct:__anon65	access:public
A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A0;   \/*  a0  *\/$/;"	m	struct:__anon67	access:public
A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A0;   \/*  a0  *\/$/;"	m	struct:__anon70	access:public
A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A0;   \/*  a0  *\/$/;"	m	struct:__anon72	access:public
A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A0;   \/*  a0  *\/$/;"	m	struct:__anon66	access:public
A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A0;   \/*  a0  *\/$/;"	m	struct:__anon68	access:public
A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A0;   \/*  a0  *\/$/;"	m	struct:__anon71	access:public
A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A0;   \/*  a0  *\/$/;"	m	struct:__anon73	access:public
A0	lvm/Common/src/Filters.h	/^        LVM_INT16   A0;$/;"	m	struct:__anon94	access:public
A0	lvm/Common/src/Filters.h	/^        LVM_INT16   A0;$/;"	m	struct:__anon95	access:public
A1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A1;    \/*  a1  *\/$/;"	m	struct:__anon69	access:public
A1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A1;   \/*  a1  *\/$/;"	m	struct:__anon65	access:public
A1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A1;   \/*  a1  *\/$/;"	m	struct:__anon67	access:public
A1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A1;   \/*  a1  *\/$/;"	m	struct:__anon66	access:public
A1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A1;   \/*  a1  *\/$/;"	m	struct:__anon68	access:public
A1	lvm/Common/src/Filters.h	/^        LVM_INT16   A1;$/;"	m	struct:__anon94	access:public
A1	lvm/Common/src/Filters.h	/^        LVM_INT16   A1;$/;"	m	struct:__anon95	access:public
A2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A2;   \/*  a2  *\/$/;"	m	struct:__anon65	access:public
A2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A2;   \/*  a2  *\/$/;"	m	struct:__anon66	access:public
A2	lvm/Common/src/Filters.h	/^        LVM_INT16   A2;$/;"	m	struct:__anon94	access:public
AB_Selection	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT16               AB_Selection;               \/* Smooth from tap A to B when 1 otherwise B to A *\/$/;"	m	struct:__anon48	access:public
ADD2_SAT_32x32	lvm/Common/lib/LVM_Macros.h	103;"	d
ADDSUFFIXES	Makefile	/^ADDSUFFIXES  = $(foreach suf,$(1),$(addsuffix $(suf),$(2)))$/;"	m
ADDSUFFIXES	lvm/Makefile	/^ADDSUFFIXES  = $(foreach suf,$(1),$(addsuffix $(suf),$(2)))$/;"	m
AGCInstance	lvm/Bass/src/LVDBE_Private.h	/^    AGC_MIX_VOL_2St1Mon_D32_t   AGCInstance;        \/* AGC instance parameters *\/$/;"	m	struct:__anon12	access:public
AGC_ATTACK_Fs11025	lvm/Bass/src/LVDBE_Coeffs.h	429;"	d
AGC_ATTACK_Fs12000	lvm/Bass/src/LVDBE_Coeffs.h	430;"	d
AGC_ATTACK_Fs16000	lvm/Bass/src/LVDBE_Coeffs.h	431;"	d
AGC_ATTACK_Fs22050	lvm/Bass/src/LVDBE_Coeffs.h	432;"	d
AGC_ATTACK_Fs24000	lvm/Bass/src/LVDBE_Coeffs.h	433;"	d
AGC_ATTACK_Fs32000	lvm/Bass/src/LVDBE_Coeffs.h	434;"	d
AGC_ATTACK_Fs44100	lvm/Bass/src/LVDBE_Coeffs.h	435;"	d
AGC_ATTACK_Fs48000	lvm/Bass/src/LVDBE_Coeffs.h	436;"	d
AGC_ATTACK_Fs8000	lvm/Bass/src/LVDBE_Coeffs.h	428;"	d
AGC_Attack	lvm/Common/lib/AGC.h	/^    LVM_INT16  AGC_Attack;                      \/* AGC attack scaler *\/$/;"	m	struct:__anon88	access:public
AGC_DECAY_Fs11025	lvm/Bass/src/LVDBE_Coeffs.h	439;"	d
AGC_DECAY_Fs12000	lvm/Bass/src/LVDBE_Coeffs.h	440;"	d
AGC_DECAY_Fs16000	lvm/Bass/src/LVDBE_Coeffs.h	441;"	d
AGC_DECAY_Fs22050	lvm/Bass/src/LVDBE_Coeffs.h	442;"	d
AGC_DECAY_Fs24000	lvm/Bass/src/LVDBE_Coeffs.h	443;"	d
AGC_DECAY_Fs32000	lvm/Bass/src/LVDBE_Coeffs.h	444;"	d
AGC_DECAY_Fs44100	lvm/Bass/src/LVDBE_Coeffs.h	445;"	d
AGC_DECAY_Fs48000	lvm/Bass/src/LVDBE_Coeffs.h	446;"	d
AGC_DECAY_Fs8000	lvm/Bass/src/LVDBE_Coeffs.h	438;"	d
AGC_Decay	lvm/Common/lib/AGC.h	/^    LVM_INT16  AGC_Decay;                       \/* AGC decay scaler *\/$/;"	m	struct:__anon88	access:public
AGC_GAIN_0dB	lvm/Bass/src/LVDBE_Coeffs.h	453;"	d
AGC_GAIN_10dB	lvm/Bass/src/LVDBE_Coeffs.h	473;"	d
AGC_GAIN_11dB	lvm/Bass/src/LVDBE_Coeffs.h	475;"	d
AGC_GAIN_12dB	lvm/Bass/src/LVDBE_Coeffs.h	477;"	d
AGC_GAIN_13dB	lvm/Bass/src/LVDBE_Coeffs.h	479;"	d
AGC_GAIN_14dB	lvm/Bass/src/LVDBE_Coeffs.h	481;"	d
AGC_GAIN_15dB	lvm/Bass/src/LVDBE_Coeffs.h	483;"	d
AGC_GAIN_1dB	lvm/Bass/src/LVDBE_Coeffs.h	455;"	d
AGC_GAIN_2dB	lvm/Bass/src/LVDBE_Coeffs.h	457;"	d
AGC_GAIN_3dB	lvm/Bass/src/LVDBE_Coeffs.h	459;"	d
AGC_GAIN_4dB	lvm/Bass/src/LVDBE_Coeffs.h	461;"	d
AGC_GAIN_5dB	lvm/Bass/src/LVDBE_Coeffs.h	463;"	d
AGC_GAIN_6dB	lvm/Bass/src/LVDBE_Coeffs.h	465;"	d
AGC_GAIN_7dB	lvm/Bass/src/LVDBE_Coeffs.h	467;"	d
AGC_GAIN_8dB	lvm/Bass/src/LVDBE_Coeffs.h	469;"	d
AGC_GAIN_9dB	lvm/Bass/src/LVDBE_Coeffs.h	471;"	d
AGC_GAIN_SCALE	lvm/Bass/src/LVDBE_Coeffs.h	449;"	d
AGC_GAIN_SHIFT	lvm/Bass/src/LVDBE_Coeffs.h	450;"	d
AGC_Gain	lvm/Common/lib/AGC.h	/^    LVM_INT32  AGC_Gain;                        \/* The current AGC gain *\/$/;"	m	struct:__anon88	access:public
AGC_GainShift	lvm/Common/lib/AGC.h	/^    LVM_INT16  AGC_GainShift;                   \/* The gain shift *\/$/;"	m	struct:__anon88	access:public
AGC_HPFGAIN_0dB	lvm/Bass/src/LVDBE_Coeffs.h	452;"	d
AGC_HPFGAIN_10dB	lvm/Bass/src/LVDBE_Coeffs.h	472;"	d
AGC_HPFGAIN_11dB	lvm/Bass/src/LVDBE_Coeffs.h	474;"	d
AGC_HPFGAIN_12dB	lvm/Bass/src/LVDBE_Coeffs.h	476;"	d
AGC_HPFGAIN_13dB	lvm/Bass/src/LVDBE_Coeffs.h	478;"	d
AGC_HPFGAIN_14dB	lvm/Bass/src/LVDBE_Coeffs.h	480;"	d
AGC_HPFGAIN_15dB	lvm/Bass/src/LVDBE_Coeffs.h	482;"	d
AGC_HPFGAIN_1dB	lvm/Bass/src/LVDBE_Coeffs.h	454;"	d
AGC_HPFGAIN_2dB	lvm/Bass/src/LVDBE_Coeffs.h	456;"	d
AGC_HPFGAIN_3dB	lvm/Bass/src/LVDBE_Coeffs.h	458;"	d
AGC_HPFGAIN_4dB	lvm/Bass/src/LVDBE_Coeffs.h	460;"	d
AGC_HPFGAIN_5dB	lvm/Bass/src/LVDBE_Coeffs.h	462;"	d
AGC_HPFGAIN_6dB	lvm/Bass/src/LVDBE_Coeffs.h	464;"	d
AGC_HPFGAIN_7dB	lvm/Bass/src/LVDBE_Coeffs.h	466;"	d
AGC_HPFGAIN_8dB	lvm/Bass/src/LVDBE_Coeffs.h	468;"	d
AGC_HPFGAIN_9dB	lvm/Bass/src/LVDBE_Coeffs.h	470;"	d
AGC_MIX_VOL_2St1Mon_D32_WRA	lvm/Common/lib/AGC.h	/^void AGC_MIX_VOL_2St1Mon_D32_WRA(AGC_MIX_VOL_2St1Mon_D32_t  *pInstance,     \/* Instance pointer *\/$/;"	p	signature:(AGC_MIX_VOL_2St1Mon_D32_t *pInstance, const LVM_INT32 *pStSrc, const LVM_INT32 *pMonoSrc, LVM_INT32 *pDst, LVM_UINT16 n)
AGC_MIX_VOL_2St1Mon_D32_WRA	lvm/Common/src/AGC_MIX_VOL_2St1Mon_D32_WRA.c	/^void AGC_MIX_VOL_2St1Mon_D32_WRA(AGC_MIX_VOL_2St1Mon_D32_t  *pInstance,     \/* Instance pointer *\/$/;"	f	signature:(AGC_MIX_VOL_2St1Mon_D32_t *pInstance, const LVM_INT32 *pStSrc, const LVM_INT32 *pMonoSrc, LVM_INT32 *pDst, LVM_UINT16 NumSamples)
AGC_MIX_VOL_2St1Mon_D32_t	lvm/Common/lib/AGC.h	/^} AGC_MIX_VOL_2St1Mon_D32_t;$/;"	t	typeref:struct:__anon88
AGC_MaxGain	lvm/Common/lib/AGC.h	/^    LVM_INT32  AGC_MaxGain;                     \/* The maximum AGC gain *\/$/;"	m	struct:__anon88	access:public
AGC_TARGETLEVEL	lvm/Bass/src/LVDBE_Coeffs.h	451;"	d
AGC_Target	lvm/Common/lib/AGC.h	/^    LVM_INT32  AGC_Target;                      \/* AGC target level *\/$/;"	m	struct:__anon88	access:public
ALGORITHM_CS_ID	lvm/Common/lib/LVM_Common.h	50;"	d
ALGORITHM_DBE_ID	lvm/Common/lib/LVM_Common.h	52;"	d
ALGORITHM_EQNB_ID	lvm/Common/lib/LVM_Common.h	51;"	d
ALGORITHM_NONE_ID	lvm/Common/lib/LVM_Common.h	49;"	d
ALGORITHM_TE_ID	lvm/Common/lib/LVM_Common.h	54;"	d
ALGORITHM_VC_ID	lvm/Common/lib/LVM_Common.h	53;"	d
ALL_DIRS	Makefile	/^ALL_DIRS     = $(call ADDSUFFIXES,$(1),$(DIRS))$/;"	m
ALL_DIRS	lvm/Makefile	/^ALL_DIRS     = $(call ADDSUFFIXES,$(1),$(DIRS))$/;"	m
ALPHA_0	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	38;"	d
ALPHA_1	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	39;"	d
ALPHA_10	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	48;"	d
ALPHA_11	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	49;"	d
ALPHA_12	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	50;"	d
ALPHA_13	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	51;"	d
ALPHA_14	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	52;"	d
ALPHA_15	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	53;"	d
ALPHA_16	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	54;"	d
ALPHA_17	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	55;"	d
ALPHA_18	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	56;"	d
ALPHA_19	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	57;"	d
ALPHA_2	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	40;"	d
ALPHA_20	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	58;"	d
ALPHA_21	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	59;"	d
ALPHA_22	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	60;"	d
ALPHA_23	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	61;"	d
ALPHA_24	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	62;"	d
ALPHA_25	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	63;"	d
ALPHA_26	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	64;"	d
ALPHA_27	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	65;"	d
ALPHA_28	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	66;"	d
ALPHA_29	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	67;"	d
ALPHA_3	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	41;"	d
ALPHA_30	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	68;"	d
ALPHA_31	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	69;"	d
ALPHA_32	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	70;"	d
ALPHA_33	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	71;"	d
ALPHA_34	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	72;"	d
ALPHA_35	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	73;"	d
ALPHA_36	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	74;"	d
ALPHA_37	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	75;"	d
ALPHA_38	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	76;"	d
ALPHA_39	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	77;"	d
ALPHA_4	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	42;"	d
ALPHA_40	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	78;"	d
ALPHA_41	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	79;"	d
ALPHA_42	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	80;"	d
ALPHA_43	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	81;"	d
ALPHA_44	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	82;"	d
ALPHA_45	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	83;"	d
ALPHA_46	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	84;"	d
ALPHA_47	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	85;"	d
ALPHA_48	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	86;"	d
ALPHA_49	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	87;"	d
ALPHA_5	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	43;"	d
ALPHA_50	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	88;"	d
ALPHA_6	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	44;"	d
ALPHA_7	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	45;"	d
ALPHA_8	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	46;"	d
ALPHA_9	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	47;"	d
AR	Makefile	/^AR       = ar$/;"	m
AR	lvm/Makefile	/^AR       = ar$/;"	m
A_DelaySize	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               A_DelaySize[4];             \/* A delay length in samples *\/$/;"	m	struct:__anon48	access:public
Abs_32	lvm/Common/lib/ScalarArithmetic.h	/^LVM_INT32   Abs_32(LVM_INT32     input);$/;"	p	signature:(LVM_INT32 input)
Abs_32	lvm/Common/src/Abs_32.c	/^LVM_INT32    Abs_32(LVM_INT32    input)$/;"	f	signature:(LVM_INT32 input)
Add2_Sat_16x16	lvm/Common/lib/VectorArithmetic.h	/^void Add2_Sat_16x16(          const LVM_INT16 *src,$/;"	p	signature:( const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n )
Add2_Sat_16x16	lvm/Common/src/Add2_Sat_16x16.c	/^void Add2_Sat_16x16( const LVM_INT16 *src,$/;"	f	signature:( const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n )
Add2_Sat_32x32	lvm/Common/lib/VectorArithmetic.h	/^void Add2_Sat_32x32(          const LVM_INT32  *src,$/;"	p	signature:( const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n )
Add2_Sat_32x32	lvm/Common/src/Add2_Sat_32x32.c	/^void Add2_Sat_32x32( const LVM_INT32  *src,$/;"	f	signature:( const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n )
Alignment	lvm/Bass/lib/LVDBE.h	/^    LVM_UINT16                Alignment;                  \/* Region alignment in bytes *\/$/;"	m	struct:__anon8	access:public
Alignment	lvm/Bundle/src/LVM_Private.h	/^    LVM_UINT16              Alignment;          \/* Byte alignment *\/$/;"	m	struct:__anon35	access:public
Alignment	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  Alignment;              \/* Region alignment in bytes *\/$/;"	m	struct:__anon55	access:public
Alpha	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Alpha;                    \/* Time constant. Set by calling application.  Can be changed at any time *\/$/;"	m	struct:__anon86	access:public
Alpha1	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Alpha1;$/;"	m	struct:__anon87	access:public
Alpha2	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Alpha2;                   \/* Warning the address of this location is passed as a pointer to Mix_1St_Cll_t in some functions *\/$/;"	m	struct:__anon87	access:public
Alpha_TableSize	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	37;"	d
B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B1;    \/* -b1! *\/$/;"	m	struct:__anon69	access:public
B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B1;   \/* -b1! *\/$/;"	m	struct:__anon65	access:public
B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B1;   \/* -b1! *\/$/;"	m	struct:__anon67	access:public
B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B1;   \/* -b1! *\/$/;"	m	struct:__anon70	access:public
B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B1;   \/* -b1! *\/$/;"	m	struct:__anon72	access:public
B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B1;   \/* -b1! *\/$/;"	m	struct:__anon66	access:public
B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B1;   \/* -b1! *\/$/;"	m	struct:__anon68	access:public
B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B1;   \/* -b1! *\/$/;"	m	struct:__anon71	access:public
B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B1;   \/* -b1! *\/$/;"	m	struct:__anon73	access:public
B1	lvm/Common/src/Filters.h	/^        LVM_INT16   B1;$/;"	m	struct:__anon94	access:public
B1	lvm/Common/src/Filters.h	/^        LVM_INT16   B1;$/;"	m	struct:__anon95	access:public
B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B2;   \/* -b2! *\/$/;"	m	struct:__anon65	access:public
B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B2;   \/* -b2! *\/$/;"	m	struct:__anon70	access:public
B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B2;   \/* -b2! *\/$/;"	m	struct:__anon72	access:public
B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B2;   \/* -b2! *\/$/;"	m	struct:__anon66	access:public
B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B2;   \/* -b2! *\/$/;"	m	struct:__anon71	access:public
B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B2;   \/* -b2! *\/$/;"	m	struct:__anon73	access:public
B2	lvm/Common/src/Filters.h	/^        LVM_INT16   B2;$/;"	m	struct:__anon94	access:public
BE_CentreFreq	lvm/Bundle/lib/LVM.h	/^    LVM_BE_CentreFreq_en        BE_CentreFreq;          \/* Bass Enhancement centre frequency *\/$/;"	m	struct:__anon32	access:public
BE_EffectLevel	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   BE_EffectLevel;         \/* Bass Enhancement effect level *\/$/;"	m	struct:__anon32	access:public
BE_HPF	lvm/Bundle/lib/LVM.h	/^    LVM_BE_FilterSelect_en      BE_HPF;                 \/* Bass Enhancement high pass filter selector *\/$/;"	m	struct:__anon32	access:public
BE_OperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_BE_Mode_en              BE_OperatingMode;       \/* Bass Enhancement operating mode *\/$/;"	m	struct:__anon32	access:public
BPFInstance	lvm/Bass/src/LVDBE_Private.h	/^    Biquad_Instance_t           BPFInstance;        \/* Band pass filter instance *\/$/;"	m	struct:__anon13	access:public
BPFTaps	lvm/Bass/src/LVDBE_Private.h	/^    Biquad_1I_Order2_Taps_t     BPFTaps;            \/* Band pass filter taps *\/$/;"	m	struct:__anon12	access:public
BPF_Fs11025_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	238;"	d
BPF_Fs11025_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	239;"	d
BPF_Fs11025_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	240;"	d
BPF_Fs11025_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	241;"	d
BPF_Fs11025_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	242;"	d
BPF_Fs11025_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	285;"	d
BPF_Fs11025_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	286;"	d
BPF_Fs11025_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	287;"	d
BPF_Fs11025_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	288;"	d
BPF_Fs11025_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	289;"	d
BPF_Fs11025_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	332;"	d
BPF_Fs11025_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	333;"	d
BPF_Fs11025_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	334;"	d
BPF_Fs11025_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	335;"	d
BPF_Fs11025_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	336;"	d
BPF_Fs11025_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	379;"	d
BPF_Fs11025_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	380;"	d
BPF_Fs11025_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	381;"	d
BPF_Fs11025_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	382;"	d
BPF_Fs11025_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	383;"	d
BPF_Fs12000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	243;"	d
BPF_Fs12000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	244;"	d
BPF_Fs12000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	245;"	d
BPF_Fs12000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	246;"	d
BPF_Fs12000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	247;"	d
BPF_Fs12000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	290;"	d
BPF_Fs12000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	291;"	d
BPF_Fs12000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	292;"	d
BPF_Fs12000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	293;"	d
BPF_Fs12000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	294;"	d
BPF_Fs12000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	337;"	d
BPF_Fs12000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	338;"	d
BPF_Fs12000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	339;"	d
BPF_Fs12000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	340;"	d
BPF_Fs12000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	341;"	d
BPF_Fs12000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	384;"	d
BPF_Fs12000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	385;"	d
BPF_Fs12000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	386;"	d
BPF_Fs12000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	387;"	d
BPF_Fs12000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	388;"	d
BPF_Fs16000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	248;"	d
BPF_Fs16000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	249;"	d
BPF_Fs16000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	250;"	d
BPF_Fs16000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	251;"	d
BPF_Fs16000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	252;"	d
BPF_Fs16000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	295;"	d
BPF_Fs16000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	296;"	d
BPF_Fs16000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	297;"	d
BPF_Fs16000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	298;"	d
BPF_Fs16000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	299;"	d
BPF_Fs16000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	342;"	d
BPF_Fs16000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	343;"	d
BPF_Fs16000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	344;"	d
BPF_Fs16000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	345;"	d
BPF_Fs16000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	346;"	d
BPF_Fs16000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	389;"	d
BPF_Fs16000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	390;"	d
BPF_Fs16000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	391;"	d
BPF_Fs16000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	392;"	d
BPF_Fs16000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	393;"	d
BPF_Fs22050_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	253;"	d
BPF_Fs22050_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	254;"	d
BPF_Fs22050_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	255;"	d
BPF_Fs22050_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	256;"	d
BPF_Fs22050_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	257;"	d
BPF_Fs22050_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	300;"	d
BPF_Fs22050_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	301;"	d
BPF_Fs22050_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	302;"	d
BPF_Fs22050_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	303;"	d
BPF_Fs22050_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	304;"	d
BPF_Fs22050_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	347;"	d
BPF_Fs22050_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	348;"	d
BPF_Fs22050_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	349;"	d
BPF_Fs22050_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	350;"	d
BPF_Fs22050_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	351;"	d
BPF_Fs22050_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	394;"	d
BPF_Fs22050_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	395;"	d
BPF_Fs22050_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	396;"	d
BPF_Fs22050_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	397;"	d
BPF_Fs22050_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	398;"	d
BPF_Fs24000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	258;"	d
BPF_Fs24000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	259;"	d
BPF_Fs24000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	260;"	d
BPF_Fs24000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	261;"	d
BPF_Fs24000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	262;"	d
BPF_Fs24000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	305;"	d
BPF_Fs24000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	306;"	d
BPF_Fs24000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	307;"	d
BPF_Fs24000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	308;"	d
BPF_Fs24000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	309;"	d
BPF_Fs24000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	352;"	d
BPF_Fs24000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	353;"	d
BPF_Fs24000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	354;"	d
BPF_Fs24000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	355;"	d
BPF_Fs24000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	356;"	d
BPF_Fs24000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	399;"	d
BPF_Fs24000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	400;"	d
BPF_Fs24000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	401;"	d
BPF_Fs24000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	402;"	d
BPF_Fs24000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	403;"	d
BPF_Fs32000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	263;"	d
BPF_Fs32000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	264;"	d
BPF_Fs32000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	265;"	d
BPF_Fs32000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	266;"	d
BPF_Fs32000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	267;"	d
BPF_Fs32000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	310;"	d
BPF_Fs32000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	311;"	d
BPF_Fs32000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	312;"	d
BPF_Fs32000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	313;"	d
BPF_Fs32000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	314;"	d
BPF_Fs32000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	357;"	d
BPF_Fs32000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	358;"	d
BPF_Fs32000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	359;"	d
BPF_Fs32000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	360;"	d
BPF_Fs32000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	361;"	d
BPF_Fs32000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	404;"	d
BPF_Fs32000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	405;"	d
BPF_Fs32000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	406;"	d
BPF_Fs32000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	407;"	d
BPF_Fs32000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	408;"	d
BPF_Fs44100_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	268;"	d
BPF_Fs44100_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	269;"	d
BPF_Fs44100_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	270;"	d
BPF_Fs44100_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	271;"	d
BPF_Fs44100_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	272;"	d
BPF_Fs44100_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	315;"	d
BPF_Fs44100_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	316;"	d
BPF_Fs44100_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	317;"	d
BPF_Fs44100_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	318;"	d
BPF_Fs44100_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	319;"	d
BPF_Fs44100_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	362;"	d
BPF_Fs44100_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	363;"	d
BPF_Fs44100_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	364;"	d
BPF_Fs44100_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	365;"	d
BPF_Fs44100_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	366;"	d
BPF_Fs44100_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	409;"	d
BPF_Fs44100_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	410;"	d
BPF_Fs44100_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	411;"	d
BPF_Fs44100_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	412;"	d
BPF_Fs44100_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	413;"	d
BPF_Fs48000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	273;"	d
BPF_Fs48000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	274;"	d
BPF_Fs48000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	275;"	d
BPF_Fs48000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	276;"	d
BPF_Fs48000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	277;"	d
BPF_Fs48000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	320;"	d
BPF_Fs48000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	321;"	d
BPF_Fs48000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	322;"	d
BPF_Fs48000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	323;"	d
BPF_Fs48000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	324;"	d
BPF_Fs48000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	367;"	d
BPF_Fs48000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	368;"	d
BPF_Fs48000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	369;"	d
BPF_Fs48000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	370;"	d
BPF_Fs48000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	371;"	d
BPF_Fs48000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	414;"	d
BPF_Fs48000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	415;"	d
BPF_Fs48000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	416;"	d
BPF_Fs48000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	417;"	d
BPF_Fs48000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	418;"	d
BPF_Fs8000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	233;"	d
BPF_Fs8000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	234;"	d
BPF_Fs8000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	235;"	d
BPF_Fs8000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	236;"	d
BPF_Fs8000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	237;"	d
BPF_Fs8000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	280;"	d
BPF_Fs8000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	281;"	d
BPF_Fs8000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	282;"	d
BPF_Fs8000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	283;"	d
BPF_Fs8000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	284;"	d
BPF_Fs8000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	327;"	d
BPF_Fs8000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	328;"	d
BPF_Fs8000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	329;"	d
BPF_Fs8000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	330;"	d
BPF_Fs8000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	331;"	d
BPF_Fs8000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	374;"	d
BPF_Fs8000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	375;"	d
BPF_Fs8000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	376;"	d
BPF_Fs8000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	377;"	d
BPF_Fs8000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	378;"	d
BP_1I_D16F16C14_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void BP_1I_D16F16C14_TRC_WRA_01 (           Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BP_1I_D16F16C14_TRC_WRA_01	lvm/Common/src/BP_1I_D16F16C14_TRC_WRA_01.c	/^void BP_1I_D16F16C14_TRC_WRA_01 ( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BP_1I_D16F16Css_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void BP_1I_D16F16Css_TRC_WRA_01_Init (      Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order2_Taps_t *pTaps, BP_C16_Coefs_t *pCoef)
BP_1I_D16F16Css_TRC_WRA_01_Init	lvm/Common/src/BP_1I_D16F16Css_TRC_WRA_01_Init.c	/^void BP_1I_D16F16Css_TRC_WRA_01_Init (   Biquad_Instance_t         *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order2_Taps_t *pTaps, BP_C16_Coefs_t *pCoef)
BP_1I_D16F32C30_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void BP_1I_D16F32C30_TRC_WRA_01 (           Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BP_1I_D16F32C30_TRC_WRA_01	lvm/Common/src/BP_1I_D16F32C30_TRC_WRA_01.c	/^void BP_1I_D16F32C30_TRC_WRA_01 ( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BP_1I_D16F32Cll_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void BP_1I_D16F32Cll_TRC_WRA_01_Init (      Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order2_Taps_t *pTaps, BP_C32_Coefs_t *pCoef)
BP_1I_D16F32Cll_TRC_WRA_01_Init	lvm/Common/src/BP_1I_D16F32Cll_TRC_WRA_01_Init.c	/^void BP_1I_D16F32Cll_TRC_WRA_01_Init (   Biquad_Instance_t         *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order2_Taps_t *pTaps, BP_C32_Coefs_t *pCoef)
BP_1I_D32F32C30_TRC_WRA_02	lvm/Common/lib/BIQUAD.h	/^void BP_1I_D32F32C30_TRC_WRA_02(            Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT32 *pDataIn, LVM_INT32 *pDataOut, LVM_INT16 NrSamples)
BP_1I_D32F32C30_TRC_WRA_02	lvm/Common/lib/BIQUAD.h	149;"	d
BP_1I_D32F32C30_TRC_WRA_02	lvm/Common/src/BP_1I_D32F32C30_TRC_WRA_02.c	/^void BP_1I_D32F32C30_TRC_WRA_02 ( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT32 *pDataIn, LVM_INT32 *pDataOut, LVM_INT16 NrSamples)
BP_1I_D32F32Cll_TRC_WRA_02_Init	lvm/Common/lib/BIQUAD.h	/^void BP_1I_D32F32Cll_TRC_WRA_02_Init (      Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order2_Taps_t *pTaps, BP_C32_Coefs_t *pCoef)
BP_1I_D32F32Cll_TRC_WRA_02_Init	lvm/Common/src/BP_1I_D32F32Cll_TRC_WRA_02_Init.c	/^void BP_1I_D32F32Cll_TRC_WRA_02_Init (   Biquad_Instance_t         *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order2_Taps_t *pTaps, BP_C32_Coefs_t *pCoef)
BP_C16_Coefs_t	lvm/Common/lib/BIQUAD.h	/^} BP_C16_Coefs_t;$/;"	t	typeref:struct:__anon70
BP_C32_Coefs_t	lvm/Common/lib/BIQUAD.h	/^} BP_C32_Coefs_t;$/;"	t	typeref:struct:__anon71
BQ_1I_D16F16C15_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void BQ_1I_D16F16C15_TRC_WRA_01(            Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_1I_D16F16C15_TRC_WRA_01	lvm/Common/src/BQ_1I_D16F16C15_TRC_WRA_01.c	/^void BQ_1I_D16F16C15_TRC_WRA_01 ( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_1I_D16F16Css_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void BQ_1I_D16F16Css_TRC_WRA_01_Init (      Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order2_Taps_t *pTaps, BQ_C16_Coefs_t *pCoef)
BQ_1I_D16F16Css_TRC_WRA_01_Init	lvm/Common/src/BQ_1I_D16F16Css_TRC_WRA_01_Init.c	/^void BQ_1I_D16F16Css_TRC_WRA_01_Init (   Biquad_Instance_t         *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order2_Taps_t *pTaps, BQ_C16_Coefs_t *pCoef)
BQ_1I_D16F32C14_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void BQ_1I_D16F32C14_TRC_WRA_01 (           Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_1I_D16F32C14_TRC_WRA_01	lvm/Common/src/BQ_1I_D16F32C14_TRC_WRA_01.c	/^void BQ_1I_D16F32C14_TRC_WRA_01 ( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_1I_D16F32Css_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void BQ_1I_D16F32Css_TRC_WRA_01_Init (      Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order2_Taps_t *pTaps, BQ_C16_Coefs_t *pCoef)
BQ_1I_D16F32Css_TRC_WRA_01_Init	lvm/Common/src/BQ_1I_D16F32Css_TRC_WRA_01_init.c	/^void BQ_1I_D16F32Css_TRC_WRA_01_Init (   Biquad_Instance_t         *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order2_Taps_t *pTaps, BQ_C16_Coefs_t *pCoef)
BQ_2I_D16F16C14_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void BQ_2I_D16F16C14_TRC_WRA_01(            Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D16F16C14_TRC_WRA_01	lvm/Common/src/BQ_2I_D16F16C14_TRC_WRA_01.c	/^void BQ_2I_D16F16C14_TRC_WRA_01 ( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D16F16C15_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void BQ_2I_D16F16C15_TRC_WRA_01(            Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D16F16C15_TRC_WRA_01	lvm/Common/src/BQ_2I_D16F16C15_TRC_WRA_01.c	/^void BQ_2I_D16F16C15_TRC_WRA_01 ( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D16F16Css_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void BQ_2I_D16F16Css_TRC_WRA_01_Init (      Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_2I_Order2_Taps_t *pTaps, BQ_C16_Coefs_t *pCoef)
BQ_2I_D16F16Css_TRC_WRA_01_Init	lvm/Common/src/BQ_2I_D16F16Css_TRC_WRA_01_Init.c	/^void BQ_2I_D16F16Css_TRC_WRA_01_Init (   Biquad_Instance_t         *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, Biquad_2I_Order2_Taps_t *pTaps, BQ_C16_Coefs_t *pCoef)
BQ_2I_D16F32C13_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void BQ_2I_D16F32C13_TRC_WRA_01 (           Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D16F32C13_TRC_WRA_01	lvm/Common/src/BQ_2I_D16F32C13_TRC_WRA_01.c	/^void BQ_2I_D16F32C13_TRC_WRA_01 (           Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D16F32C14_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void BQ_2I_D16F32C14_TRC_WRA_01 (           Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D16F32C14_TRC_WRA_01	lvm/Common/src/BQ_2I_D16F32C14_TRC_WRA_01.c	/^void BQ_2I_D16F32C14_TRC_WRA_01 (           Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D16F32C15_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void BQ_2I_D16F32C15_TRC_WRA_01 (           Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D16F32C15_TRC_WRA_01	lvm/Common/src/BQ_2I_D16F32C15_TRC_WRA_01.c	/^void BQ_2I_D16F32C15_TRC_WRA_01 (           Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D16F32Css_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void BQ_2I_D16F32Css_TRC_WRA_01_Init (      Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_2I_Order2_Taps_t *pTaps, BQ_C16_Coefs_t *pCoef)
BQ_2I_D16F32Css_TRC_WRA_01_Init	lvm/Common/src/BQ_2I_D16F32Css_TRC_WRA_01_init.c	/^void BQ_2I_D16F32Css_TRC_WRA_01_Init (   Biquad_Instance_t         *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, Biquad_2I_Order2_Taps_t *pTaps, BQ_C16_Coefs_t *pCoef)
BQ_2I_D32F32C30_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void BQ_2I_D32F32C30_TRC_WRA_01 (           Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT32 *pDataIn, LVM_INT32 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D32F32C30_TRC_WRA_01	lvm/Common/src/BQ_2I_D32F32C30_TRC_WRA_01.c	/^void BQ_2I_D32F32C30_TRC_WRA_01 (           Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT32 *pDataIn, LVM_INT32 *pDataOut, LVM_INT16 NrSamples)
BQ_2I_D32F32Cll_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void BQ_2I_D32F32Cll_TRC_WRA_01_Init (      Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_2I_Order2_Taps_t *pTaps, BQ_C32_Coefs_t *pCoef)
BQ_2I_D32F32Cll_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	148;"	d
BQ_2I_D32F32Cll_TRC_WRA_01_Init	lvm/Common/src/BQ_2I_D32F32Cll_TRC_WRA_01_Init.c	/^void BQ_2I_D32F32Cll_TRC_WRA_01_Init (   Biquad_Instance_t         *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, Biquad_2I_Order2_Taps_t *pTaps, BQ_C32_Coefs_t *pCoef)
BQ_C16_Coefs_t	lvm/Common/lib/BIQUAD.h	/^} BQ_C16_Coefs_t;$/;"	t	typeref:struct:__anon65
BQ_C32_Coefs_t	lvm/Common/lib/BIQUAD.h	/^} BQ_C32_Coefs_t;$/;"	t	typeref:struct:__anon66
BUNDLE_SHARED_TARGET	lvm/Makefile	/^BUNDLE_SHARED_TARGET:= libbundle.so$/;"	m
BUNDLE_STATIC_TARGET	lvm/Makefile	/^BUNDLE_STATIC_TARGET:= libbundle.a$/;"	m
B_DelaySize	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               B_DelaySize[4];             \/* B delay length in samples *\/$/;"	m	struct:__anon48	access:public
BiquadA012B12CoefsSP_t	lvm/Common/src/Filters.h	/^} BiquadA012B12CoefsSP_t;$/;"	t	typeref:struct:__anon94
BiquadA01B1CoefsSP_t	lvm/Common/src/Filters.h	/^} BiquadA01B1CoefsSP_t;$/;"	t	typeref:struct:__anon95
Biquad_1I_Order1_Taps_t	lvm/Common/lib/BIQUAD.h	/^} Biquad_1I_Order1_Taps_t;$/;"	t	typeref:struct:__anon74
Biquad_1I_Order2_Taps_t	lvm/Common/lib/BIQUAD.h	/^} Biquad_1I_Order2_Taps_t;$/;"	t	typeref:struct:__anon76
Biquad_2I_Order1_Taps_t	lvm/Common/lib/BIQUAD.h	/^} Biquad_2I_Order1_Taps_t;$/;"	t	typeref:struct:__anon75
Biquad_2I_Order2_Taps_t	lvm/Common/lib/BIQUAD.h	/^} Biquad_2I_Order2_Taps_t;$/;"	t	typeref:struct:__anon77
Biquad_Instance_t	lvm/Common/lib/BIQUAD.h	/^} Biquad_Instance_t;$/;"	t	typeref:struct:__anon64
BlickSizeMultiple	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT32               BlickSizeMultiple;$/;"	m	struct:__anon40	access:public
BufferMode	lvm/Bundle/lib/LVM.h	/^    LVM_BufferMode_en           BufferMode;             \/* Buffer management mode *\/$/;"	m	struct:__anon33	access:public
BufferState	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               BufferState;        \/* Buffer status *\/$/;"	m	struct:__anon37	access:public
BufferUpdateSamplesCount	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_INT32                   BufferUpdateSamplesCount;           \/* Counter used to know when to put a new value in the buffer                                   *\/$/;"	m	struct:__anon126	access:public
BypassMix	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_BypassMix_t        BypassMix;          \/* Bypass mixer configuration *\/$/;"	m	struct:__anon114	access:public
BypassMixer	lvm/Bass/src/LVDBE_Private.h	/^    LVMixer3_2St_st             BypassMixer;        \/* Bypass Mixer for Click Removal *\/$/;"	m	struct:__anon12	access:public
BypassMixer	lvm/Eq/src/LVEQNB_Private.h	/^    LVMixer3_2St_st           BypassMixer;              \/* Bypass mixer used in transitions *\/$/;"	m	struct:__anon61	access:public
BypassMixer	lvm/Reverb/src/LVREV_Private.h	/^    Mix_2St_Cll_t           BypassMixer;                \/* Dry\/wet mixer *\/$/;"	m	struct:__anon48	access:public
BypassMixer_Callback	lvm/Reverb/src/LVREV_ApplyNewSettings.c	/^LVM_INT32 BypassMixer_Callback (void *pCallbackData,$/;"	f	signature:(void *pCallbackData, void *pGeneralPurpose, LVM_INT16 GeneralPurpose )
BypassMixer_Callback	lvm/Reverb/src/LVREV_Private.h	/^LVM_INT32               BypassMixer_Callback(void       *pCallbackData,$/;"	p	signature:(void *pCallbackData, void *pGeneralPurpose, LVM_INT16 GeneralPurpose )
BypassVolume	lvm/Bass/src/LVDBE_Private.h	/^    LVMixer3_1St_st             BypassVolume;       \/* Bypass volume scaler *\/$/;"	m	struct:__anon12	access:public
CC	Makefile	/^CC       = gcc$/;"	m
CC	lvm/Makefile	/^CC       = gcc$/;"	m
CSEX_EQUALISER_11025_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	279;"	d
CSEX_EQUALISER_11025_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	280;"	d
CSEX_EQUALISER_11025_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	281;"	d
CSEX_EQUALISER_11025_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	282;"	d
CSEX_EQUALISER_11025_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	283;"	d
CSEX_EQUALISER_11025_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	284;"	d
CSEX_EQUALISER_12000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	293;"	d
CSEX_EQUALISER_12000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	294;"	d
CSEX_EQUALISER_12000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	295;"	d
CSEX_EQUALISER_12000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	296;"	d
CSEX_EQUALISER_12000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	297;"	d
CSEX_EQUALISER_12000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	298;"	d
CSEX_EQUALISER_16000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	307;"	d
CSEX_EQUALISER_16000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	308;"	d
CSEX_EQUALISER_16000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	309;"	d
CSEX_EQUALISER_16000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	310;"	d
CSEX_EQUALISER_16000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	311;"	d
CSEX_EQUALISER_16000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	312;"	d
CSEX_EQUALISER_22050_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	321;"	d
CSEX_EQUALISER_22050_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	322;"	d
CSEX_EQUALISER_22050_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	323;"	d
CSEX_EQUALISER_22050_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	324;"	d
CSEX_EQUALISER_22050_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	325;"	d
CSEX_EQUALISER_22050_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	326;"	d
CSEX_EQUALISER_24000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	335;"	d
CSEX_EQUALISER_24000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	336;"	d
CSEX_EQUALISER_24000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	337;"	d
CSEX_EQUALISER_24000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	338;"	d
CSEX_EQUALISER_24000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	339;"	d
CSEX_EQUALISER_24000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	340;"	d
CSEX_EQUALISER_32000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	349;"	d
CSEX_EQUALISER_32000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	350;"	d
CSEX_EQUALISER_32000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	351;"	d
CSEX_EQUALISER_32000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	352;"	d
CSEX_EQUALISER_32000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	353;"	d
CSEX_EQUALISER_32000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	354;"	d
CSEX_EQUALISER_44100_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	363;"	d
CSEX_EQUALISER_44100_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	364;"	d
CSEX_EQUALISER_44100_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	365;"	d
CSEX_EQUALISER_44100_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	366;"	d
CSEX_EQUALISER_44100_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	367;"	d
CSEX_EQUALISER_44100_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	368;"	d
CSEX_EQUALISER_48000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	377;"	d
CSEX_EQUALISER_48000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	378;"	d
CSEX_EQUALISER_48000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	379;"	d
CSEX_EQUALISER_48000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	380;"	d
CSEX_EQUALISER_48000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	381;"	d
CSEX_EQUALISER_48000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	382;"	d
CSEX_EQUALISER_8000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	265;"	d
CSEX_EQUALISER_8000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	266;"	d
CSEX_EQUALISER_8000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	267;"	d
CSEX_EQUALISER_8000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	268;"	d
CSEX_EQUALISER_8000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	269;"	d
CSEX_EQUALISER_8000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	270;"	d
CS_Active	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               CS_Active;          \/* Control flag *\/$/;"	m	struct:__anon40	access:public
CS_EQUALISER_11025_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	273;"	d
CS_EQUALISER_11025_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	274;"	d
CS_EQUALISER_11025_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	275;"	d
CS_EQUALISER_11025_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	276;"	d
CS_EQUALISER_11025_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	277;"	d
CS_EQUALISER_11025_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	278;"	d
CS_EQUALISER_12000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	287;"	d
CS_EQUALISER_12000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	288;"	d
CS_EQUALISER_12000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	289;"	d
CS_EQUALISER_12000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	290;"	d
CS_EQUALISER_12000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	291;"	d
CS_EQUALISER_12000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	292;"	d
CS_EQUALISER_16000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	301;"	d
CS_EQUALISER_16000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	302;"	d
CS_EQUALISER_16000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	303;"	d
CS_EQUALISER_16000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	304;"	d
CS_EQUALISER_16000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	305;"	d
CS_EQUALISER_16000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	306;"	d
CS_EQUALISER_22050_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	315;"	d
CS_EQUALISER_22050_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	316;"	d
CS_EQUALISER_22050_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	317;"	d
CS_EQUALISER_22050_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	318;"	d
CS_EQUALISER_22050_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	319;"	d
CS_EQUALISER_22050_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	320;"	d
CS_EQUALISER_24000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	329;"	d
CS_EQUALISER_24000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	330;"	d
CS_EQUALISER_24000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	331;"	d
CS_EQUALISER_24000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	332;"	d
CS_EQUALISER_24000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	333;"	d
CS_EQUALISER_24000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	334;"	d
CS_EQUALISER_32000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	343;"	d
CS_EQUALISER_32000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	344;"	d
CS_EQUALISER_32000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	345;"	d
CS_EQUALISER_32000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	346;"	d
CS_EQUALISER_32000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	347;"	d
CS_EQUALISER_32000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	348;"	d
CS_EQUALISER_44100_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	357;"	d
CS_EQUALISER_44100_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	358;"	d
CS_EQUALISER_44100_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	359;"	d
CS_EQUALISER_44100_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	360;"	d
CS_EQUALISER_44100_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	361;"	d
CS_EQUALISER_44100_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	362;"	d
CS_EQUALISER_48000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	371;"	d
CS_EQUALISER_48000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	372;"	d
CS_EQUALISER_48000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	373;"	d
CS_EQUALISER_48000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	374;"	d
CS_EQUALISER_48000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	375;"	d
CS_EQUALISER_48000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	376;"	d
CS_EQUALISER_8000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	259;"	d
CS_EQUALISER_8000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	260;"	d
CS_EQUALISER_8000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	261;"	d
CS_EQUALISER_8000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	262;"	d
CS_EQUALISER_8000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	263;"	d
CS_EQUALISER_8000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	264;"	d
CS_EffectLevel	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   CS_EffectLevel;           \/* Concert Sound effect level *\/$/;"	m	struct:__anon32	access:public
CS_Instance	lvm/Bundle/src/LVM_Private.h	/^    LVCS_Instance_t         CS_Instance;        \/* Concert Sound instance *\/$/;"	m	struct:__anon40	access:public
CS_MIDDLE_11025_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	43;"	d
CS_MIDDLE_11025_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	44;"	d
CS_MIDDLE_11025_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	45;"	d
CS_MIDDLE_11025_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	46;"	d
CS_MIDDLE_11025_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	47;"	d
CS_MIDDLE_11025_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	48;"	d
CS_MIDDLE_12000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	57;"	d
CS_MIDDLE_12000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	58;"	d
CS_MIDDLE_12000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	59;"	d
CS_MIDDLE_12000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	60;"	d
CS_MIDDLE_12000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	61;"	d
CS_MIDDLE_12000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	62;"	d
CS_MIDDLE_16000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	71;"	d
CS_MIDDLE_16000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	72;"	d
CS_MIDDLE_16000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	73;"	d
CS_MIDDLE_16000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	74;"	d
CS_MIDDLE_16000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	75;"	d
CS_MIDDLE_16000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	76;"	d
CS_MIDDLE_22050_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	85;"	d
CS_MIDDLE_22050_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	86;"	d
CS_MIDDLE_22050_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	87;"	d
CS_MIDDLE_22050_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	88;"	d
CS_MIDDLE_22050_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	89;"	d
CS_MIDDLE_22050_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	90;"	d
CS_MIDDLE_24000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	99;"	d
CS_MIDDLE_24000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	100;"	d
CS_MIDDLE_24000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	101;"	d
CS_MIDDLE_24000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	102;"	d
CS_MIDDLE_24000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	103;"	d
CS_MIDDLE_24000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	104;"	d
CS_MIDDLE_32000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	113;"	d
CS_MIDDLE_32000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	114;"	d
CS_MIDDLE_32000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	115;"	d
CS_MIDDLE_32000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	116;"	d
CS_MIDDLE_32000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	117;"	d
CS_MIDDLE_32000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	118;"	d
CS_MIDDLE_44100_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	127;"	d
CS_MIDDLE_44100_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	128;"	d
CS_MIDDLE_44100_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	129;"	d
CS_MIDDLE_44100_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	130;"	d
CS_MIDDLE_44100_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	131;"	d
CS_MIDDLE_44100_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	132;"	d
CS_MIDDLE_48000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	141;"	d
CS_MIDDLE_48000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	142;"	d
CS_MIDDLE_48000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	143;"	d
CS_MIDDLE_48000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	144;"	d
CS_MIDDLE_48000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	145;"	d
CS_MIDDLE_48000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	146;"	d
CS_MIDDLE_8000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	29;"	d
CS_MIDDLE_8000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	30;"	d
CS_MIDDLE_8000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	31;"	d
CS_MIDDLE_8000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	32;"	d
CS_MIDDLE_8000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	33;"	d
CS_MIDDLE_8000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	34;"	d
CS_REVERB_11025_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	181;"	d
CS_REVERB_11025_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	182;"	d
CS_REVERB_11025_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	183;"	d
CS_REVERB_11025_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	184;"	d
CS_REVERB_11025_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	185;"	d
CS_REVERB_11025_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	186;"	d
CS_REVERB_12000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	189;"	d
CS_REVERB_12000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	190;"	d
CS_REVERB_12000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	191;"	d
CS_REVERB_12000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	192;"	d
CS_REVERB_12000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	193;"	d
CS_REVERB_12000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	194;"	d
CS_REVERB_16000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	197;"	d
CS_REVERB_16000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	198;"	d
CS_REVERB_16000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	199;"	d
CS_REVERB_16000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	200;"	d
CS_REVERB_16000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	201;"	d
CS_REVERB_16000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	202;"	d
CS_REVERB_22050_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	205;"	d
CS_REVERB_22050_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	206;"	d
CS_REVERB_22050_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	207;"	d
CS_REVERB_22050_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	208;"	d
CS_REVERB_22050_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	209;"	d
CS_REVERB_22050_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	210;"	d
CS_REVERB_24000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	213;"	d
CS_REVERB_24000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	214;"	d
CS_REVERB_24000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	215;"	d
CS_REVERB_24000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	216;"	d
CS_REVERB_24000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	217;"	d
CS_REVERB_24000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	218;"	d
CS_REVERB_32000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	221;"	d
CS_REVERB_32000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	222;"	d
CS_REVERB_32000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	223;"	d
CS_REVERB_32000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	224;"	d
CS_REVERB_32000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	225;"	d
CS_REVERB_32000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	226;"	d
CS_REVERB_44100_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	229;"	d
CS_REVERB_44100_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	230;"	d
CS_REVERB_44100_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	231;"	d
CS_REVERB_44100_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	232;"	d
CS_REVERB_44100_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	233;"	d
CS_REVERB_44100_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	234;"	d
CS_REVERB_48000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	237;"	d
CS_REVERB_48000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	238;"	d
CS_REVERB_48000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	239;"	d
CS_REVERB_48000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	240;"	d
CS_REVERB_48000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	241;"	d
CS_REVERB_48000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	242;"	d
CS_REVERB_8000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	173;"	d
CS_REVERB_8000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	174;"	d
CS_REVERB_8000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	175;"	d
CS_REVERB_8000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	176;"	d
CS_REVERB_8000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	177;"	d
CS_REVERB_8000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	178;"	d
CS_SIDE_11025_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	49;"	d
CS_SIDE_11025_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	50;"	d
CS_SIDE_11025_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	51;"	d
CS_SIDE_11025_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	52;"	d
CS_SIDE_11025_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	53;"	d
CS_SIDE_11025_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	54;"	d
CS_SIDE_12000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	63;"	d
CS_SIDE_12000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	64;"	d
CS_SIDE_12000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	65;"	d
CS_SIDE_12000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	66;"	d
CS_SIDE_12000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	67;"	d
CS_SIDE_12000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	68;"	d
CS_SIDE_16000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	77;"	d
CS_SIDE_16000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	78;"	d
CS_SIDE_16000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	79;"	d
CS_SIDE_16000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	80;"	d
CS_SIDE_16000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	81;"	d
CS_SIDE_16000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	82;"	d
CS_SIDE_22050_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	91;"	d
CS_SIDE_22050_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	92;"	d
CS_SIDE_22050_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	93;"	d
CS_SIDE_22050_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	94;"	d
CS_SIDE_22050_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	95;"	d
CS_SIDE_22050_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	96;"	d
CS_SIDE_24000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	105;"	d
CS_SIDE_24000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	106;"	d
CS_SIDE_24000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	107;"	d
CS_SIDE_24000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	108;"	d
CS_SIDE_24000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	109;"	d
CS_SIDE_24000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	110;"	d
CS_SIDE_32000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	119;"	d
CS_SIDE_32000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	120;"	d
CS_SIDE_32000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	121;"	d
CS_SIDE_32000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	122;"	d
CS_SIDE_32000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	123;"	d
CS_SIDE_32000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	124;"	d
CS_SIDE_44100_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	133;"	d
CS_SIDE_44100_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	134;"	d
CS_SIDE_44100_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	135;"	d
CS_SIDE_44100_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	136;"	d
CS_SIDE_44100_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	137;"	d
CS_SIDE_44100_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	138;"	d
CS_SIDE_48000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	147;"	d
CS_SIDE_48000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	148;"	d
CS_SIDE_48000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	149;"	d
CS_SIDE_48000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	150;"	d
CS_SIDE_48000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	151;"	d
CS_SIDE_48000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	152;"	d
CS_SIDE_8000_A0	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	35;"	d
CS_SIDE_8000_A1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	36;"	d
CS_SIDE_8000_A2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	37;"	d
CS_SIDE_8000_B1	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	38;"	d
CS_SIDE_8000_B2	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	39;"	d
CS_SIDE_8000_SCALE	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	40;"	d
CXX	Makefile	/^CXX      = g++$/;"	m
CXX	lvm/Makefile	/^CXX      = g++$/;"	m
CallBack	lvm/Bundle/src/LVM_Private.h	/^    LVM_Callback            CallBack;$/;"	m	struct:__anon40	access:public
CallBack	lvm/Eq/lib/LVEQNB.h	/^    LVM_Callback                CallBack;               \/* Bundle callback *\/$/;"	m	struct:__anon59	access:public
CallBack	lvm/StereoWidening/lib/LVCS.h	/^    LVM_Callback            CallBack;               \/* Bundle callback *\/$/;"	m	struct:__anon106	access:public
CallBackParam	lvm/Common/lib/LVM_Timer.h	/^    LVM_INT32  CallBackParam;$/;"	m	struct:__anon63	access:public
CallBackParam	lvm/Common/src/LVM_Timer_Private.h	/^    LVM_INT32  CallBackParam;$/;"	m	struct:__anon93	access:public
CallbackParam	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackParam;            \/* Parameter that will be used in the calback function *\/$/;"	m	struct:__anon86	access:public
CallbackParam	lvm/Common/src/LVC_Mixer.h	/^    LVM_INT16       CallbackParam;      \/* Parameter that will be used in the calback function *\/$/;"	m	struct:__anon89	access:public
CallbackParam1	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackParam1;$/;"	m	struct:__anon87	access:public
CallbackParam2	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackParam2;$/;"	m	struct:__anon87	access:public
CallbackSet	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackSet;              \/* Boolean.  Should be set by calling application each time the target value is updated *\/$/;"	m	struct:__anon86	access:public
CallbackSet	lvm/Common/src/LVC_Mixer.h	/^    LVM_INT16       CallbackSet;        \/* Boolean.  Should be set by calling application each time the target value is updated *\/$/;"	m	struct:__anon89	access:public
CallbackSet1	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackSet1;$/;"	m	struct:__anon87	access:public
CallbackSet2	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackSet2;$/;"	m	struct:__anon87	access:public
Capabilities	lvm/Bass/src/LVDBE_Private.h	/^    LVDBE_Capabilities_t        Capabilities;         \/* Instance capabilities *\/$/;"	m	struct:__anon14	access:public
Capabilities	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_Capabilities_t           Capabilities;       \/* Instance capabilities *\/$/;"	m	struct:__anon61	access:public
Capabilities	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_Capabilities_t     Capabilities;       \/* Initialisation capabilities *\/$/;"	m	struct:__anon114	access:public
CenterFrequency	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT16                 CenterFrequency;             \/* Center frequency of the band-pass filter (in Hz)                  *\/$/;"	m	struct:__anon119	access:public
CentreFrequency	lvm/Bass/lib/LVDBE.h	/^      LVM_UINT16              CentreFrequency;          \/* Centre frequency capabilities *\/$/;"	m	struct:__anon11	access:public
CentreFrequency	lvm/Bass/lib/LVDBE.h	/^    LVDBE_CentreFreq_en     CentreFrequency;$/;"	m	struct:__anon10	access:public
Coefs	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^  LVM_INT32                            Coefs[2];       \/* pointer to the filter coefficients *\/$/;"	m	struct:__anon127	access:public
CompFull	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16   CompFull;                       \/* Post CS compression 100% effect *\/$/;"	m	struct:__anon113	access:public
CompIntFast	lvm/Common/lib/CompLim.h	/^    LVM_INT32   CompIntFast;        \/* Compressor fast integrator current value *\/$/;"	m	struct:__anon85	access:public
CompIntSlow	lvm/Common/lib/CompLim.h	/^    LVM_INT32   CompIntSlow;        \/* Compressor slow integrator current value *\/$/;"	m	struct:__anon85	access:public
CompLim_Instance_t	lvm/Common/lib/CompLim.h	/^} CompLim_Instance_t;$/;"	t	typeref:struct:__anon85
CompMin	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16   CompMin;                        \/* Post CS compression 0% effect *\/$/;"	m	struct:__anon113	access:public
Comp_Attack_F	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Comp_Attack_F;      \/* Attack time constant of fast the integrator *\/$/;"	m	struct:__anon85	access:public
Comp_Attack_S	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Comp_Attack_S;      \/* Attack time constant of the slow integrator *\/$/;"	m	struct:__anon85	access:public
Comp_Atten	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Comp_Atten;         \/* Attenuation applied before soft knee compressor *\/$/;"	m	struct:__anon85	access:public
Comp_Decay_F	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Comp_Decay_F;       \/* Decay time constant of fast the integrator *\/$/;"	m	struct:__anon85	access:public
Comp_Decay_S	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Comp_Decay_S;       \/* Decay time constant of slow the integrator *\/$/;"	m	struct:__anon85	access:public
CompressGain	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               CompressGain;       \/* Last used compressor gain*\/$/;"	m	struct:__anon114	access:public
CompressorMode	lvm/StereoWidening/lib/LVCS.h	/^    LVM_Mode_en             CompressorMode;         \/* Non-Linear Compressor Mode *\/$/;"	m	struct:__anon105	access:public
ConfigurationNumber	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT32               ConfigurationNumber;$/;"	m	struct:__anon40	access:public
ControlPending	lvm/Bundle/src/LVM_Private.h	/^    LVM_UINT16              ControlPending;     \/* Control flag to indicate update pending *\/$/;"	m	struct:__anon40	access:public
Copy_16	lvm/Common/lib/VectorArithmetic.h	/^void Copy_16(                 const LVM_INT16 *src,$/;"	p	signature:( const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n )
Copy_16	lvm/Common/src/Copy_16.c	/^void Copy_16( const LVM_INT16 *src,$/;"	f	signature:( const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n )
Core_MixHard_2St_D32C31_SAT	lvm/Common/lib/Mixer.h	/^void Core_MixHard_2St_D32C31_SAT(   Mix_2St_Cll_t       *pInstance,$/;"	p	signature:( Mix_2St_Cll_t *pInstance, const LVM_INT32 *src1, const LVM_INT32 *src2, LVM_INT32 *dst, LVM_INT16 n)
Core_MixHard_2St_D32C31_SAT	lvm/Common/src/Core_MixHard_2St_D32C31_SAT.c	/^void Core_MixHard_2St_D32C31_SAT(   Mix_2St_Cll_t       *pInstance,$/;"	f	signature:( Mix_2St_Cll_t *pInstance, const LVM_INT32 *src1, const LVM_INT32 *src2, LVM_INT32 *dst, LVM_INT16 n)
Core_MixInSoft_D32C31_SAT	lvm/Common/lib/Mixer.h	/^void Core_MixInSoft_D32C31_SAT(     Mix_1St_Cll_t       *pInstance,$/;"	p	signature:( Mix_1St_Cll_t *pInstance, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
Core_MixInSoft_D32C31_SAT	lvm/Common/src/Core_MixInSoft_D32C31_SAT.c	/^void Core_MixInSoft_D32C31_SAT(     Mix_1St_Cll_t       *pInstance,$/;"	f	signature:( Mix_1St_Cll_t *pInstance, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
Core_MixSoft_1St_D32C31_WRA	lvm/Common/lib/Mixer.h	/^void Core_MixSoft_1St_D32C31_WRA(   Mix_1St_Cll_t       *pInstance,$/;"	p	signature:( Mix_1St_Cll_t *pInstance, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
Core_MixSoft_1St_D32C31_WRA	lvm/Common/src/Core_MixSoft_1St_D32C31_WRA.c	/^void Core_MixSoft_1St_D32C31_WRA(   Mix_1St_Cll_t       *pInstance,$/;"	f	signature:( Mix_1St_Cll_t *pInstance, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
Current	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Current;                  \/* Current value.  Set by the mixer function. *\/$/;"	m	struct:__anon86	access:public
Current	lvm/Common/src/LVC_Mixer_Private.h	/^    LVM_INT32                       Current;                \/* 32 bit number specifying fractional valude of Current Gain *\/$/;"	m	struct:__anon96	access:public
Current1	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Current1;$/;"	m	struct:__anon87	access:public
Current2	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Current2;$/;"	m	struct:__anon87	access:public
CurrentParams	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_ControlParams_st  CurrentParams;              \/* Parameters being used *\/$/;"	m	struct:__anon48	access:public
CurrentParams	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_ControlParams_t       CurrentParams;                      \/* Current control parameters of the module                                                     *\/$/;"	m	struct:__anon126	access:public
DBE_Active	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               DBE_Active;         \/* Control flag *\/$/;"	m	struct:__anon40	access:public
DBE_Instance	lvm/Bundle/src/LVM_Private.h	/^    LVDBE_Instance_t        DBE_Instance;       \/* Dynamic Bass Enhancement instance *\/$/;"	m	struct:__anon40	access:public
DC_2I_D16_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void DC_2I_D16_TRC_WRA_01          (        Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
DC_2I_D16_TRC_WRA_01	lvm/Common/src/DC_2I_D16_TRC_WRA_01.c	/^void DC_2I_D16_TRC_WRA_01( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
DC_2I_D16_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void DC_2I_D16_TRC_WRA_01_Init     (        Biquad_Instance_t       *pInstance);$/;"	p	signature:( Biquad_Instance_t *pInstance)
DC_2I_D16_TRC_WRA_01_Init	lvm/Common/src/DC_2I_D16_TRC_WRA_01_Init.c	/^void  DC_2I_D16_TRC_WRA_01_Init(Biquad_Instance_t   *pInstance)$/;"	f	signature:(Biquad_Instance_t *pInstance)
DC_D16_STEP	lvm/Common/src/DC_2I_D16_TRC_WRA_01_Private.h	21;"	d
DC_RemovalInstance	lvm/Bundle/src/LVM_Private.h	/^    Biquad_Instance_t       DC_RemovalInstance; \/* DC removal filter instance *\/$/;"	m	struct:__anon40	access:public
DECAY_SHIFT	lvm/Bass/src/LVDBE_Coeffs.h	437;"	d
DECAY_SHIFT	lvm/Common/src/AGC_MIX_VOL_2St1Mon_D32_WRA.c	35;"	d	file:
DTAP_BUNDLE	Makefile	/^DTAP_BUNDLE = yes$/;"	m
DTAP_BUNDLE	lvm/Makefile	/^DTAP_BUNDLE = yes$/;"	m
DTAP_EFFECT_CLASSIC	include/dtap.h	/^    DTAP_EFFECT_CLASSIC   = 0x1,$/;"	e	enum:__anon130
DTAP_EFFECT_MAX	include/dtap.h	/^    DTAP_EFFECT_MAX       = 0x800000$/;"	e	enum:__anon130
DTAP_EFFECT_NONE	include/dtap.h	/^    DTAP_EFFECT_NONE      = 0x0,$/;"	e	enum:__anon130
DTAP_REVERB	Makefile	/^DTAP_REVERB = yes$/;"	m
DTAP_REVERB	lvm/Makefile	/^DTAP_REVERB = yes$/;"	m
DTAP_VERSION	Makefile	/^DTAP_VERSION = v1.0$/;"	m
DTAP_VERSION	lvm/Makefile	/^DTAP_VERSION = v1.0$/;"	m
DT_DEBUG	Makefile	/^DT_DEBUG = -g$/;"	m
DT_DEBUG	lvm/Makefile	/^DT_DEBUG = -g$/;"	m
Damping	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  Damping;                \/* Damping *\/$/;"	m	struct:__anon44	access:public
DelayAllPass_Sat_32x16To32	lvm/Common/lib/VectorArithmetic.h	/^void DelayAllPass_Sat_32x16To32(    LVM_INT32  *delay,              \/* Delay buffer *\/$/;"	p	signature:( LVM_INT32 *delay, LVM_UINT16 size, LVM_INT16 coeff, LVM_UINT16 DelayOffset, LVM_UINT16 *pAllPassOffset, LVM_INT32 *dst, LVM_INT16 n)
DelayAllPass_Sat_32x16To32	lvm/Common/src/DelayAllPass_Sat_32x16To32.c	/^void DelayAllPass_Sat_32x16To32(  LVM_INT32  *delay,                    \/* Delay buffer *\/$/;"	f	signature:( LVM_INT32 *delay, LVM_UINT16 size, LVM_INT16 coeff, LVM_UINT16 DelayOffset, LVM_UINT16 *pAllPassOffset, LVM_INT32 *dst, LVM_INT16 n)
DelayMix_16x16	lvm/Common/lib/VectorArithmetic.h	/^void DelayMix_16x16(          const LVM_INT16 *src,$/;"	p	signature:( const LVM_INT16 *src, LVM_INT16 *delay, LVM_INT16 size, LVM_INT16 *dst, LVM_INT16 *pOffset, LVM_INT16 n)
DelayMix_16x16	lvm/Common/src/DelayMix_16x16.c	/^void DelayMix_16x16(const LVM_INT16 *src,           \/* Source 1, to be delayed *\/$/;"	f	signature:(const LVM_INT16 *src, LVM_INT16 *delay, LVM_INT16 size, LVM_INT16 *dst, LVM_INT16 *pOffset, LVM_INT16 n)
DelayOffset	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                   DelayOffset;$/;"	m	struct:__anon107	access:public
DelaySize	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                   DelaySize;$/;"	m	struct:__anon107	access:public
DelayWrite_32	lvm/Common/lib/VectorArithmetic.h	/^void DelayWrite_32(           const LVM_INT32  *src,               \/* Source 1, to be delayed *\/$/;"	p	signature:( const LVM_INT32 *src, LVM_INT32 *delay, LVM_UINT16 size, LVM_UINT16 *pOffset, LVM_INT16 n)
DelayWrite_32	lvm/Common/src/DelayWrite_32.c	/^void DelayWrite_32(const LVM_INT32  *src,               \/* Source 1, to be delayed *\/$/;"	f	signature:(const LVM_INT32 *src, LVM_INT32 *delay, LVM_UINT16 size, LVM_UINT16 *pOffset, LVM_INT16 n)
Delay_AP	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               Delay_AP[4];                \/* Offset to AP delay buffer start *\/$/;"	m	struct:__anon48	access:public
Delta	lvm/Common/src/LVC_Mixer_Private.h	/^    LVM_INT32                       Delta;                  \/* 32 bit number specifying the fractional value of Delta Gain *\/$/;"	m	struct:__anon96	access:public
Density	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  Density;                \/* Echo density, 0 to 100 for minimum to maximum density *\/$/;"	m	struct:__anon44	access:public
DownSamplingCount	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  DownSamplingCount;                  \/* Counter used for the downsampling handling                                                   *\/$/;"	m	struct:__anon126	access:public
DownSamplingFactor	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  DownSamplingFactor;                 \/* Down sampling factor depending on the sampling frequency                                     *\/$/;"	m	struct:__anon126	access:public
EQNB_Active	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               EQNB_Active;        \/* Control flag *\/$/;"	m	struct:__anon40	access:public
EQNB_Instance	lvm/Bundle/src/LVM_Private.h	/^    LVEQNB_Instance_t       EQNB_Instance;      \/* N-Band Equaliser instance *\/$/;"	m	struct:__anon40	access:public
EQNB_NBands	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  EQNB_NBands;            \/* Number of bands *\/$/;"	m	struct:__anon32	access:public
EQNB_NumBands	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  EQNB_NumBands;          \/* Maximum number of equaliser bands *\/$/;"	m	struct:__anon33	access:public
EQNB_OperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_EQNB_Mode_en            EQNB_OperatingMode;     \/* N-Band Equaliser operating mode *\/$/;"	m	struct:__anon32	access:public
EXE_TARGET	Makefile	/^EXE_TARGET       := dtap.exe$/;"	m
EffectLevel	lvm/Bass/lib/LVDBE.h	/^    LVM_INT16               EffectLevel;$/;"	m	struct:__anon10	access:public
EffectLevel	lvm/StereoWidening/lib/LVCS.h	/^    LVM_INT16               EffectLevel;            \/* Effect level *\/$/;"	m	struct:__anon105	access:public
Equaliser	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_Equaliser_t        Equaliser;          \/* Equaliser configuration *\/$/;"	m	struct:__anon114	access:public
EqualiserBiquadInstance	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_Instance_t       EqualiserBiquadInstance;$/;"	m	struct:__anon115	access:public
EqualiserBiquadTaps	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_2I_Order2_Taps_t EqualiserBiquadTaps;$/;"	m	struct:__anon116	access:public
FALSE	lvm/Common/src/LVC_MixInSoft_D16C31_SAT.c	31;"	d	file:
FALSE	lvm/Common/src/LVC_MixSoft_1St_2i_D16C31_SAT.c	31;"	d	file:
FALSE	lvm/Common/src/LVC_MixSoft_1St_D16C31_SAT.c	31;"	d	file:
FALSE	lvm/Common/src/MixInSoft_D32C31_SAT.c	30;"	d	file:
FALSE	lvm/Common/src/MixSoft_1St_D32C31_WRA.c	30;"	d	file:
FILTERS_H	lvm/Common/src/Filters.h	19;"	d
FILTER_LOSS	lvm/Common/lib/Filter.h	35;"	d
FIRST_COEF_NEG	lvm/Common/src/dB_to_Lin32.c	62;"	d	file:
FIRST_COEF_POS	lvm/Common/src/dB_to_Lin32.c	63;"	d	file:
FOUR_OVER_SIX	lvm/Common/src/dB_to_Lin32.c	60;"	d	file:
FO_1I_D16F16C15_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void FO_1I_D16F16C15_TRC_WRA_01(            Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
FO_1I_D16F16C15_TRC_WRA_01	lvm/Common/src/FO_1I_D16F16C15_TRC_WRA_01.c	/^void FO_1I_D16F16C15_TRC_WRA_01( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
FO_1I_D16F16Css_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void FO_1I_D16F16Css_TRC_WRA_01_Init(       Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order1_Taps_t *pTaps, FO_C16_Coefs_t *pCoef)
FO_1I_D16F16Css_TRC_WRA_01_Init	lvm/Common/src/FO_1I_D16F16Css_TRC_WRA_01_Init.c	/^void FO_1I_D16F16Css_TRC_WRA_01_Init(    Biquad_Instance_t         *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order1_Taps_t *pTaps, FO_C16_Coefs_t *pCoef)
FO_1I_D32F32C31_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void FO_1I_D32F32C31_TRC_WRA_01(            Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT32 *pDataIn, LVM_INT32 *pDataOut, LVM_INT16 NrSamples)
FO_1I_D32F32C31_TRC_WRA_01	lvm/Common/src/FO_1I_D32F32C31_TRC_WRA_01.c	/^void FO_1I_D32F32C31_TRC_WRA_01( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT32 *pDataIn, LVM_INT32 *pDataOut, LVM_INT16 NrSamples)
FO_1I_D32F32Cll_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void FO_1I_D32F32Cll_TRC_WRA_01_Init(       Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order1_Taps_t *pTaps, FO_C32_Coefs_t *pCoef)
FO_1I_D32F32Cll_TRC_WRA_01_Init	lvm/Common/src/FO_1I_D32F32Cll_TRC_WRA_01_Init.c	/^void FO_1I_D32F32Cll_TRC_WRA_01_Init( Biquad_Instance_t         *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, Biquad_1I_Order1_Taps_t *pTaps, FO_C32_Coefs_t *pCoef)
FO_2I_D16F32C15_LShx_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void FO_2I_D16F32C15_LShx_TRC_WRA_01(Biquad_Instance_t       *pInstance,$/;"	p	signature:(Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
FO_2I_D16F32C15_LShx_TRC_WRA_01	lvm/Common/src/FO_2I_D16F32C15_LShx_TRC_WRA_01.c	/^void FO_2I_D16F32C15_LShx_TRC_WRA_01(Biquad_Instance_t       *pInstance,$/;"	f	signature:(Biquad_Instance_t *pInstance, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT16 NrSamples)
FO_2I_D16F32Css_LShx_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void FO_2I_D16F32Css_LShx_TRC_WRA_01_Init(Biquad_Instance_t       *pInstance,$/;"	p	signature:(Biquad_Instance_t *pInstance, Biquad_2I_Order1_Taps_t *pTaps, FO_C16_LShx_Coefs_t *pCoef)
FO_2I_D16F32Css_LShx_TRC_WRA_01_Init	lvm/Common/src/FO_2I_D16F32Css_LShx_TRC_WRA_01_Init.c	/^void FO_2I_D16F32Css_LShx_TRC_WRA_01_Init(Biquad_Instance_t         *pInstance,$/;"	f	signature:(Biquad_Instance_t *pInstance, Biquad_2I_Order1_Taps_t *pTaps, FO_C16_LShx_Coefs_t *pCoef)
FO_C16_Coefs_t	lvm/Common/lib/BIQUAD.h	/^} FO_C16_Coefs_t;$/;"	t	typeref:struct:__anon67
FO_C16_LShx_Coefs_t	lvm/Common/lib/BIQUAD.h	/^} FO_C16_LShx_Coefs_t;$/;"	t	typeref:struct:__anon69
FO_C32_Coefs_t	lvm/Common/lib/BIQUAD.h	/^} FO_C32_Coefs_t;$/;"	t	typeref:struct:__anon68
FS_48K	lvm/Common/src/CompLim_private.h	31;"	d
FeedbackMixer	lvm/Reverb/src/LVREV_Private.h	/^    Mix_1St_Cll_t           FeedbackMixer[4];           \/* Mixer for Pop and Click Supression caused by feedback Gain *\/$/;"	m	struct:__anon48	access:public
Filter_State	lvm/Common/src/BP_1I_D16F16Css_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/BP_1I_D16F32Cll_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/BP_1I_D32F32Cll_TRC_WRA_02_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/BQ_1I_D16F16Css_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/BQ_1I_D16F32Css_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/BQ_2I_D16F16Css_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/BQ_2I_D16F32Css_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/BQ_2I_D32F32Cll_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/DC_2I_D16_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/FO_1I_D16F16Css_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/FO_1I_D32F32Cll_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/FO_2I_D16F32Css_LShx_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/PK_2I_D32F32CllGss_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Filter_State	lvm/Common/src/PK_2I_D32F32CssGss_TRC_WRA_01_Private.h	/^}Filter_State;$/;"	t	typeref:struct:_Filter_State_
Frequency	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  Frequency;              \/* Band centre frequency in Hz *\/$/;"	m	struct:__anon30	access:public
Frequency	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  Frequency;              \/* Band centre frequency in Hz *\/$/;"	m	struct:__anon57	access:public
From2iToMS_16x16	lvm/Common/lib/VectorArithmetic.h	/^void From2iToMS_16x16(        const LVM_INT16 *src,$/;"	p	signature:( const LVM_INT16 *src, LVM_INT16 *dstM, LVM_INT16 *dstS, LVM_INT16 n )
From2iToMS_16x16	lvm/Common/src/From2iToMS_16x16.c	/^void From2iToMS_16x16( const LVM_INT16  *src,$/;"	f	signature:( const LVM_INT16 *src, LVM_INT16 *dstM, LVM_INT16 *dstS, LVM_INT16 n )
From2iToMono_16	lvm/Common/lib/VectorArithmetic.h	/^void From2iToMono_16(         const LVM_INT16 *src,$/;"	p	signature:( const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
From2iToMono_16	lvm/Common/src/From2iToMono_16.c	/^void From2iToMono_16( const LVM_INT16 *src,$/;"	f	signature:( const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
From2iToMono_32	lvm/Common/lib/VectorArithmetic.h	/^void From2iToMono_32(         const LVM_INT32  *src,$/;"	p	signature:( const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
From2iToMono_32	lvm/Common/src/From2iToMono_32.c	/^void From2iToMono_32( const LVM_INT32 *src,$/;"	f	signature:( const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
Fs	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_Fs_en                  Fs;                          \/* Input sampling rate                                               *\/$/;"	m	struct:__anon121	access:public
G	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16  G;   \/* Gain *\/$/;"	m	struct:__anon72	access:public
G	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16  G;   \/* Gain *\/$/;"	m	struct:__anon73	access:public
GAIN_12DB	lvm/Common/src/CompLim_private.h	37;"	d
GAIN_18DB	lvm/Common/src/CompLim_private.h	38;"	d
GAIN_24DB	lvm/Common/src/CompLim_private.h	39;"	d
GAIN_6DB	lvm/Common/src/CompLim_private.h	36;"	d
Gain	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   Gain;                   \/* Band gain in dB *\/$/;"	m	struct:__anon30	access:public
Gain	lvm/Eq/lib/LVEQNB.h	/^    LVM_INT16                   Gain;                   \/* Band gain in dB *\/$/;"	m	struct:__anon57	access:public
Gain	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT16               Gain;                       \/* Gain applied to output to maintain average signal power *\/$/;"	m	struct:__anon48	access:public
GainFull	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16   GainFull;                       \/* CS gain correct 100% effect *\/$/;"	m	struct:__anon113	access:public
GainMin	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16   GainMin;                        \/* CS gain correct 0% effect *\/$/;"	m	struct:__anon113	access:public
GainMixer	lvm/Reverb/src/LVREV_Private.h	/^    Mix_1St_Cll_t           GainMixer;                  \/* Gain smoothing *\/$/;"	m	struct:__anon48	access:public
Gain_t	lvm/StereoWidening/src/LVCS_BypassMix.h	/^} Gain_t;$/;"	t	typeref:struct:__anon111
HEADPHONEGAINPROC	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	41;"	d
HEADPHONEGAINUNPROC	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	42;"	d
HIGH_FREQ	lvm/Eq/src/LVEQNB_Control.c	37;"	d	file:
HIGH_FREQ	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	23;"	d	file:
HPCoefs	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_Instance_t       HPCoefs;                    \/* High pass filter coefficients *\/$/;"	m	struct:__anon47	access:public
HPF	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  HPF;                    \/* High pass filter, in Hz *\/$/;"	m	struct:__anon44	access:public
HPFInstance	lvm/Bass/src/LVDBE_Private.h	/^    Biquad_Instance_t           HPFInstance;        \/* High pass filter instance *\/$/;"	m	struct:__anon13	access:public
HPFSelect	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FilterSelect_en   HPFSelect;$/;"	m	struct:__anon10	access:public
HPFTaps	lvm/Bass/src/LVDBE_Private.h	/^    Biquad_2I_Order2_Taps_t     HPFTaps;            \/* High pass filter taps *\/$/;"	m	struct:__anon12	access:public
HPF_Fs11025_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	43;"	d
HPF_Fs11025_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	44;"	d
HPF_Fs11025_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	45;"	d
HPF_Fs11025_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	46;"	d
HPF_Fs11025_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	47;"	d
HPF_Fs11025_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	90;"	d
HPF_Fs11025_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	91;"	d
HPF_Fs11025_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	92;"	d
HPF_Fs11025_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	93;"	d
HPF_Fs11025_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	94;"	d
HPF_Fs11025_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	137;"	d
HPF_Fs11025_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	138;"	d
HPF_Fs11025_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	139;"	d
HPF_Fs11025_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	140;"	d
HPF_Fs11025_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	141;"	d
HPF_Fs11025_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	184;"	d
HPF_Fs11025_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	185;"	d
HPF_Fs11025_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	186;"	d
HPF_Fs11025_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	187;"	d
HPF_Fs11025_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	188;"	d
HPF_Fs12000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	48;"	d
HPF_Fs12000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	49;"	d
HPF_Fs12000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	50;"	d
HPF_Fs12000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	51;"	d
HPF_Fs12000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	52;"	d
HPF_Fs12000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	95;"	d
HPF_Fs12000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	96;"	d
HPF_Fs12000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	97;"	d
HPF_Fs12000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	98;"	d
HPF_Fs12000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	99;"	d
HPF_Fs12000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	142;"	d
HPF_Fs12000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	143;"	d
HPF_Fs12000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	144;"	d
HPF_Fs12000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	145;"	d
HPF_Fs12000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	146;"	d
HPF_Fs12000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	189;"	d
HPF_Fs12000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	190;"	d
HPF_Fs12000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	191;"	d
HPF_Fs12000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	192;"	d
HPF_Fs12000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	193;"	d
HPF_Fs16000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	53;"	d
HPF_Fs16000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	54;"	d
HPF_Fs16000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	55;"	d
HPF_Fs16000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	56;"	d
HPF_Fs16000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	57;"	d
HPF_Fs16000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	100;"	d
HPF_Fs16000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	101;"	d
HPF_Fs16000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	102;"	d
HPF_Fs16000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	103;"	d
HPF_Fs16000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	104;"	d
HPF_Fs16000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	147;"	d
HPF_Fs16000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	148;"	d
HPF_Fs16000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	149;"	d
HPF_Fs16000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	150;"	d
HPF_Fs16000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	151;"	d
HPF_Fs16000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	194;"	d
HPF_Fs16000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	195;"	d
HPF_Fs16000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	196;"	d
HPF_Fs16000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	197;"	d
HPF_Fs16000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	198;"	d
HPF_Fs22050_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	58;"	d
HPF_Fs22050_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	59;"	d
HPF_Fs22050_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	60;"	d
HPF_Fs22050_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	61;"	d
HPF_Fs22050_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	62;"	d
HPF_Fs22050_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	105;"	d
HPF_Fs22050_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	106;"	d
HPF_Fs22050_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	107;"	d
HPF_Fs22050_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	108;"	d
HPF_Fs22050_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	109;"	d
HPF_Fs22050_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	152;"	d
HPF_Fs22050_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	153;"	d
HPF_Fs22050_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	154;"	d
HPF_Fs22050_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	155;"	d
HPF_Fs22050_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	156;"	d
HPF_Fs22050_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	199;"	d
HPF_Fs22050_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	200;"	d
HPF_Fs22050_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	201;"	d
HPF_Fs22050_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	202;"	d
HPF_Fs22050_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	203;"	d
HPF_Fs22050_Gain10_A0	lvm/Bundle/src/LVM_Coeffs.h	98;"	d
HPF_Fs22050_Gain10_A1	lvm/Bundle/src/LVM_Coeffs.h	99;"	d
HPF_Fs22050_Gain10_A2	lvm/Bundle/src/LVM_Coeffs.h	100;"	d
HPF_Fs22050_Gain10_B1	lvm/Bundle/src/LVM_Coeffs.h	101;"	d
HPF_Fs22050_Gain10_B2	lvm/Bundle/src/LVM_Coeffs.h	102;"	d
HPF_Fs22050_Gain10_Shift	lvm/Bundle/src/LVM_Coeffs.h	103;"	d
HPF_Fs22050_Gain11_A0	lvm/Bundle/src/LVM_Coeffs.h	105;"	d
HPF_Fs22050_Gain11_A1	lvm/Bundle/src/LVM_Coeffs.h	106;"	d
HPF_Fs22050_Gain11_A2	lvm/Bundle/src/LVM_Coeffs.h	107;"	d
HPF_Fs22050_Gain11_B1	lvm/Bundle/src/LVM_Coeffs.h	108;"	d
HPF_Fs22050_Gain11_B2	lvm/Bundle/src/LVM_Coeffs.h	109;"	d
HPF_Fs22050_Gain11_Shift	lvm/Bundle/src/LVM_Coeffs.h	110;"	d
HPF_Fs22050_Gain12_A0	lvm/Bundle/src/LVM_Coeffs.h	112;"	d
HPF_Fs22050_Gain12_A1	lvm/Bundle/src/LVM_Coeffs.h	113;"	d
HPF_Fs22050_Gain12_A2	lvm/Bundle/src/LVM_Coeffs.h	114;"	d
HPF_Fs22050_Gain12_B1	lvm/Bundle/src/LVM_Coeffs.h	115;"	d
HPF_Fs22050_Gain12_B2	lvm/Bundle/src/LVM_Coeffs.h	116;"	d
HPF_Fs22050_Gain12_Shift	lvm/Bundle/src/LVM_Coeffs.h	117;"	d
HPF_Fs22050_Gain13_A0	lvm/Bundle/src/LVM_Coeffs.h	119;"	d
HPF_Fs22050_Gain13_A1	lvm/Bundle/src/LVM_Coeffs.h	120;"	d
HPF_Fs22050_Gain13_A2	lvm/Bundle/src/LVM_Coeffs.h	121;"	d
HPF_Fs22050_Gain13_B1	lvm/Bundle/src/LVM_Coeffs.h	122;"	d
HPF_Fs22050_Gain13_B2	lvm/Bundle/src/LVM_Coeffs.h	123;"	d
HPF_Fs22050_Gain13_Shift	lvm/Bundle/src/LVM_Coeffs.h	124;"	d
HPF_Fs22050_Gain14_A0	lvm/Bundle/src/LVM_Coeffs.h	126;"	d
HPF_Fs22050_Gain14_A1	lvm/Bundle/src/LVM_Coeffs.h	127;"	d
HPF_Fs22050_Gain14_A2	lvm/Bundle/src/LVM_Coeffs.h	128;"	d
HPF_Fs22050_Gain14_B1	lvm/Bundle/src/LVM_Coeffs.h	129;"	d
HPF_Fs22050_Gain14_B2	lvm/Bundle/src/LVM_Coeffs.h	130;"	d
HPF_Fs22050_Gain14_Shift	lvm/Bundle/src/LVM_Coeffs.h	131;"	d
HPF_Fs22050_Gain15_A0	lvm/Bundle/src/LVM_Coeffs.h	133;"	d
HPF_Fs22050_Gain15_A1	lvm/Bundle/src/LVM_Coeffs.h	134;"	d
HPF_Fs22050_Gain15_A2	lvm/Bundle/src/LVM_Coeffs.h	135;"	d
HPF_Fs22050_Gain15_B1	lvm/Bundle/src/LVM_Coeffs.h	136;"	d
HPF_Fs22050_Gain15_B2	lvm/Bundle/src/LVM_Coeffs.h	137;"	d
HPF_Fs22050_Gain15_Shift	lvm/Bundle/src/LVM_Coeffs.h	138;"	d
HPF_Fs22050_Gain1_A0	lvm/Bundle/src/LVM_Coeffs.h	35;"	d
HPF_Fs22050_Gain1_A1	lvm/Bundle/src/LVM_Coeffs.h	36;"	d
HPF_Fs22050_Gain1_A2	lvm/Bundle/src/LVM_Coeffs.h	37;"	d
HPF_Fs22050_Gain1_B1	lvm/Bundle/src/LVM_Coeffs.h	38;"	d
HPF_Fs22050_Gain1_B2	lvm/Bundle/src/LVM_Coeffs.h	39;"	d
HPF_Fs22050_Gain1_Shift	lvm/Bundle/src/LVM_Coeffs.h	40;"	d
HPF_Fs22050_Gain2_A0	lvm/Bundle/src/LVM_Coeffs.h	42;"	d
HPF_Fs22050_Gain2_A1	lvm/Bundle/src/LVM_Coeffs.h	43;"	d
HPF_Fs22050_Gain2_A2	lvm/Bundle/src/LVM_Coeffs.h	44;"	d
HPF_Fs22050_Gain2_B1	lvm/Bundle/src/LVM_Coeffs.h	45;"	d
HPF_Fs22050_Gain2_B2	lvm/Bundle/src/LVM_Coeffs.h	46;"	d
HPF_Fs22050_Gain2_Shift	lvm/Bundle/src/LVM_Coeffs.h	47;"	d
HPF_Fs22050_Gain3_A0	lvm/Bundle/src/LVM_Coeffs.h	49;"	d
HPF_Fs22050_Gain3_A1	lvm/Bundle/src/LVM_Coeffs.h	50;"	d
HPF_Fs22050_Gain3_A2	lvm/Bundle/src/LVM_Coeffs.h	51;"	d
HPF_Fs22050_Gain3_B1	lvm/Bundle/src/LVM_Coeffs.h	52;"	d
HPF_Fs22050_Gain3_B2	lvm/Bundle/src/LVM_Coeffs.h	53;"	d
HPF_Fs22050_Gain3_Shift	lvm/Bundle/src/LVM_Coeffs.h	54;"	d
HPF_Fs22050_Gain4_A0	lvm/Bundle/src/LVM_Coeffs.h	56;"	d
HPF_Fs22050_Gain4_A1	lvm/Bundle/src/LVM_Coeffs.h	57;"	d
HPF_Fs22050_Gain4_A2	lvm/Bundle/src/LVM_Coeffs.h	58;"	d
HPF_Fs22050_Gain4_B1	lvm/Bundle/src/LVM_Coeffs.h	59;"	d
HPF_Fs22050_Gain4_B2	lvm/Bundle/src/LVM_Coeffs.h	60;"	d
HPF_Fs22050_Gain4_Shift	lvm/Bundle/src/LVM_Coeffs.h	61;"	d
HPF_Fs22050_Gain5_A0	lvm/Bundle/src/LVM_Coeffs.h	63;"	d
HPF_Fs22050_Gain5_A1	lvm/Bundle/src/LVM_Coeffs.h	64;"	d
HPF_Fs22050_Gain5_A2	lvm/Bundle/src/LVM_Coeffs.h	65;"	d
HPF_Fs22050_Gain5_B1	lvm/Bundle/src/LVM_Coeffs.h	66;"	d
HPF_Fs22050_Gain5_B2	lvm/Bundle/src/LVM_Coeffs.h	67;"	d
HPF_Fs22050_Gain5_Shift	lvm/Bundle/src/LVM_Coeffs.h	68;"	d
HPF_Fs22050_Gain6_A0	lvm/Bundle/src/LVM_Coeffs.h	70;"	d
HPF_Fs22050_Gain6_A1	lvm/Bundle/src/LVM_Coeffs.h	71;"	d
HPF_Fs22050_Gain6_A2	lvm/Bundle/src/LVM_Coeffs.h	72;"	d
HPF_Fs22050_Gain6_B1	lvm/Bundle/src/LVM_Coeffs.h	73;"	d
HPF_Fs22050_Gain6_B2	lvm/Bundle/src/LVM_Coeffs.h	74;"	d
HPF_Fs22050_Gain6_Shift	lvm/Bundle/src/LVM_Coeffs.h	75;"	d
HPF_Fs22050_Gain7_A0	lvm/Bundle/src/LVM_Coeffs.h	77;"	d
HPF_Fs22050_Gain7_A1	lvm/Bundle/src/LVM_Coeffs.h	78;"	d
HPF_Fs22050_Gain7_A2	lvm/Bundle/src/LVM_Coeffs.h	79;"	d
HPF_Fs22050_Gain7_B1	lvm/Bundle/src/LVM_Coeffs.h	80;"	d
HPF_Fs22050_Gain7_B2	lvm/Bundle/src/LVM_Coeffs.h	81;"	d
HPF_Fs22050_Gain7_Shift	lvm/Bundle/src/LVM_Coeffs.h	82;"	d
HPF_Fs22050_Gain8_A0	lvm/Bundle/src/LVM_Coeffs.h	84;"	d
HPF_Fs22050_Gain8_A1	lvm/Bundle/src/LVM_Coeffs.h	85;"	d
HPF_Fs22050_Gain8_A2	lvm/Bundle/src/LVM_Coeffs.h	86;"	d
HPF_Fs22050_Gain8_B1	lvm/Bundle/src/LVM_Coeffs.h	87;"	d
HPF_Fs22050_Gain8_B2	lvm/Bundle/src/LVM_Coeffs.h	88;"	d
HPF_Fs22050_Gain8_Shift	lvm/Bundle/src/LVM_Coeffs.h	89;"	d
HPF_Fs22050_Gain9_A0	lvm/Bundle/src/LVM_Coeffs.h	91;"	d
HPF_Fs22050_Gain9_A1	lvm/Bundle/src/LVM_Coeffs.h	92;"	d
HPF_Fs22050_Gain9_A2	lvm/Bundle/src/LVM_Coeffs.h	93;"	d
HPF_Fs22050_Gain9_B1	lvm/Bundle/src/LVM_Coeffs.h	94;"	d
HPF_Fs22050_Gain9_B2	lvm/Bundle/src/LVM_Coeffs.h	95;"	d
HPF_Fs22050_Gain9_Shift	lvm/Bundle/src/LVM_Coeffs.h	96;"	d
HPF_Fs24000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	63;"	d
HPF_Fs24000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	64;"	d
HPF_Fs24000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	65;"	d
HPF_Fs24000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	66;"	d
HPF_Fs24000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	67;"	d
HPF_Fs24000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	110;"	d
HPF_Fs24000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	111;"	d
HPF_Fs24000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	112;"	d
HPF_Fs24000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	113;"	d
HPF_Fs24000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	114;"	d
HPF_Fs24000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	157;"	d
HPF_Fs24000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	158;"	d
HPF_Fs24000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	159;"	d
HPF_Fs24000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	160;"	d
HPF_Fs24000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	161;"	d
HPF_Fs24000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	204;"	d
HPF_Fs24000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	205;"	d
HPF_Fs24000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	206;"	d
HPF_Fs24000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	207;"	d
HPF_Fs24000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	208;"	d
HPF_Fs24000_Gain10_A0	lvm/Bundle/src/LVM_Coeffs.h	206;"	d
HPF_Fs24000_Gain10_A1	lvm/Bundle/src/LVM_Coeffs.h	207;"	d
HPF_Fs24000_Gain10_A2	lvm/Bundle/src/LVM_Coeffs.h	208;"	d
HPF_Fs24000_Gain10_B1	lvm/Bundle/src/LVM_Coeffs.h	209;"	d
HPF_Fs24000_Gain10_B2	lvm/Bundle/src/LVM_Coeffs.h	210;"	d
HPF_Fs24000_Gain10_Shift	lvm/Bundle/src/LVM_Coeffs.h	211;"	d
HPF_Fs24000_Gain11_A0	lvm/Bundle/src/LVM_Coeffs.h	213;"	d
HPF_Fs24000_Gain11_A1	lvm/Bundle/src/LVM_Coeffs.h	214;"	d
HPF_Fs24000_Gain11_A2	lvm/Bundle/src/LVM_Coeffs.h	215;"	d
HPF_Fs24000_Gain11_B1	lvm/Bundle/src/LVM_Coeffs.h	216;"	d
HPF_Fs24000_Gain11_B2	lvm/Bundle/src/LVM_Coeffs.h	217;"	d
HPF_Fs24000_Gain11_Shift	lvm/Bundle/src/LVM_Coeffs.h	218;"	d
HPF_Fs24000_Gain12_A0	lvm/Bundle/src/LVM_Coeffs.h	220;"	d
HPF_Fs24000_Gain12_A1	lvm/Bundle/src/LVM_Coeffs.h	221;"	d
HPF_Fs24000_Gain12_A2	lvm/Bundle/src/LVM_Coeffs.h	222;"	d
HPF_Fs24000_Gain12_B1	lvm/Bundle/src/LVM_Coeffs.h	223;"	d
HPF_Fs24000_Gain12_B2	lvm/Bundle/src/LVM_Coeffs.h	224;"	d
HPF_Fs24000_Gain12_Shift	lvm/Bundle/src/LVM_Coeffs.h	225;"	d
HPF_Fs24000_Gain13_A0	lvm/Bundle/src/LVM_Coeffs.h	227;"	d
HPF_Fs24000_Gain13_A1	lvm/Bundle/src/LVM_Coeffs.h	228;"	d
HPF_Fs24000_Gain13_A2	lvm/Bundle/src/LVM_Coeffs.h	229;"	d
HPF_Fs24000_Gain13_B1	lvm/Bundle/src/LVM_Coeffs.h	230;"	d
HPF_Fs24000_Gain13_B2	lvm/Bundle/src/LVM_Coeffs.h	231;"	d
HPF_Fs24000_Gain13_Shift	lvm/Bundle/src/LVM_Coeffs.h	232;"	d
HPF_Fs24000_Gain14_A0	lvm/Bundle/src/LVM_Coeffs.h	234;"	d
HPF_Fs24000_Gain14_A1	lvm/Bundle/src/LVM_Coeffs.h	235;"	d
HPF_Fs24000_Gain14_A2	lvm/Bundle/src/LVM_Coeffs.h	236;"	d
HPF_Fs24000_Gain14_B1	lvm/Bundle/src/LVM_Coeffs.h	237;"	d
HPF_Fs24000_Gain14_B2	lvm/Bundle/src/LVM_Coeffs.h	238;"	d
HPF_Fs24000_Gain14_Shift	lvm/Bundle/src/LVM_Coeffs.h	239;"	d
HPF_Fs24000_Gain15_A0	lvm/Bundle/src/LVM_Coeffs.h	241;"	d
HPF_Fs24000_Gain15_A1	lvm/Bundle/src/LVM_Coeffs.h	242;"	d
HPF_Fs24000_Gain15_A2	lvm/Bundle/src/LVM_Coeffs.h	243;"	d
HPF_Fs24000_Gain15_B1	lvm/Bundle/src/LVM_Coeffs.h	244;"	d
HPF_Fs24000_Gain15_B2	lvm/Bundle/src/LVM_Coeffs.h	245;"	d
HPF_Fs24000_Gain15_Shift	lvm/Bundle/src/LVM_Coeffs.h	246;"	d
HPF_Fs24000_Gain1_A0	lvm/Bundle/src/LVM_Coeffs.h	143;"	d
HPF_Fs24000_Gain1_A1	lvm/Bundle/src/LVM_Coeffs.h	144;"	d
HPF_Fs24000_Gain1_A2	lvm/Bundle/src/LVM_Coeffs.h	145;"	d
HPF_Fs24000_Gain1_B1	lvm/Bundle/src/LVM_Coeffs.h	146;"	d
HPF_Fs24000_Gain1_B2	lvm/Bundle/src/LVM_Coeffs.h	147;"	d
HPF_Fs24000_Gain1_Shift	lvm/Bundle/src/LVM_Coeffs.h	148;"	d
HPF_Fs24000_Gain2_A0	lvm/Bundle/src/LVM_Coeffs.h	150;"	d
HPF_Fs24000_Gain2_A1	lvm/Bundle/src/LVM_Coeffs.h	151;"	d
HPF_Fs24000_Gain2_A2	lvm/Bundle/src/LVM_Coeffs.h	152;"	d
HPF_Fs24000_Gain2_B1	lvm/Bundle/src/LVM_Coeffs.h	153;"	d
HPF_Fs24000_Gain2_B2	lvm/Bundle/src/LVM_Coeffs.h	154;"	d
HPF_Fs24000_Gain2_Shift	lvm/Bundle/src/LVM_Coeffs.h	155;"	d
HPF_Fs24000_Gain3_A0	lvm/Bundle/src/LVM_Coeffs.h	157;"	d
HPF_Fs24000_Gain3_A1	lvm/Bundle/src/LVM_Coeffs.h	158;"	d
HPF_Fs24000_Gain3_A2	lvm/Bundle/src/LVM_Coeffs.h	159;"	d
HPF_Fs24000_Gain3_B1	lvm/Bundle/src/LVM_Coeffs.h	160;"	d
HPF_Fs24000_Gain3_B2	lvm/Bundle/src/LVM_Coeffs.h	161;"	d
HPF_Fs24000_Gain3_Shift	lvm/Bundle/src/LVM_Coeffs.h	162;"	d
HPF_Fs24000_Gain4_A0	lvm/Bundle/src/LVM_Coeffs.h	164;"	d
HPF_Fs24000_Gain4_A1	lvm/Bundle/src/LVM_Coeffs.h	165;"	d
HPF_Fs24000_Gain4_A2	lvm/Bundle/src/LVM_Coeffs.h	166;"	d
HPF_Fs24000_Gain4_B1	lvm/Bundle/src/LVM_Coeffs.h	167;"	d
HPF_Fs24000_Gain4_B2	lvm/Bundle/src/LVM_Coeffs.h	168;"	d
HPF_Fs24000_Gain4_Shift	lvm/Bundle/src/LVM_Coeffs.h	169;"	d
HPF_Fs24000_Gain5_A0	lvm/Bundle/src/LVM_Coeffs.h	171;"	d
HPF_Fs24000_Gain5_A1	lvm/Bundle/src/LVM_Coeffs.h	172;"	d
HPF_Fs24000_Gain5_A2	lvm/Bundle/src/LVM_Coeffs.h	173;"	d
HPF_Fs24000_Gain5_B1	lvm/Bundle/src/LVM_Coeffs.h	174;"	d
HPF_Fs24000_Gain5_B2	lvm/Bundle/src/LVM_Coeffs.h	175;"	d
HPF_Fs24000_Gain5_Shift	lvm/Bundle/src/LVM_Coeffs.h	176;"	d
HPF_Fs24000_Gain6_A0	lvm/Bundle/src/LVM_Coeffs.h	178;"	d
HPF_Fs24000_Gain6_A1	lvm/Bundle/src/LVM_Coeffs.h	179;"	d
HPF_Fs24000_Gain6_A2	lvm/Bundle/src/LVM_Coeffs.h	180;"	d
HPF_Fs24000_Gain6_B1	lvm/Bundle/src/LVM_Coeffs.h	181;"	d
HPF_Fs24000_Gain6_B2	lvm/Bundle/src/LVM_Coeffs.h	182;"	d
HPF_Fs24000_Gain6_Shift	lvm/Bundle/src/LVM_Coeffs.h	183;"	d
HPF_Fs24000_Gain7_A0	lvm/Bundle/src/LVM_Coeffs.h	185;"	d
HPF_Fs24000_Gain7_A1	lvm/Bundle/src/LVM_Coeffs.h	186;"	d
HPF_Fs24000_Gain7_A2	lvm/Bundle/src/LVM_Coeffs.h	187;"	d
HPF_Fs24000_Gain7_B1	lvm/Bundle/src/LVM_Coeffs.h	188;"	d
HPF_Fs24000_Gain7_B2	lvm/Bundle/src/LVM_Coeffs.h	189;"	d
HPF_Fs24000_Gain7_Shift	lvm/Bundle/src/LVM_Coeffs.h	190;"	d
HPF_Fs24000_Gain8_A0	lvm/Bundle/src/LVM_Coeffs.h	192;"	d
HPF_Fs24000_Gain8_A1	lvm/Bundle/src/LVM_Coeffs.h	193;"	d
HPF_Fs24000_Gain8_A2	lvm/Bundle/src/LVM_Coeffs.h	194;"	d
HPF_Fs24000_Gain8_B1	lvm/Bundle/src/LVM_Coeffs.h	195;"	d
HPF_Fs24000_Gain8_B2	lvm/Bundle/src/LVM_Coeffs.h	196;"	d
HPF_Fs24000_Gain8_Shift	lvm/Bundle/src/LVM_Coeffs.h	197;"	d
HPF_Fs24000_Gain9_A0	lvm/Bundle/src/LVM_Coeffs.h	199;"	d
HPF_Fs24000_Gain9_A1	lvm/Bundle/src/LVM_Coeffs.h	200;"	d
HPF_Fs24000_Gain9_A2	lvm/Bundle/src/LVM_Coeffs.h	201;"	d
HPF_Fs24000_Gain9_B1	lvm/Bundle/src/LVM_Coeffs.h	202;"	d
HPF_Fs24000_Gain9_B2	lvm/Bundle/src/LVM_Coeffs.h	203;"	d
HPF_Fs24000_Gain9_Shift	lvm/Bundle/src/LVM_Coeffs.h	204;"	d
HPF_Fs32000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	68;"	d
HPF_Fs32000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	69;"	d
HPF_Fs32000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	70;"	d
HPF_Fs32000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	71;"	d
HPF_Fs32000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	72;"	d
HPF_Fs32000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	115;"	d
HPF_Fs32000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	116;"	d
HPF_Fs32000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	117;"	d
HPF_Fs32000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	118;"	d
HPF_Fs32000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	119;"	d
HPF_Fs32000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	162;"	d
HPF_Fs32000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	163;"	d
HPF_Fs32000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	164;"	d
HPF_Fs32000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	165;"	d
HPF_Fs32000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	166;"	d
HPF_Fs32000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	209;"	d
HPF_Fs32000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	210;"	d
HPF_Fs32000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	211;"	d
HPF_Fs32000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	212;"	d
HPF_Fs32000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	213;"	d
HPF_Fs32000_Gain10_A0	lvm/Bundle/src/LVM_Coeffs.h	314;"	d
HPF_Fs32000_Gain10_A1	lvm/Bundle/src/LVM_Coeffs.h	315;"	d
HPF_Fs32000_Gain10_A2	lvm/Bundle/src/LVM_Coeffs.h	316;"	d
HPF_Fs32000_Gain10_B1	lvm/Bundle/src/LVM_Coeffs.h	317;"	d
HPF_Fs32000_Gain10_B2	lvm/Bundle/src/LVM_Coeffs.h	318;"	d
HPF_Fs32000_Gain10_Shift	lvm/Bundle/src/LVM_Coeffs.h	319;"	d
HPF_Fs32000_Gain11_A0	lvm/Bundle/src/LVM_Coeffs.h	321;"	d
HPF_Fs32000_Gain11_A1	lvm/Bundle/src/LVM_Coeffs.h	322;"	d
HPF_Fs32000_Gain11_A2	lvm/Bundle/src/LVM_Coeffs.h	323;"	d
HPF_Fs32000_Gain11_B1	lvm/Bundle/src/LVM_Coeffs.h	324;"	d
HPF_Fs32000_Gain11_B2	lvm/Bundle/src/LVM_Coeffs.h	325;"	d
HPF_Fs32000_Gain11_Shift	lvm/Bundle/src/LVM_Coeffs.h	326;"	d
HPF_Fs32000_Gain12_A0	lvm/Bundle/src/LVM_Coeffs.h	328;"	d
HPF_Fs32000_Gain12_A1	lvm/Bundle/src/LVM_Coeffs.h	329;"	d
HPF_Fs32000_Gain12_A2	lvm/Bundle/src/LVM_Coeffs.h	330;"	d
HPF_Fs32000_Gain12_B1	lvm/Bundle/src/LVM_Coeffs.h	331;"	d
HPF_Fs32000_Gain12_B2	lvm/Bundle/src/LVM_Coeffs.h	332;"	d
HPF_Fs32000_Gain12_Shift	lvm/Bundle/src/LVM_Coeffs.h	333;"	d
HPF_Fs32000_Gain13_A0	lvm/Bundle/src/LVM_Coeffs.h	335;"	d
HPF_Fs32000_Gain13_A1	lvm/Bundle/src/LVM_Coeffs.h	336;"	d
HPF_Fs32000_Gain13_A2	lvm/Bundle/src/LVM_Coeffs.h	337;"	d
HPF_Fs32000_Gain13_B1	lvm/Bundle/src/LVM_Coeffs.h	338;"	d
HPF_Fs32000_Gain13_B2	lvm/Bundle/src/LVM_Coeffs.h	339;"	d
HPF_Fs32000_Gain13_Shift	lvm/Bundle/src/LVM_Coeffs.h	340;"	d
HPF_Fs32000_Gain14_A0	lvm/Bundle/src/LVM_Coeffs.h	342;"	d
HPF_Fs32000_Gain14_A1	lvm/Bundle/src/LVM_Coeffs.h	343;"	d
HPF_Fs32000_Gain14_A2	lvm/Bundle/src/LVM_Coeffs.h	344;"	d
HPF_Fs32000_Gain14_B1	lvm/Bundle/src/LVM_Coeffs.h	345;"	d
HPF_Fs32000_Gain14_B2	lvm/Bundle/src/LVM_Coeffs.h	346;"	d
HPF_Fs32000_Gain14_Shift	lvm/Bundle/src/LVM_Coeffs.h	347;"	d
HPF_Fs32000_Gain15_A0	lvm/Bundle/src/LVM_Coeffs.h	349;"	d
HPF_Fs32000_Gain15_A1	lvm/Bundle/src/LVM_Coeffs.h	350;"	d
HPF_Fs32000_Gain15_A2	lvm/Bundle/src/LVM_Coeffs.h	351;"	d
HPF_Fs32000_Gain15_B1	lvm/Bundle/src/LVM_Coeffs.h	352;"	d
HPF_Fs32000_Gain15_B2	lvm/Bundle/src/LVM_Coeffs.h	353;"	d
HPF_Fs32000_Gain15_Shift	lvm/Bundle/src/LVM_Coeffs.h	354;"	d
HPF_Fs32000_Gain1_A0	lvm/Bundle/src/LVM_Coeffs.h	251;"	d
HPF_Fs32000_Gain1_A1	lvm/Bundle/src/LVM_Coeffs.h	252;"	d
HPF_Fs32000_Gain1_A2	lvm/Bundle/src/LVM_Coeffs.h	253;"	d
HPF_Fs32000_Gain1_B1	lvm/Bundle/src/LVM_Coeffs.h	254;"	d
HPF_Fs32000_Gain1_B2	lvm/Bundle/src/LVM_Coeffs.h	255;"	d
HPF_Fs32000_Gain1_Shift	lvm/Bundle/src/LVM_Coeffs.h	256;"	d
HPF_Fs32000_Gain2_A0	lvm/Bundle/src/LVM_Coeffs.h	258;"	d
HPF_Fs32000_Gain2_A1	lvm/Bundle/src/LVM_Coeffs.h	259;"	d
HPF_Fs32000_Gain2_A2	lvm/Bundle/src/LVM_Coeffs.h	260;"	d
HPF_Fs32000_Gain2_B1	lvm/Bundle/src/LVM_Coeffs.h	261;"	d
HPF_Fs32000_Gain2_B2	lvm/Bundle/src/LVM_Coeffs.h	262;"	d
HPF_Fs32000_Gain2_Shift	lvm/Bundle/src/LVM_Coeffs.h	263;"	d
HPF_Fs32000_Gain3_A0	lvm/Bundle/src/LVM_Coeffs.h	265;"	d
HPF_Fs32000_Gain3_A1	lvm/Bundle/src/LVM_Coeffs.h	266;"	d
HPF_Fs32000_Gain3_A2	lvm/Bundle/src/LVM_Coeffs.h	267;"	d
HPF_Fs32000_Gain3_B1	lvm/Bundle/src/LVM_Coeffs.h	268;"	d
HPF_Fs32000_Gain3_B2	lvm/Bundle/src/LVM_Coeffs.h	269;"	d
HPF_Fs32000_Gain3_Shift	lvm/Bundle/src/LVM_Coeffs.h	270;"	d
HPF_Fs32000_Gain4_A0	lvm/Bundle/src/LVM_Coeffs.h	272;"	d
HPF_Fs32000_Gain4_A1	lvm/Bundle/src/LVM_Coeffs.h	273;"	d
HPF_Fs32000_Gain4_A2	lvm/Bundle/src/LVM_Coeffs.h	274;"	d
HPF_Fs32000_Gain4_B1	lvm/Bundle/src/LVM_Coeffs.h	275;"	d
HPF_Fs32000_Gain4_B2	lvm/Bundle/src/LVM_Coeffs.h	276;"	d
HPF_Fs32000_Gain4_Shift	lvm/Bundle/src/LVM_Coeffs.h	277;"	d
HPF_Fs32000_Gain5_A0	lvm/Bundle/src/LVM_Coeffs.h	279;"	d
HPF_Fs32000_Gain5_A1	lvm/Bundle/src/LVM_Coeffs.h	280;"	d
HPF_Fs32000_Gain5_A2	lvm/Bundle/src/LVM_Coeffs.h	281;"	d
HPF_Fs32000_Gain5_B1	lvm/Bundle/src/LVM_Coeffs.h	282;"	d
HPF_Fs32000_Gain5_B2	lvm/Bundle/src/LVM_Coeffs.h	283;"	d
HPF_Fs32000_Gain5_Shift	lvm/Bundle/src/LVM_Coeffs.h	284;"	d
HPF_Fs32000_Gain6_A0	lvm/Bundle/src/LVM_Coeffs.h	286;"	d
HPF_Fs32000_Gain6_A1	lvm/Bundle/src/LVM_Coeffs.h	287;"	d
HPF_Fs32000_Gain6_A2	lvm/Bundle/src/LVM_Coeffs.h	288;"	d
HPF_Fs32000_Gain6_B1	lvm/Bundle/src/LVM_Coeffs.h	289;"	d
HPF_Fs32000_Gain6_B2	lvm/Bundle/src/LVM_Coeffs.h	290;"	d
HPF_Fs32000_Gain6_Shift	lvm/Bundle/src/LVM_Coeffs.h	291;"	d
HPF_Fs32000_Gain7_A0	lvm/Bundle/src/LVM_Coeffs.h	293;"	d
HPF_Fs32000_Gain7_A1	lvm/Bundle/src/LVM_Coeffs.h	294;"	d
HPF_Fs32000_Gain7_A2	lvm/Bundle/src/LVM_Coeffs.h	295;"	d
HPF_Fs32000_Gain7_B1	lvm/Bundle/src/LVM_Coeffs.h	296;"	d
HPF_Fs32000_Gain7_B2	lvm/Bundle/src/LVM_Coeffs.h	297;"	d
HPF_Fs32000_Gain7_Shift	lvm/Bundle/src/LVM_Coeffs.h	298;"	d
HPF_Fs32000_Gain8_A0	lvm/Bundle/src/LVM_Coeffs.h	300;"	d
HPF_Fs32000_Gain8_A1	lvm/Bundle/src/LVM_Coeffs.h	301;"	d
HPF_Fs32000_Gain8_A2	lvm/Bundle/src/LVM_Coeffs.h	302;"	d
HPF_Fs32000_Gain8_B1	lvm/Bundle/src/LVM_Coeffs.h	303;"	d
HPF_Fs32000_Gain8_B2	lvm/Bundle/src/LVM_Coeffs.h	304;"	d
HPF_Fs32000_Gain8_Shift	lvm/Bundle/src/LVM_Coeffs.h	305;"	d
HPF_Fs32000_Gain9_A0	lvm/Bundle/src/LVM_Coeffs.h	307;"	d
HPF_Fs32000_Gain9_A1	lvm/Bundle/src/LVM_Coeffs.h	308;"	d
HPF_Fs32000_Gain9_A2	lvm/Bundle/src/LVM_Coeffs.h	309;"	d
HPF_Fs32000_Gain9_B1	lvm/Bundle/src/LVM_Coeffs.h	310;"	d
HPF_Fs32000_Gain9_B2	lvm/Bundle/src/LVM_Coeffs.h	311;"	d
HPF_Fs32000_Gain9_Shift	lvm/Bundle/src/LVM_Coeffs.h	312;"	d
HPF_Fs44100_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	73;"	d
HPF_Fs44100_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	74;"	d
HPF_Fs44100_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	75;"	d
HPF_Fs44100_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	76;"	d
HPF_Fs44100_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	77;"	d
HPF_Fs44100_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	120;"	d
HPF_Fs44100_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	121;"	d
HPF_Fs44100_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	122;"	d
HPF_Fs44100_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	123;"	d
HPF_Fs44100_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	124;"	d
HPF_Fs44100_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	167;"	d
HPF_Fs44100_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	168;"	d
HPF_Fs44100_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	169;"	d
HPF_Fs44100_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	170;"	d
HPF_Fs44100_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	171;"	d
HPF_Fs44100_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	214;"	d
HPF_Fs44100_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	215;"	d
HPF_Fs44100_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	216;"	d
HPF_Fs44100_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	217;"	d
HPF_Fs44100_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	218;"	d
HPF_Fs44100_Gain10_A0	lvm/Bundle/src/LVM_Coeffs.h	422;"	d
HPF_Fs44100_Gain10_A1	lvm/Bundle/src/LVM_Coeffs.h	423;"	d
HPF_Fs44100_Gain10_A2	lvm/Bundle/src/LVM_Coeffs.h	424;"	d
HPF_Fs44100_Gain10_B1	lvm/Bundle/src/LVM_Coeffs.h	425;"	d
HPF_Fs44100_Gain10_B2	lvm/Bundle/src/LVM_Coeffs.h	426;"	d
HPF_Fs44100_Gain10_Shift	lvm/Bundle/src/LVM_Coeffs.h	427;"	d
HPF_Fs44100_Gain11_A0	lvm/Bundle/src/LVM_Coeffs.h	429;"	d
HPF_Fs44100_Gain11_A1	lvm/Bundle/src/LVM_Coeffs.h	430;"	d
HPF_Fs44100_Gain11_A2	lvm/Bundle/src/LVM_Coeffs.h	431;"	d
HPF_Fs44100_Gain11_B1	lvm/Bundle/src/LVM_Coeffs.h	432;"	d
HPF_Fs44100_Gain11_B2	lvm/Bundle/src/LVM_Coeffs.h	433;"	d
HPF_Fs44100_Gain11_Shift	lvm/Bundle/src/LVM_Coeffs.h	434;"	d
HPF_Fs44100_Gain12_A0	lvm/Bundle/src/LVM_Coeffs.h	436;"	d
HPF_Fs44100_Gain12_A1	lvm/Bundle/src/LVM_Coeffs.h	437;"	d
HPF_Fs44100_Gain12_A2	lvm/Bundle/src/LVM_Coeffs.h	438;"	d
HPF_Fs44100_Gain12_B1	lvm/Bundle/src/LVM_Coeffs.h	439;"	d
HPF_Fs44100_Gain12_B2	lvm/Bundle/src/LVM_Coeffs.h	440;"	d
HPF_Fs44100_Gain12_Shift	lvm/Bundle/src/LVM_Coeffs.h	441;"	d
HPF_Fs44100_Gain13_A0	lvm/Bundle/src/LVM_Coeffs.h	443;"	d
HPF_Fs44100_Gain13_A1	lvm/Bundle/src/LVM_Coeffs.h	444;"	d
HPF_Fs44100_Gain13_A2	lvm/Bundle/src/LVM_Coeffs.h	445;"	d
HPF_Fs44100_Gain13_B1	lvm/Bundle/src/LVM_Coeffs.h	446;"	d
HPF_Fs44100_Gain13_B2	lvm/Bundle/src/LVM_Coeffs.h	447;"	d
HPF_Fs44100_Gain13_Shift	lvm/Bundle/src/LVM_Coeffs.h	448;"	d
HPF_Fs44100_Gain14_A0	lvm/Bundle/src/LVM_Coeffs.h	450;"	d
HPF_Fs44100_Gain14_A1	lvm/Bundle/src/LVM_Coeffs.h	451;"	d
HPF_Fs44100_Gain14_A2	lvm/Bundle/src/LVM_Coeffs.h	452;"	d
HPF_Fs44100_Gain14_B1	lvm/Bundle/src/LVM_Coeffs.h	453;"	d
HPF_Fs44100_Gain14_B2	lvm/Bundle/src/LVM_Coeffs.h	454;"	d
HPF_Fs44100_Gain14_Shift	lvm/Bundle/src/LVM_Coeffs.h	455;"	d
HPF_Fs44100_Gain15_A0	lvm/Bundle/src/LVM_Coeffs.h	457;"	d
HPF_Fs44100_Gain15_A1	lvm/Bundle/src/LVM_Coeffs.h	458;"	d
HPF_Fs44100_Gain15_A2	lvm/Bundle/src/LVM_Coeffs.h	459;"	d
HPF_Fs44100_Gain15_B1	lvm/Bundle/src/LVM_Coeffs.h	460;"	d
HPF_Fs44100_Gain15_B2	lvm/Bundle/src/LVM_Coeffs.h	461;"	d
HPF_Fs44100_Gain15_Shift	lvm/Bundle/src/LVM_Coeffs.h	462;"	d
HPF_Fs44100_Gain1_A0	lvm/Bundle/src/LVM_Coeffs.h	359;"	d
HPF_Fs44100_Gain1_A1	lvm/Bundle/src/LVM_Coeffs.h	360;"	d
HPF_Fs44100_Gain1_A2	lvm/Bundle/src/LVM_Coeffs.h	361;"	d
HPF_Fs44100_Gain1_B1	lvm/Bundle/src/LVM_Coeffs.h	362;"	d
HPF_Fs44100_Gain1_B2	lvm/Bundle/src/LVM_Coeffs.h	363;"	d
HPF_Fs44100_Gain1_Shift	lvm/Bundle/src/LVM_Coeffs.h	364;"	d
HPF_Fs44100_Gain2_A0	lvm/Bundle/src/LVM_Coeffs.h	366;"	d
HPF_Fs44100_Gain2_A1	lvm/Bundle/src/LVM_Coeffs.h	367;"	d
HPF_Fs44100_Gain2_A2	lvm/Bundle/src/LVM_Coeffs.h	368;"	d
HPF_Fs44100_Gain2_B1	lvm/Bundle/src/LVM_Coeffs.h	369;"	d
HPF_Fs44100_Gain2_B2	lvm/Bundle/src/LVM_Coeffs.h	370;"	d
HPF_Fs44100_Gain2_Shift	lvm/Bundle/src/LVM_Coeffs.h	371;"	d
HPF_Fs44100_Gain3_A0	lvm/Bundle/src/LVM_Coeffs.h	373;"	d
HPF_Fs44100_Gain3_A1	lvm/Bundle/src/LVM_Coeffs.h	374;"	d
HPF_Fs44100_Gain3_A2	lvm/Bundle/src/LVM_Coeffs.h	375;"	d
HPF_Fs44100_Gain3_B1	lvm/Bundle/src/LVM_Coeffs.h	376;"	d
HPF_Fs44100_Gain3_B2	lvm/Bundle/src/LVM_Coeffs.h	377;"	d
HPF_Fs44100_Gain3_Shift	lvm/Bundle/src/LVM_Coeffs.h	378;"	d
HPF_Fs44100_Gain4_A0	lvm/Bundle/src/LVM_Coeffs.h	380;"	d
HPF_Fs44100_Gain4_A1	lvm/Bundle/src/LVM_Coeffs.h	381;"	d
HPF_Fs44100_Gain4_A2	lvm/Bundle/src/LVM_Coeffs.h	382;"	d
HPF_Fs44100_Gain4_B1	lvm/Bundle/src/LVM_Coeffs.h	383;"	d
HPF_Fs44100_Gain4_B2	lvm/Bundle/src/LVM_Coeffs.h	384;"	d
HPF_Fs44100_Gain4_Shift	lvm/Bundle/src/LVM_Coeffs.h	385;"	d
HPF_Fs44100_Gain5_A0	lvm/Bundle/src/LVM_Coeffs.h	387;"	d
HPF_Fs44100_Gain5_A1	lvm/Bundle/src/LVM_Coeffs.h	388;"	d
HPF_Fs44100_Gain5_A2	lvm/Bundle/src/LVM_Coeffs.h	389;"	d
HPF_Fs44100_Gain5_B1	lvm/Bundle/src/LVM_Coeffs.h	390;"	d
HPF_Fs44100_Gain5_B2	lvm/Bundle/src/LVM_Coeffs.h	391;"	d
HPF_Fs44100_Gain5_Shift	lvm/Bundle/src/LVM_Coeffs.h	392;"	d
HPF_Fs44100_Gain6_A0	lvm/Bundle/src/LVM_Coeffs.h	394;"	d
HPF_Fs44100_Gain6_A1	lvm/Bundle/src/LVM_Coeffs.h	395;"	d
HPF_Fs44100_Gain6_A2	lvm/Bundle/src/LVM_Coeffs.h	396;"	d
HPF_Fs44100_Gain6_B1	lvm/Bundle/src/LVM_Coeffs.h	397;"	d
HPF_Fs44100_Gain6_B2	lvm/Bundle/src/LVM_Coeffs.h	398;"	d
HPF_Fs44100_Gain6_Shift	lvm/Bundle/src/LVM_Coeffs.h	399;"	d
HPF_Fs44100_Gain7_A0	lvm/Bundle/src/LVM_Coeffs.h	401;"	d
HPF_Fs44100_Gain7_A1	lvm/Bundle/src/LVM_Coeffs.h	402;"	d
HPF_Fs44100_Gain7_A2	lvm/Bundle/src/LVM_Coeffs.h	403;"	d
HPF_Fs44100_Gain7_B1	lvm/Bundle/src/LVM_Coeffs.h	404;"	d
HPF_Fs44100_Gain7_B2	lvm/Bundle/src/LVM_Coeffs.h	405;"	d
HPF_Fs44100_Gain7_Shift	lvm/Bundle/src/LVM_Coeffs.h	406;"	d
HPF_Fs44100_Gain8_A0	lvm/Bundle/src/LVM_Coeffs.h	408;"	d
HPF_Fs44100_Gain8_A1	lvm/Bundle/src/LVM_Coeffs.h	409;"	d
HPF_Fs44100_Gain8_A2	lvm/Bundle/src/LVM_Coeffs.h	410;"	d
HPF_Fs44100_Gain8_B1	lvm/Bundle/src/LVM_Coeffs.h	411;"	d
HPF_Fs44100_Gain8_B2	lvm/Bundle/src/LVM_Coeffs.h	412;"	d
HPF_Fs44100_Gain8_Shift	lvm/Bundle/src/LVM_Coeffs.h	413;"	d
HPF_Fs44100_Gain9_A0	lvm/Bundle/src/LVM_Coeffs.h	415;"	d
HPF_Fs44100_Gain9_A1	lvm/Bundle/src/LVM_Coeffs.h	416;"	d
HPF_Fs44100_Gain9_A2	lvm/Bundle/src/LVM_Coeffs.h	417;"	d
HPF_Fs44100_Gain9_B1	lvm/Bundle/src/LVM_Coeffs.h	418;"	d
HPF_Fs44100_Gain9_B2	lvm/Bundle/src/LVM_Coeffs.h	419;"	d
HPF_Fs44100_Gain9_Shift	lvm/Bundle/src/LVM_Coeffs.h	420;"	d
HPF_Fs48000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	78;"	d
HPF_Fs48000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	79;"	d
HPF_Fs48000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	80;"	d
HPF_Fs48000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	81;"	d
HPF_Fs48000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	82;"	d
HPF_Fs48000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	125;"	d
HPF_Fs48000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	126;"	d
HPF_Fs48000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	127;"	d
HPF_Fs48000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	128;"	d
HPF_Fs48000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	129;"	d
HPF_Fs48000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	172;"	d
HPF_Fs48000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	173;"	d
HPF_Fs48000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	174;"	d
HPF_Fs48000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	175;"	d
HPF_Fs48000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	176;"	d
HPF_Fs48000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	219;"	d
HPF_Fs48000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	220;"	d
HPF_Fs48000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	221;"	d
HPF_Fs48000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	222;"	d
HPF_Fs48000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	223;"	d
HPF_Fs48000_Gain10_A0	lvm/Bundle/src/LVM_Coeffs.h	530;"	d
HPF_Fs48000_Gain10_A1	lvm/Bundle/src/LVM_Coeffs.h	531;"	d
HPF_Fs48000_Gain10_A2	lvm/Bundle/src/LVM_Coeffs.h	532;"	d
HPF_Fs48000_Gain10_B1	lvm/Bundle/src/LVM_Coeffs.h	533;"	d
HPF_Fs48000_Gain10_B2	lvm/Bundle/src/LVM_Coeffs.h	534;"	d
HPF_Fs48000_Gain10_Shift	lvm/Bundle/src/LVM_Coeffs.h	535;"	d
HPF_Fs48000_Gain11_A0	lvm/Bundle/src/LVM_Coeffs.h	537;"	d
HPF_Fs48000_Gain11_A1	lvm/Bundle/src/LVM_Coeffs.h	538;"	d
HPF_Fs48000_Gain11_A2	lvm/Bundle/src/LVM_Coeffs.h	539;"	d
HPF_Fs48000_Gain11_B1	lvm/Bundle/src/LVM_Coeffs.h	540;"	d
HPF_Fs48000_Gain11_B2	lvm/Bundle/src/LVM_Coeffs.h	541;"	d
HPF_Fs48000_Gain11_Shift	lvm/Bundle/src/LVM_Coeffs.h	542;"	d
HPF_Fs48000_Gain12_A0	lvm/Bundle/src/LVM_Coeffs.h	544;"	d
HPF_Fs48000_Gain12_A1	lvm/Bundle/src/LVM_Coeffs.h	545;"	d
HPF_Fs48000_Gain12_A2	lvm/Bundle/src/LVM_Coeffs.h	546;"	d
HPF_Fs48000_Gain12_B1	lvm/Bundle/src/LVM_Coeffs.h	547;"	d
HPF_Fs48000_Gain12_B2	lvm/Bundle/src/LVM_Coeffs.h	548;"	d
HPF_Fs48000_Gain12_Shift	lvm/Bundle/src/LVM_Coeffs.h	549;"	d
HPF_Fs48000_Gain13_A0	lvm/Bundle/src/LVM_Coeffs.h	551;"	d
HPF_Fs48000_Gain13_A1	lvm/Bundle/src/LVM_Coeffs.h	552;"	d
HPF_Fs48000_Gain13_A2	lvm/Bundle/src/LVM_Coeffs.h	553;"	d
HPF_Fs48000_Gain13_B1	lvm/Bundle/src/LVM_Coeffs.h	554;"	d
HPF_Fs48000_Gain13_B2	lvm/Bundle/src/LVM_Coeffs.h	555;"	d
HPF_Fs48000_Gain13_Shift	lvm/Bundle/src/LVM_Coeffs.h	556;"	d
HPF_Fs48000_Gain14_A0	lvm/Bundle/src/LVM_Coeffs.h	558;"	d
HPF_Fs48000_Gain14_A1	lvm/Bundle/src/LVM_Coeffs.h	559;"	d
HPF_Fs48000_Gain14_A2	lvm/Bundle/src/LVM_Coeffs.h	560;"	d
HPF_Fs48000_Gain14_B1	lvm/Bundle/src/LVM_Coeffs.h	561;"	d
HPF_Fs48000_Gain14_B2	lvm/Bundle/src/LVM_Coeffs.h	562;"	d
HPF_Fs48000_Gain14_Shift	lvm/Bundle/src/LVM_Coeffs.h	563;"	d
HPF_Fs48000_Gain15_A0	lvm/Bundle/src/LVM_Coeffs.h	565;"	d
HPF_Fs48000_Gain15_A1	lvm/Bundle/src/LVM_Coeffs.h	566;"	d
HPF_Fs48000_Gain15_A2	lvm/Bundle/src/LVM_Coeffs.h	567;"	d
HPF_Fs48000_Gain15_B1	lvm/Bundle/src/LVM_Coeffs.h	568;"	d
HPF_Fs48000_Gain15_B2	lvm/Bundle/src/LVM_Coeffs.h	569;"	d
HPF_Fs48000_Gain15_Shift	lvm/Bundle/src/LVM_Coeffs.h	570;"	d
HPF_Fs48000_Gain1_A0	lvm/Bundle/src/LVM_Coeffs.h	467;"	d
HPF_Fs48000_Gain1_A1	lvm/Bundle/src/LVM_Coeffs.h	468;"	d
HPF_Fs48000_Gain1_A2	lvm/Bundle/src/LVM_Coeffs.h	469;"	d
HPF_Fs48000_Gain1_B1	lvm/Bundle/src/LVM_Coeffs.h	470;"	d
HPF_Fs48000_Gain1_B2	lvm/Bundle/src/LVM_Coeffs.h	471;"	d
HPF_Fs48000_Gain1_Shift	lvm/Bundle/src/LVM_Coeffs.h	472;"	d
HPF_Fs48000_Gain2_A0	lvm/Bundle/src/LVM_Coeffs.h	474;"	d
HPF_Fs48000_Gain2_A1	lvm/Bundle/src/LVM_Coeffs.h	475;"	d
HPF_Fs48000_Gain2_A2	lvm/Bundle/src/LVM_Coeffs.h	476;"	d
HPF_Fs48000_Gain2_B1	lvm/Bundle/src/LVM_Coeffs.h	477;"	d
HPF_Fs48000_Gain2_B2	lvm/Bundle/src/LVM_Coeffs.h	478;"	d
HPF_Fs48000_Gain2_Shift	lvm/Bundle/src/LVM_Coeffs.h	479;"	d
HPF_Fs48000_Gain3_A0	lvm/Bundle/src/LVM_Coeffs.h	481;"	d
HPF_Fs48000_Gain3_A1	lvm/Bundle/src/LVM_Coeffs.h	482;"	d
HPF_Fs48000_Gain3_A2	lvm/Bundle/src/LVM_Coeffs.h	483;"	d
HPF_Fs48000_Gain3_B1	lvm/Bundle/src/LVM_Coeffs.h	484;"	d
HPF_Fs48000_Gain3_B2	lvm/Bundle/src/LVM_Coeffs.h	485;"	d
HPF_Fs48000_Gain3_Shift	lvm/Bundle/src/LVM_Coeffs.h	486;"	d
HPF_Fs48000_Gain4_A0	lvm/Bundle/src/LVM_Coeffs.h	488;"	d
HPF_Fs48000_Gain4_A1	lvm/Bundle/src/LVM_Coeffs.h	489;"	d
HPF_Fs48000_Gain4_A2	lvm/Bundle/src/LVM_Coeffs.h	490;"	d
HPF_Fs48000_Gain4_B1	lvm/Bundle/src/LVM_Coeffs.h	491;"	d
HPF_Fs48000_Gain4_B2	lvm/Bundle/src/LVM_Coeffs.h	492;"	d
HPF_Fs48000_Gain4_Shift	lvm/Bundle/src/LVM_Coeffs.h	493;"	d
HPF_Fs48000_Gain5_A0	lvm/Bundle/src/LVM_Coeffs.h	495;"	d
HPF_Fs48000_Gain5_A1	lvm/Bundle/src/LVM_Coeffs.h	496;"	d
HPF_Fs48000_Gain5_A2	lvm/Bundle/src/LVM_Coeffs.h	497;"	d
HPF_Fs48000_Gain5_B1	lvm/Bundle/src/LVM_Coeffs.h	498;"	d
HPF_Fs48000_Gain5_B2	lvm/Bundle/src/LVM_Coeffs.h	499;"	d
HPF_Fs48000_Gain5_Shift	lvm/Bundle/src/LVM_Coeffs.h	500;"	d
HPF_Fs48000_Gain6_A0	lvm/Bundle/src/LVM_Coeffs.h	502;"	d
HPF_Fs48000_Gain6_A1	lvm/Bundle/src/LVM_Coeffs.h	503;"	d
HPF_Fs48000_Gain6_A2	lvm/Bundle/src/LVM_Coeffs.h	504;"	d
HPF_Fs48000_Gain6_B1	lvm/Bundle/src/LVM_Coeffs.h	505;"	d
HPF_Fs48000_Gain6_B2	lvm/Bundle/src/LVM_Coeffs.h	506;"	d
HPF_Fs48000_Gain6_Shift	lvm/Bundle/src/LVM_Coeffs.h	507;"	d
HPF_Fs48000_Gain7_A0	lvm/Bundle/src/LVM_Coeffs.h	509;"	d
HPF_Fs48000_Gain7_A1	lvm/Bundle/src/LVM_Coeffs.h	510;"	d
HPF_Fs48000_Gain7_A2	lvm/Bundle/src/LVM_Coeffs.h	511;"	d
HPF_Fs48000_Gain7_B1	lvm/Bundle/src/LVM_Coeffs.h	512;"	d
HPF_Fs48000_Gain7_B2	lvm/Bundle/src/LVM_Coeffs.h	513;"	d
HPF_Fs48000_Gain7_Shift	lvm/Bundle/src/LVM_Coeffs.h	514;"	d
HPF_Fs48000_Gain8_A0	lvm/Bundle/src/LVM_Coeffs.h	516;"	d
HPF_Fs48000_Gain8_A1	lvm/Bundle/src/LVM_Coeffs.h	517;"	d
HPF_Fs48000_Gain8_A2	lvm/Bundle/src/LVM_Coeffs.h	518;"	d
HPF_Fs48000_Gain8_B1	lvm/Bundle/src/LVM_Coeffs.h	519;"	d
HPF_Fs48000_Gain8_B2	lvm/Bundle/src/LVM_Coeffs.h	520;"	d
HPF_Fs48000_Gain8_Shift	lvm/Bundle/src/LVM_Coeffs.h	521;"	d
HPF_Fs48000_Gain9_A0	lvm/Bundle/src/LVM_Coeffs.h	523;"	d
HPF_Fs48000_Gain9_A1	lvm/Bundle/src/LVM_Coeffs.h	524;"	d
HPF_Fs48000_Gain9_A2	lvm/Bundle/src/LVM_Coeffs.h	525;"	d
HPF_Fs48000_Gain9_B1	lvm/Bundle/src/LVM_Coeffs.h	526;"	d
HPF_Fs48000_Gain9_B2	lvm/Bundle/src/LVM_Coeffs.h	527;"	d
HPF_Fs48000_Gain9_Shift	lvm/Bundle/src/LVM_Coeffs.h	528;"	d
HPF_Fs8000_Fc55_A0	lvm/Bass/src/LVDBE_Coeffs.h	38;"	d
HPF_Fs8000_Fc55_A1	lvm/Bass/src/LVDBE_Coeffs.h	39;"	d
HPF_Fs8000_Fc55_A2	lvm/Bass/src/LVDBE_Coeffs.h	40;"	d
HPF_Fs8000_Fc55_B1	lvm/Bass/src/LVDBE_Coeffs.h	41;"	d
HPF_Fs8000_Fc55_B2	lvm/Bass/src/LVDBE_Coeffs.h	42;"	d
HPF_Fs8000_Fc66_A0	lvm/Bass/src/LVDBE_Coeffs.h	85;"	d
HPF_Fs8000_Fc66_A1	lvm/Bass/src/LVDBE_Coeffs.h	86;"	d
HPF_Fs8000_Fc66_A2	lvm/Bass/src/LVDBE_Coeffs.h	87;"	d
HPF_Fs8000_Fc66_B1	lvm/Bass/src/LVDBE_Coeffs.h	88;"	d
HPF_Fs8000_Fc66_B2	lvm/Bass/src/LVDBE_Coeffs.h	89;"	d
HPF_Fs8000_Fc78_A0	lvm/Bass/src/LVDBE_Coeffs.h	132;"	d
HPF_Fs8000_Fc78_A1	lvm/Bass/src/LVDBE_Coeffs.h	133;"	d
HPF_Fs8000_Fc78_A2	lvm/Bass/src/LVDBE_Coeffs.h	134;"	d
HPF_Fs8000_Fc78_B1	lvm/Bass/src/LVDBE_Coeffs.h	135;"	d
HPF_Fs8000_Fc78_B2	lvm/Bass/src/LVDBE_Coeffs.h	136;"	d
HPF_Fs8000_Fc90_A0	lvm/Bass/src/LVDBE_Coeffs.h	179;"	d
HPF_Fs8000_Fc90_A1	lvm/Bass/src/LVDBE_Coeffs.h	180;"	d
HPF_Fs8000_Fc90_A2	lvm/Bass/src/LVDBE_Coeffs.h	181;"	d
HPF_Fs8000_Fc90_B1	lvm/Bass/src/LVDBE_Coeffs.h	182;"	d
HPF_Fs8000_Fc90_B2	lvm/Bass/src/LVDBE_Coeffs.h	183;"	d
HPTaps	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_1I_Order1_Taps_t HPTaps;                     \/* High pass filter taps *\/$/;"	m	struct:__anon46	access:public
Headroom	lvm/Bundle/src/LVM_Private.h	/^    LVM_UINT16              Headroom;            \/* Value of the current headroom *\/$/;"	m	struct:__anon40	access:public
HeadroomParams	lvm/Bundle/src/LVM_Private.h	/^    LVM_HeadroomParams_t    HeadroomParams;      \/* Headroom parameters *\/$/;"	m	struct:__anon40	access:public
Headroom_Offset	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   Headroom_Offset;        \/* Headroom = biggest band gain - Headroom_Offset *\/$/;"	m	struct:__anon31	access:public
Headroom_OperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_Headroom_Mode_en        Headroom_OperatingMode; \/* Headroom Control On\/Off *\/$/;"	m	struct:__anon34	access:public
HeadroomdB	lvm/Bass/lib/LVDBE.h	/^    LVM_INT16               HeadroomdB;$/;"	m	struct:__anon10	access:public
INST_ALLOC	lvm/Common/lib/InstAlloc.h	/^}   INST_ALLOC;$/;"	t	typeref:struct:__anon78
INTEGER_15	lvm/Common/src/CompLim_private.h	34;"	d
INTEGER_16	lvm/Common/src/CompLim_private.h	33;"	d
InDelayBuffer	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               InDelayBuffer[6*MIN_INTERNAL_BLOCKSIZE]; \/* Input buffer delay line, left and right *\/$/;"	m	struct:__anon37	access:public
InDelaySamples	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               InDelaySamples;     \/* Number of samples in the input delay buffer *\/$/;"	m	struct:__anon37	access:public
InstAlloc_AddMember	lvm/Common/lib/InstAlloc.h	/^void* InstAlloc_AddMember( INST_ALLOC *pms, LVM_UINT32 Size );$/;"	p	signature:( INST_ALLOC *pms, LVM_UINT32 Size )
InstAlloc_AddMember	lvm/Common/src/InstAlloc.c	/^void*   InstAlloc_AddMember( INST_ALLOC         *pms,$/;"	f	signature:( INST_ALLOC *pms, LVM_UINT32 Size )
InstAlloc_AddMemberAll	lvm/Common/lib/InstAlloc.h	/^void*   InstAlloc_AddMemberAll( INST_ALLOC                     *pms,$/;"	p	signature:( INST_ALLOC *pms, LVM_UINT32 Size[], LVM_MemoryTable_st *pMemoryTable)
InstAlloc_AddMemberAll	lvm/Common/src/InstAlloc.c	/^void*   InstAlloc_AddMemberAll( INST_ALLOC                     *pms,$/;"	f	signature:( INST_ALLOC *pms, LVM_UINT32 Size[], LVM_MemoryTable_st *pMemoryTable)
InstAlloc_AddMemberAllRet	lvm/Common/lib/InstAlloc.h	/^void*   InstAlloc_AddMemberAllRet(     INST_ALLOC                 *pms,$/;"	p	signature:( INST_ALLOC *pms, LVM_UINT32 Size[], void **ptr)
InstAlloc_AddMemberAllRet	lvm/Common/src/InstAlloc.c	/^void*   InstAlloc_AddMemberAllRet(     INST_ALLOC                 *pms,$/;"	f	signature:( INST_ALLOC *pms, LVM_UINT32 Size[], void **ptr)
InstAlloc_GetTotal	lvm/Common/lib/InstAlloc.h	/^LVM_UINT32 InstAlloc_GetTotal( INST_ALLOC *pms);$/;"	p	signature:( INST_ALLOC *pms)
InstAlloc_GetTotal	lvm/Common/src/InstAlloc.c	/^LVM_UINT32 InstAlloc_GetTotal( INST_ALLOC *pms)$/;"	f	signature:( INST_ALLOC *pms)
InstAlloc_Init	lvm/Common/lib/InstAlloc.h	/^void   InstAlloc_Init( INST_ALLOC *pms, void *StartAddr );$/;"	p	signature:( INST_ALLOC *pms, void *StartAddr )
InstAlloc_Init	lvm/Common/src/InstAlloc.c	/^void    InstAlloc_Init( INST_ALLOC      *pms,$/;"	f	signature:( INST_ALLOC *pms, void *StartAddr )
InstAlloc_InitAll	lvm/Common/lib/InstAlloc.h	/^void    InstAlloc_InitAll( INST_ALLOC                      *pms,$/;"	p	signature:( INST_ALLOC *pms, LVM_MemoryTable_st *pMemoryTable)
InstAlloc_InitAll	lvm/Common/src/InstAlloc.c	/^void    InstAlloc_InitAll( INST_ALLOC                      *pms,$/;"	f	signature:( INST_ALLOC *pms, LVM_MemoryTable_st *pMemoryTable)
InstAlloc_InitAll_NULL	lvm/Common/lib/InstAlloc.h	/^void    InstAlloc_InitAll_NULL( INST_ALLOC              *pms);$/;"	p	signature:( INST_ALLOC *pms)
InstAlloc_InitAll_NULL	lvm/Common/src/InstAlloc.c	/^void    InstAlloc_InitAll_NULL( INST_ALLOC  *pms)$/;"	f	signature:( INST_ALLOC *pms)
InstParams	lvm/Bundle/src/LVM_Private.h	/^    LVM_InstParams_t        InstParams;         \/* Instance parameters *\/$/;"	m	struct:__anon40	access:public
InstanceParams	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_InstanceParams_st InstanceParams;             \/* Initialisation time instance parameters *\/$/;"	m	struct:__anon48	access:public
Int16LShiftToInt32_16x32	lvm/Common/lib/VectorArithmetic.h	/^void Int16LShiftToInt32_16x32(const LVM_INT16 *src,$/;"	p	signature:(const LVM_INT16 *src, LVM_INT32 *dst, LVM_INT16 n, LVM_INT16 shift )
Int16LShiftToInt32_16x32	lvm/Common/src/Int16LShiftToInt32_16x32.c	/^void Int16LShiftToInt32_16x32(const LVM_INT16   *src,$/;"	f	signature:(const LVM_INT16 *src, LVM_INT32 *dst, LVM_INT16 n, LVM_INT16 shift )
Int32RShiftToInt16_Sat_32x16	lvm/Common/lib/VectorArithmetic.h	/^void Int32RShiftToInt16_Sat_32x16(const  LVM_INT32  *src,$/;"	p	signature:(const LVM_INT32 *src, LVM_INT16 *dst, LVM_INT16 n, LVM_INT16 shift )
Int32RShiftToInt16_Sat_32x16	lvm/Common/src/Int32RShiftToInt16_Sat_32x16.c	/^void Int32RShiftToInt16_Sat_32x16(const LVM_INT32  *src,$/;"	f	signature:(const LVM_INT32 *src, LVM_INT16 *dst, LVM_INT16 n, LVM_INT16 shift )
InternalBlockSize	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               InternalBlockSize;  \/* Maximum internal block size *\/$/;"	m	struct:__anon40	access:public
JoinTo2i_32x32	lvm/Common/lib/VectorArithmetic.h	/^void JoinTo2i_32x32(          const LVM_INT32  *srcL,$/;"	p	signature:( const LVM_INT32 *srcL, const LVM_INT32 *srcR, LVM_INT32 *dst, LVM_INT16 n )
JoinTo2i_32x32	lvm/Common/src/JoinTo2i_32x32.c	/^void JoinTo2i_32x32( const LVM_INT32    *srcL,$/;"	f	signature:( const LVM_INT32 *srcL, const LVM_INT32 *srcR, LVM_INT32 *dst, LVM_INT16 n )
KM	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^    LVM_INT32 KM;    \/*should store b2*\/$/;"	m	struct:__anon128	access:public
KP	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^    LVM_INT32 KP;    \/*should store a0*\/$/;"	m	struct:__anon128	access:public
LIB_SHARED_TARGET	Makefile	/^LIB_SHARED_TARGET:= libdtap.so$/;"	m
LOCAL_PATH	Makefile	/^LOCAL_PATH      := $(shell pwd)$/;"	m
LOCAL_PATH	lvm/Makefile	/^LOCAL_PATH      := $(shell pwd)$/;"	m
LOG_TAG	lvm/Common/src/From2iToMono_32.c	28;"	d	file:
LOG_TAG	lvm/Common/src/PK_2I_D32F32C30G11_TRC_WRA_01.c	26;"	d	file:
LOW_FREQ	lvm/Eq/src/LVEQNB_Control.c	36;"	d	file:
LOW_FREQ	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	22;"	d	file:
LPCoefs	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_Instance_t       LPCoefs;                    \/* Low pass filter coefficients *\/$/;"	m	struct:__anon47	access:public
LPF	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  LPF;                    \/* Low pass filter, in Hz *\/$/;"	m	struct:__anon44	access:public
LPTaps	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_1I_Order1_Taps_t LPTaps;                     \/* Low pass filter taps *\/$/;"	m	struct:__anon46	access:public
LVCS_ALIGNMENTERROR	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_ALIGNMENTERROR = 1,                        \/* Memory alignment error *\/$/;"	e	enum:__anon99
LVCS_BYPASSMIXSWITCH	lvm/StereoWidening/src/LVCS_Private.h	59;"	d
LVCS_BYPASS_MIXER_TC	lvm/StereoWidening/src/LVCS_Private.h	67;"	d
LVCS_BypassMixInit	lvm/StereoWidening/src/LVCS_BypassMix.c	/^LVCS_ReturnStatus_en LVCS_BypassMixInit(LVCS_Handle_t       hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_BypassMixInit	lvm/StereoWidening/src/LVCS_BypassMix.h	/^LVCS_ReturnStatus_en LVCS_BypassMixInit(LVCS_Handle_t       hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_BypassMix_t	lvm/StereoWidening/src/LVCS_BypassMix.h	/^} LVCS_BypassMix_t;$/;"	t	typeref:struct:__anon110
LVCS_BypassMixer	lvm/StereoWidening/src/LVCS_BypassMix.c	/^LVCS_ReturnStatus_en LVCS_BypassMixer(LVCS_Handle_t         hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, const LVM_INT16 *pProcessed, const LVM_INT16 *pUnprocessed, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVCS_BypassMixer	lvm/StereoWidening/src/LVCS_BypassMix.h	/^LVCS_ReturnStatus_en LVCS_BypassMixer(LVCS_Handle_t         hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, const LVM_INT16 *pProcessed, const LVM_INT16 *unProcessed, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVCS_COEFFICIENT	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_COEFFICIENT    = 2,$/;"	e	enum:__anon98
LVCS_COMPGAINFRAME	lvm/StereoWidening/src/LVCS_Private.h	60;"	d
LVCS_CSMS_Coef_Tables_t	lvm/StereoWidening/lib/LVCS.h	/^} LVCS_CSMS_Coef_Tables_t;$/;"	t	typeref:struct:__anon102
LVCS_Capabilities_t	lvm/StereoWidening/lib/LVCS.h	/^} LVCS_Capabilities_t;$/;"	t	typeref:struct:__anon106
LVCS_Coefficient_t	lvm/StereoWidening/src/LVCS_Private.h	/^} LVCS_Coefficient_t;$/;"	t	typeref:struct:__anon115
LVCS_Configuration_t	lvm/StereoWidening/src/LVCS_Private.h	/^typedef LVM_UINT16  LVCS_Configuration_t;       \/* Internal algorithm configuration *\/$/;"	t
LVCS_Control	lvm/StereoWidening/lib/LVCS.h	/^LVCS_ReturnStatus_en LVCS_Control(LVCS_Handle_t     hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_Control	lvm/StereoWidening/src/LVCS_Control.c	/^LVCS_ReturnStatus_en LVCS_Control(LVCS_Handle_t      hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_DATA	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_DATA           = 1,$/;"	e	enum:__anon98
LVCS_DEVICE_MAX	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_DEVICE_MAX = LVM_MAXENUM$/;"	e	enum:__anon112
LVCS_Data_t	lvm/StereoWidening/src/LVCS_Private.h	/^} LVCS_Data_t;$/;"	t	typeref:struct:__anon116
LVCS_EFFECT_HIGH	lvm/StereoWidening/lib/LVCS.h	90;"	d
LVCS_EFFECT_LOW	lvm/StereoWidening/lib/LVCS.h	88;"	d
LVCS_EFFECT_MEDIUM	lvm/StereoWidening/lib/LVCS.h	89;"	d
LVCS_EQUALISERSWITCH	lvm/StereoWidening/src/LVCS_Private.h	58;"	d
LVCS_EVENT_ALGOFF	lvm/StereoWidening/lib/LVCS.h	94;"	d
LVCS_EVENT_NONE	lvm/StereoWidening/lib/LVCS.h	93;"	d
LVCS_EX_HEADPHONES	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_EX_HEADPHONES          = 1,$/;"	e	enum:__anon101
LVCS_EX_HEADPHONE_GAIN	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	396;"	d
LVCS_EX_HEADPHONE_SHIFT	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	394;"	d
LVCS_EX_HEADPHONE_SHIFTLOSS	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	395;"	d
LVCS_Equaliser	lvm/StereoWidening/src/LVCS_Equaliser.c	/^LVCS_ReturnStatus_en LVCS_Equaliser(LVCS_Handle_t       hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, LVM_INT16 *pInputOutput, LVM_UINT16 NumSamples)
LVCS_Equaliser	lvm/StereoWidening/src/LVCS_Equaliser.h	/^LVCS_ReturnStatus_en LVCS_Equaliser(LVCS_Handle_t            hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, LVM_INT16 *pInputOutput, LVM_UINT16 NumSamples)
LVCS_EqualiserCoefTable	lvm/StereoWidening/src/LVCS_Tables.c	/^const BiquadA012B12CoefsSP_t LVCS_EqualiserCoefTable[] = {$/;"	v
LVCS_EqualiserInit	lvm/StereoWidening/src/LVCS_Equaliser.c	/^LVCS_ReturnStatus_en LVCS_EqualiserInit(LVCS_Handle_t       hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_EqualiserInit	lvm/StereoWidening/src/LVCS_Equaliser.h	/^LVCS_ReturnStatus_en LVCS_EqualiserInit(LVCS_Handle_t       hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_Equaliser_t	lvm/StereoWidening/src/LVCS_Equaliser.h	/^} LVCS_Equaliser_t;$/;"	t	typeref:struct:__anon108
LVCS_GetParameters	lvm/StereoWidening/lib/LVCS.h	/^LVCS_ReturnStatus_en LVCS_GetParameters(LVCS_Handle_t   hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_GetParameters	lvm/StereoWidening/src/LVCS_Control.c	/^LVCS_ReturnStatus_en LVCS_GetParameters(LVCS_Handle_t   hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_H	lvm/StereoWidening/lib/LVCS.h	57;"	d
LVCS_HEADPHONE	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_HEADPHONE  = 0,$/;"	e	enum:__anon112
LVCS_HEADPHONES	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_HEADPHONES             = 0,$/;"	e	enum:__anon101
LVCS_HEADPHONE_DELAYGAIN	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	245;"	d
LVCS_HEADPHONE_GAIN	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	393;"	d
LVCS_HEADPHONE_GAINCORRECT	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	249;"	d
LVCS_HEADPHONE_OUTPUTGAIN	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	246;"	d
LVCS_HEADPHONE_PROCGAIN	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	247;"	d
LVCS_HEADPHONE_SHIFT	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	391;"	d
LVCS_HEADPHONE_SHIFTLOSS	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	392;"	d
LVCS_HEADPHONE_UNPROCGAIN	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	248;"	d
LVCS_Handle_t	lvm/StereoWidening/lib/LVCS.h	/^typedef void *LVCS_Handle_t;$/;"	t
LVCS_INVALID	lvm/StereoWidening/src/LVCS_Private.h	66;"	d
LVCS_INVALIDBUFFER	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_INVALIDBUFFER  = 4,                        \/* Invalid buffer processing request *\/$/;"	e	enum:__anon99
LVCS_Init	lvm/StereoWidening/lib/LVCS.h	/^LVCS_ReturnStatus_en LVCS_Init(LVCS_Handle_t            *phInstance,$/;"	p	signature:(LVCS_Handle_t *phInstance, LVCS_MemTab_t *pMemoryTable, LVCS_Capabilities_t *pCapabilities)
LVCS_Init	lvm/StereoWidening/src/LVCS_Init.c	/^LVCS_ReturnStatus_en LVCS_Init(LVCS_Handle_t         *phInstance,$/;"	f	signature:(LVCS_Handle_t *phInstance, LVCS_MemTab_t *pMemoryTable, LVCS_Capabilities_t *pCapabilities)
LVCS_Instance_t	lvm/StereoWidening/src/LVCS_Private.h	/^} LVCS_Instance_t;$/;"	t	typeref:struct:__anon114
LVCS_MAX	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_MAX = LVM_MAXENUM$/;"	e	enum:__anon97
LVCS_MEMORYTYPE_MAX	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_MEMORYTYPE_MAX = LVM_MAXENUM$/;"	e	enum:__anon98
LVCS_MEMREGION_PERSISTENT_FAST_COEF	lvm/StereoWidening/lib/LVCS.h	83;"	d
LVCS_MEMREGION_PERSISTENT_FAST_DATA	lvm/StereoWidening/lib/LVCS.h	82;"	d
LVCS_MEMREGION_PERSISTENT_SLOW_DATA	lvm/StereoWidening/lib/LVCS.h	81;"	d
LVCS_MEMREGION_TEMPORARY_FAST	lvm/StereoWidening/lib/LVCS.h	84;"	d
LVCS_MONOINSTEREO	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_MONOINSTEREO = 1,$/;"	e	enum:__anon100
LVCS_MemTab_t	lvm/StereoWidening/lib/LVCS.h	/^} LVCS_MemTab_t;$/;"	t	typeref:struct:__anon104
LVCS_Memory	lvm/StereoWidening/lib/LVCS.h	/^LVCS_ReturnStatus_en LVCS_Memory(LVCS_Handle_t          hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, LVCS_MemTab_t *pMemoryTable, LVCS_Capabilities_t *pCapabilities)
LVCS_Memory	lvm/StereoWidening/src/LVCS_Init.c	/^LVCS_ReturnStatus_en LVCS_Memory(LVCS_Handle_t          hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, LVCS_MemTab_t *pMemoryTable, LVCS_Capabilities_t *pCapabilities)
LVCS_MemoryRegion_t	lvm/StereoWidening/lib/LVCS.h	/^} LVCS_MemoryRegion_t;$/;"	t	typeref:struct:__anon103
LVCS_MemoryTypes_en	lvm/StereoWidening/lib/LVCS.h	/^} LVCS_MemoryTypes_en;$/;"	t	typeref:enum:__anon98
LVCS_MixerCallback	lvm/StereoWidening/src/LVCS_BypassMix.c	/^LVM_INT32 LVCS_MixerCallback(   LVCS_Handle_t   hInstance,$/;"	p	file:	signature:( LVCS_Handle_t hInstance, void *pGeneralPurpose, LVM_INT16 CallbackParam)
LVCS_MixerCallback	lvm/StereoWidening/src/LVCS_BypassMix.c	/^LVM_INT32 LVCS_MixerCallback(LVCS_Handle_t      hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, void *pGeneralPurpose, LVM_INT16 CallbackParam)
LVCS_Modes_en	lvm/StereoWidening/lib/LVCS.h	/^} LVCS_Modes_en;$/;"	t	typeref:enum:__anon97
LVCS_NR_MEMORY_REGIONS	lvm/StereoWidening/lib/LVCS.h	85;"	d
LVCS_NR_OF_CHAN_CFG	lvm/StereoWidening/src/LVCS_Private.h	71;"	d
LVCS_NR_OF_FS	lvm/StereoWidening/src/LVCS_Private.h	70;"	d
LVCS_NULLADDRESS	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_NULLADDRESS    = 2,                        \/* NULL allocation address *\/$/;"	e	enum:__anon99
LVCS_OFF	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_OFF = 0,$/;"	e	enum:__anon97
LVCS_ON	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_ON  = 15,$/;"	e	enum:__anon97
LVCS_OutputDevice_en	lvm/StereoWidening/src/LVCS_Private.h	/^} LVCS_OutputDevice_en;$/;"	t	typeref:enum:__anon112
LVCS_OutputGainTable	lvm/StereoWidening/src/LVCS_Tables.c	/^const Gain_t LVCS_OutputGainTable[] = {$/;"	v
LVCS_PERSISTENT	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_PERSISTENT     = 3,$/;"	e	enum:__anon98
LVCS_Params_t	lvm/StereoWidening/lib/LVCS.h	/^} LVCS_Params_t;$/;"	t	typeref:struct:__anon105
LVCS_Process	lvm/StereoWidening/lib/LVCS.h	/^LVCS_ReturnStatus_en LVCS_Process(LVCS_Handle_t             hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVCS_Process	lvm/StereoWidening/src/LVCS_Process.c	/^LVCS_ReturnStatus_en LVCS_Process(LVCS_Handle_t             hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVCS_Process_CS	lvm/StereoWidening/src/LVCS_Process.c	/^LVCS_ReturnStatus_en LVCS_Process_CS(LVCS_Handle_t              hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVCS_REVERBSWITCH	lvm/StereoWidening/src/LVCS_Private.h	57;"	d
LVCS_ReturnStatus_en	lvm/StereoWidening/lib/LVCS.h	/^} LVCS_ReturnStatus_en;$/;"	t	typeref:enum:__anon99
LVCS_ReverbCoefTable	lvm/StereoWidening/src/LVCS_Tables.c	/^const BiquadA012B12CoefsSP_t LVCS_ReverbCoefTable[] = {$/;"	v
LVCS_ReverbGenerator	lvm/StereoWidening/src/LVCS_ReverbGenerator.c	/^LVCS_ReturnStatus_en LVCS_ReverbGenerator(LVCS_Handle_t         hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVCS_ReverbGenerator	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^LVCS_ReturnStatus_en LVCS_ReverbGenerator(LVCS_Handle_t         hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, const LVM_INT16 *pInput, LVM_INT16 *pOutput, LVM_UINT16 NumSamples)
LVCS_ReverbGeneratorInit	lvm/StereoWidening/src/LVCS_ReverbGenerator.c	/^LVCS_ReturnStatus_en LVCS_ReverbGeneratorInit(LVCS_Handle_t     hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_ReverbGeneratorInit	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^LVCS_ReturnStatus_en LVCS_ReverbGeneratorInit(LVCS_Handle_t     hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_ReverbGenerator_t	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^} LVCS_ReverbGenerator_t;$/;"	t	typeref:struct:__anon107
LVCS_SCRATCH	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_SCRATCH        = 0,$/;"	e	enum:__anon98
LVCS_SCRATCHBUFFERS	lvm/StereoWidening/src/LVCS_Private.h	63;"	d
LVCS_SEMidCoefTable	lvm/StereoWidening/src/LVCS_Tables.c	/^const BiquadA01B1CoefsSP_t LVCS_SEMidCoefTable[] = {$/;"	v
LVCS_SESideCoefTable	lvm/StereoWidening/src/LVCS_Tables.c	/^const BiquadA012B12CoefsSP_t LVCS_SESideCoefTable[] = {$/;"	v
LVCS_SEnhancerInit	lvm/StereoWidening/src/LVCS_StereoEnhancer.c	/^LVCS_ReturnStatus_en LVCS_SEnhancerInit(LVCS_Handle_t       hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_SEnhancerInit	lvm/StereoWidening/src/LVCS_StereoEnhancer.h	/^LVCS_ReturnStatus_en LVCS_SEnhancerInit(LVCS_Handle_t        hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, LVCS_Params_t *pParams)
LVCS_SOURCEMAX	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_SOURCEMAX    = LVM_MAXENUM$/;"	e	enum:__anon100
LVCS_SPEAKERTYPE_MAX	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_SPEAKERTYPE_MAX        = LVM_MAXENUM$/;"	e	enum:__anon101
LVCS_STATUSMAX	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_STATUSMAX      = LVM_MAXENUM$/;"	e	enum:__anon99
LVCS_STEREO	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_STEREO       = 0,$/;"	e	enum:__anon100
LVCS_STEREODELAY_CS_11KHZ	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	163;"	d
LVCS_STEREODELAY_CS_12KHZ	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	164;"	d
LVCS_STEREODELAY_CS_16KHZ	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	165;"	d
LVCS_STEREODELAY_CS_22KHZ	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	166;"	d
LVCS_STEREODELAY_CS_24KHZ	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	167;"	d
LVCS_STEREODELAY_CS_32KHZ	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	168;"	d
LVCS_STEREODELAY_CS_44KHZ	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	169;"	d
LVCS_STEREODELAY_CS_48KHZ	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	170;"	d
LVCS_STEREODELAY_CS_8KHZ	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	162;"	d
LVCS_STEREOENHANCESWITCH	lvm/StereoWidening/src/LVCS_Private.h	56;"	d
LVCS_SUCCESS	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_SUCCESS        = 0,                        \/* Successful return from a routine *\/$/;"	e	enum:__anon99
LVCS_SampleRateTable	lvm/StereoWidening/src/LVCS_Tables.c	/^const LVM_INT32   LVCS_SampleRateTable[9] = {8000,$/;"	v
LVCS_SourceFormat_en	lvm/StereoWidening/lib/LVCS.h	/^} LVCS_SourceFormat_en;$/;"	t	typeref:enum:__anon100
LVCS_SpeakerType_en	lvm/StereoWidening/lib/LVCS.h	/^} LVCS_SpeakerType_en;$/;"	t	typeref:enum:__anon101
LVCS_StereoDelayCS	lvm/StereoWidening/src/LVCS_Tables.c	/^const LVM_UINT16    LVCS_StereoDelayCS[] = {$/;"	v
LVCS_StereoEnhancer	lvm/StereoWidening/src/LVCS_StereoEnhancer.c	/^LVCS_ReturnStatus_en LVCS_StereoEnhancer(LVCS_Handle_t          hInstance,$/;"	f	signature:(LVCS_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVCS_StereoEnhancer	lvm/StereoWidening/src/LVCS_StereoEnhancer.h	/^LVCS_ReturnStatus_en LVCS_StereoEnhancer(LVCS_Handle_t        hInstance,$/;"	p	signature:(LVCS_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVCS_StereoEnhancer_t	lvm/StereoWidening/src/LVCS_StereoEnhancer.h	/^} LVCS_StereoEnhancer_t;$/;"	t	typeref:struct:__anon109
LVCS_TOOMANYSAMPLES	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_TOOMANYSAMPLES = 3,                        \/* Maximum block size exceeded *\/$/;"	e	enum:__anon99
LVCS_TimerCallBack	lvm/StereoWidening/src/LVCS_Control.c	/^void LVCS_TimerCallBack (void* hInstance, void* pCallBackParams, LVM_INT32 CallbackParam)$/;"	f	signature:(void* hInstance, void* pCallBackParams, LVM_INT32 CallbackParam)
LVCS_TimerCallBack	lvm/StereoWidening/src/LVCS_Private.h	/^void LVCS_TimerCallBack (   void* hInstance,$/;"	p	signature:( void* hInstance, void* pCallBackParams, LVM_INT32 CallbackParam)
LVCS_VOL_TC_Fs11025	lvm/StereoWidening/src/LVCS_Tables.c	413;"	d	file:
LVCS_VOL_TC_Fs12000	lvm/StereoWidening/src/LVCS_Tables.c	414;"	d	file:
LVCS_VOL_TC_Fs16000	lvm/StereoWidening/src/LVCS_Tables.c	415;"	d	file:
LVCS_VOL_TC_Fs22050	lvm/StereoWidening/src/LVCS_Tables.c	416;"	d	file:
LVCS_VOL_TC_Fs24000	lvm/StereoWidening/src/LVCS_Tables.c	417;"	d	file:
LVCS_VOL_TC_Fs32000	lvm/StereoWidening/src/LVCS_Tables.c	418;"	d	file:
LVCS_VOL_TC_Fs44100	lvm/StereoWidening/src/LVCS_Tables.c	419;"	d	file:
LVCS_VOL_TC_Fs48000	lvm/StereoWidening/src/LVCS_Tables.c	420;"	d	file:
LVCS_VOL_TC_Fs8000	lvm/StereoWidening/src/LVCS_Tables.c	412;"	d	file:
LVCS_VolCorrectTable	lvm/StereoWidening/src/LVCS_Tables.c	/^const LVCS_VolCorrect_t LVCS_VolCorrectTable[] = {$/;"	v
LVCS_VolCorrect_t	lvm/StereoWidening/src/LVCS_Private.h	/^} LVCS_VolCorrect_t;$/;"	t	typeref:struct:__anon113
LVCS_VolumeTCTable	lvm/StereoWidening/src/LVCS_Tables.c	/^const LVM_INT16 LVCS_VolumeTCTable[9] = {LVCS_VOL_TC_Fs8000,$/;"	v
LVC_Core_MixHard_1St_2i_D16C31_SAT	lvm/Common/src/LVC_Core_MixHard_1St_2i_D16C31_SAT.c	/^void LVC_Core_MixHard_1St_2i_D16C31_SAT( LVMixer3_st        *ptrInstance1,$/;"	f	signature:( LVMixer3_st *ptrInstance1, LVMixer3_st *ptrInstance2, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_Core_MixHard_1St_2i_D16C31_SAT	lvm/Common/src/LVC_Mixer_Private.h	/^void LVC_Core_MixHard_1St_2i_D16C31_SAT( LVMixer3_st        *ptrInstance1,$/;"	p	signature:( LVMixer3_st *ptrInstance1, LVMixer3_st *ptrInstance2, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_Core_MixHard_2St_D16C31_SAT	lvm/Common/src/LVC_Core_MixHard_2St_D16C31_SAT.c	/^void LVC_Core_MixHard_2St_D16C31_SAT( LVMixer3_st *ptrInstance1,$/;"	f	signature:( LVMixer3_st *ptrInstance1, LVMixer3_st *ptrInstance2, const LVM_INT16 *src1, const LVM_INT16 *src2, LVM_INT16 *dst, LVM_INT16 n)
LVC_Core_MixHard_2St_D16C31_SAT	lvm/Common/src/LVC_Mixer_Private.h	/^void LVC_Core_MixHard_2St_D16C31_SAT( LVMixer3_st *pInstance1,$/;"	p	signature:( LVMixer3_st *pInstance1, LVMixer3_st *pInstance2, const LVM_INT16 *src1, const LVM_INT16 *src2, LVM_INT16 *dst, LVM_INT16 n)
LVC_Core_MixHard_2St_D32C31_SAT	lvm/Common/src/LVC_Mixer_Private.h	/^void LVC_Core_MixHard_2St_D32C31_SAT( LVMixer3_st *pInstance1,$/;"	p	signature:( LVMixer3_st *pInstance1, LVMixer3_st *pInstance2, const LVM_INT32 *src1, const LVM_INT32 *src2, LVM_INT32 *dst, LVM_INT16 n)
LVC_Core_MixInSoft_D16C31_SAT	lvm/Common/src/LVC_Core_MixInSoft_D16C31_SAT.c	/^void LVC_Core_MixInSoft_D16C31_SAT( LVMixer3_st *ptrInstance,$/;"	f	signature:( LVMixer3_st *ptrInstance, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_Core_MixInSoft_D16C31_SAT	lvm/Common/src/LVC_Mixer_Private.h	/^void LVC_Core_MixInSoft_D16C31_SAT( LVMixer3_st *pInstance,$/;"	p	signature:( LVMixer3_st *pInstance, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_Core_MixInSoft_D32C31_SAT	lvm/Common/src/LVC_Mixer_Private.h	/^void LVC_Core_MixInSoft_D32C31_SAT( LVMixer3_st *pInstance,$/;"	p	signature:( LVMixer3_st *pInstance, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
LVC_Core_MixSoft_1St_2i_D16C31_WRA	lvm/Common/src/LVC_Core_MixSoft_1St_2i_D16C31_WRA.c	/^void LVC_Core_MixSoft_1St_2i_D16C31_WRA( LVMixer3_st        *ptrInstance1,$/;"	f	signature:( LVMixer3_st *ptrInstance1, LVMixer3_st *ptrInstance2, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_Core_MixSoft_1St_2i_D16C31_WRA	lvm/Common/src/LVC_Mixer_Private.h	/^void LVC_Core_MixSoft_1St_2i_D16C31_WRA( LVMixer3_st        *ptrInstance1,$/;"	p	signature:( LVMixer3_st *ptrInstance1, LVMixer3_st *ptrInstance2, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_Core_MixSoft_1St_D16C31_WRA	lvm/Common/src/LVC_Core_MixSoft_1St_D16C31_WRA.c	/^void LVC_Core_MixSoft_1St_D16C31_WRA( LVMixer3_st *ptrInstance,$/;"	f	signature:( LVMixer3_st *ptrInstance, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_Core_MixSoft_1St_D16C31_WRA	lvm/Common/src/LVC_Mixer_Private.h	/^void LVC_Core_MixSoft_1St_D16C31_WRA( LVMixer3_st *pInstance,$/;"	p	signature:( LVMixer3_st *pInstance, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_Core_MixSoft_1St_D32C31_WRA	lvm/Common/src/LVC_Mixer_Private.h	/^void LVC_Core_MixSoft_1St_D32C31_WRA( LVMixer3_st *pInstance,$/;"	p	signature:( LVMixer3_st *pInstance, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
LVC_MixInSoft_D16C31_SAT	lvm/Common/src/LVC_MixInSoft_D16C31_SAT.c	/^void LVC_MixInSoft_D16C31_SAT( LVMixer3_1St_st *ptrInstance,$/;"	f	signature:( LVMixer3_1St_st *ptrInstance, LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_MixInSoft_D16C31_SAT	lvm/Common/src/LVC_Mixer.h	/^void LVC_MixInSoft_D16C31_SAT( LVMixer3_1St_st *pInstance,$/;"	p	signature:( LVMixer3_1St_st *pInstance, LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_MixSoft_1St_2i_D16C31_SAT	lvm/Common/src/LVC_MixSoft_1St_2i_D16C31_SAT.c	/^void LVC_MixSoft_1St_2i_D16C31_SAT( LVMixer3_2St_st *ptrInstance,$/;"	f	signature:( LVMixer3_2St_st *ptrInstance, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_MixSoft_1St_2i_D16C31_SAT	lvm/Common/src/LVC_Mixer.h	/^void LVC_MixSoft_1St_2i_D16C31_SAT( LVMixer3_2St_st         *pInstance,$/;"	p	signature:( LVMixer3_2St_st *pInstance, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_MixSoft_1St_D16C31_SAT	lvm/Common/src/LVC_MixSoft_1St_D16C31_SAT.c	/^void LVC_MixSoft_1St_D16C31_SAT( LVMixer3_1St_st *ptrInstance,$/;"	f	signature:( LVMixer3_1St_st *ptrInstance, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_MixSoft_1St_D16C31_SAT	lvm/Common/src/LVC_Mixer.h	/^void LVC_MixSoft_1St_D16C31_SAT( LVMixer3_1St_st *pInstance,$/;"	p	signature:( LVMixer3_1St_st *pInstance, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
LVC_MixSoft_2St_D16C31_SAT	lvm/Common/src/LVC_MixSoft_2St_D16C31_SAT.c	/^void LVC_MixSoft_2St_D16C31_SAT( LVMixer3_2St_st *ptrInstance,$/;"	f	signature:( LVMixer3_2St_st *ptrInstance, const LVM_INT16 *src1, LVM_INT16 *src2, LVM_INT16 *dst, LVM_INT16 n)
LVC_MixSoft_2St_D16C31_SAT	lvm/Common/src/LVC_Mixer.h	/^void LVC_MixSoft_2St_D16C31_SAT( LVMixer3_2St_st *pInstance,$/;"	p	signature:( LVMixer3_2St_st *pInstance, const LVM_INT16 *src1, LVM_INT16 *src2, LVM_INT16 *dst, LVM_INT16 n)
LVC_Mixer_GetCurrent	lvm/Common/src/LVC_Mixer.h	/^LVM_INT32 LVC_Mixer_GetCurrent( LVMixer3_st *pStream);$/;"	p	signature:( LVMixer3_st *pStream)
LVC_Mixer_GetCurrent	lvm/Common/src/LVC_Mixer_GetCurrent.c	/^LVM_INT32 LVC_Mixer_GetCurrent( LVMixer3_st *pStream)$/;"	f	signature:( LVMixer3_st *pStream)
LVC_Mixer_GetTarget	lvm/Common/src/LVC_Mixer.h	/^LVM_INT32 LVC_Mixer_GetTarget( LVMixer3_st *pStream);$/;"	p	signature:( LVMixer3_st *pStream)
LVC_Mixer_GetTarget	lvm/Common/src/LVC_Mixer_GetTarget.c	/^LVM_INT32 LVC_Mixer_GetTarget( LVMixer3_st *pStream)$/;"	f	signature:( LVMixer3_st *pStream)
LVC_Mixer_Init	lvm/Common/src/LVC_Mixer.h	/^void LVC_Mixer_Init( LVMixer3_st *pStream,$/;"	p	signature:( LVMixer3_st *pStream, LVM_INT32 TargetGain, LVM_INT32 CurrentGain)
LVC_Mixer_Init	lvm/Common/src/LVC_Mixer_Init.c	/^void LVC_Mixer_Init( LVMixer3_st *pStream,$/;"	f	signature:( LVMixer3_st *pStream, LVM_INT32 TargetGain, LVM_INT32 CurrentGain)
LVC_Mixer_SetTarget	lvm/Common/src/LVC_Mixer.h	/^void LVC_Mixer_SetTarget( LVMixer3_st *pStream,$/;"	p	signature:( LVMixer3_st *pStream, LVM_INT32 TargetGain)
LVC_Mixer_SetTarget	lvm/Common/src/LVC_Mixer_SetTarget.c	/^void LVC_Mixer_SetTarget(LVMixer3_st *pStream,$/;"	f	signature:(LVMixer3_st *pStream, LVM_INT32 TargetGain)
LVC_Mixer_SetTimeConstant	lvm/Common/src/LVC_Mixer.h	/^void LVC_Mixer_SetTimeConstant( LVMixer3_st *pStream,$/;"	p	signature:( LVMixer3_st *pStream, LVM_INT32 Tc_millisec, LVM_Fs_en Fs, LVM_INT16 NumChannels)
LVC_Mixer_SetTimeConstant	lvm/Common/src/LVC_Mixer_SetTimeConstant.c	/^void LVC_Mixer_SetTimeConstant(LVMixer3_st *pStream,$/;"	f	signature:(LVMixer3_st *pStream, LVM_INT32 Tc_millisec, LVM_Fs_en Fs, LVM_INT16 NumChannels)
LVC_Mixer_VarSlope_SetTimeConstant	lvm/Common/src/LVC_Mixer.h	/^void LVC_Mixer_VarSlope_SetTimeConstant( LVMixer3_st *pStream,$/;"	p	signature:( LVMixer3_st *pStream, LVM_INT32 Tc_millisec, LVM_Fs_en Fs, LVM_INT16 NumChannels)
LVC_Mixer_VarSlope_SetTimeConstant	lvm/Common/src/LVC_Mixer_VarSlope_SetTimeConstant.c	/^void LVC_Mixer_VarSlope_SetTimeConstant( LVMixer3_st *pStream,$/;"	f	signature:( LVMixer3_st *pStream, LVM_INT32 Tc_millisec, LVM_Fs_en Fs, LVM_INT16 NumChannels)
LVCore_MixHard_2St_D32C31_SAT	lvm/Common/src/LVC_Mixer_Private.h	45;"	d
LVCore_MixInSoft_D32C31_SAT	lvm/Common/src/LVC_Mixer_Private.h	43;"	d
LVCore_MixSoft_1St_D32C31_WRA	lvm/Common/src/LVC_Mixer_Private.h	44;"	d
LVDBE_AGC_ATTACK_Table	lvm/Bass/src/LVDBE_Tables.c	/^const LVM_INT16 LVDBE_AGC_ATTACK_Table[] = {$/;"	v
LVDBE_AGC_DECAY_Table	lvm/Bass/src/LVDBE_Tables.c	/^const LVM_INT16 LVDBE_AGC_DECAY_Table[] = {$/;"	v
LVDBE_AGC_GAIN_Table	lvm/Bass/src/LVDBE_Tables.c	/^const LVM_INT32 LVDBE_AGC_GAIN_Table[] = {$/;"	v
LVDBE_AGC_HPFGAIN_Table	lvm/Bass/src/LVDBE_Tables.c	/^const LVM_INT32 LVDBE_AGC_HPFGAIN_Table[] = {$/;"	v
LVDBE_ALIGNMENTERROR	lvm/Bass/lib/LVDBE.h	/^    LVDBE_ALIGNMENTERROR = 1,                        \/* Memory alignment error *\/$/;"	e	enum:__anon5
LVDBE_BPF_Table	lvm/Bass/src/LVDBE_Tables.c	/^const BP_C32_Coefs_t LVDBE_BPF_Table[] = {$/;"	v
LVDBE_BYPASS_MIXER_TC	lvm/Bass/src/LVDBE_Private.h	70;"	d
LVDBE_CAP_CENTRE_55Hz	lvm/Bass/lib/LVDBE.h	174;"	d
LVDBE_CAP_CENTRE_66Hz	lvm/Bass/lib/LVDBE.h	175;"	d
LVDBE_CAP_CENTRE_78Hz	lvm/Bass/lib/LVDBE.h	176;"	d
LVDBE_CAP_CENTRE_90Hz	lvm/Bass/lib/LVDBE.h	177;"	d
LVDBE_CAP_FS_11025	lvm/Bass/lib/LVDBE.h	193;"	d
LVDBE_CAP_FS_12000	lvm/Bass/lib/LVDBE.h	194;"	d
LVDBE_CAP_FS_16000	lvm/Bass/lib/LVDBE.h	195;"	d
LVDBE_CAP_FS_22050	lvm/Bass/lib/LVDBE.h	196;"	d
LVDBE_CAP_FS_24000	lvm/Bass/lib/LVDBE.h	197;"	d
LVDBE_CAP_FS_32000	lvm/Bass/lib/LVDBE.h	198;"	d
LVDBE_CAP_FS_44100	lvm/Bass/lib/LVDBE.h	199;"	d
LVDBE_CAP_FS_48000	lvm/Bass/lib/LVDBE.h	200;"	d
LVDBE_CAP_FS_8000	lvm/Bass/lib/LVDBE.h	192;"	d
LVDBE_CENTRE_55HZ	lvm/Bass/lib/LVDBE.h	/^    LVDBE_CENTRE_55HZ = 0,$/;"	e	enum:__anon6
LVDBE_CENTRE_66HZ	lvm/Bass/lib/LVDBE.h	/^    LVDBE_CENTRE_66HZ = 1,$/;"	e	enum:__anon6
LVDBE_CENTRE_78HZ	lvm/Bass/lib/LVDBE.h	/^    LVDBE_CENTRE_78HZ = 2,$/;"	e	enum:__anon6
LVDBE_CENTRE_90HZ	lvm/Bass/lib/LVDBE.h	/^    LVDBE_CENTRE_90HZ = 3,$/;"	e	enum:__anon6
LVDBE_CENTRE_MAX	lvm/Bass/lib/LVDBE.h	/^    LVDBE_CENTRE_MAX  = LVM_MAXINT_32$/;"	e	enum:__anon6
LVDBE_Capabilities_t	lvm/Bass/lib/LVDBE.h	/^} LVDBE_Capabilities_t;$/;"	t	typeref:struct:__anon11
LVDBE_CentreFreq_en	lvm/Bass/lib/LVDBE.h	/^} LVDBE_CentreFreq_en;$/;"	t	typeref:enum:__anon6
LVDBE_Coef_t	lvm/Bass/src/LVDBE_Private.h	/^} LVDBE_Coef_t;$/;"	t	typeref:struct:__anon13
LVDBE_Control	lvm/Bass/lib/LVDBE.h	/^LVDBE_ReturnStatus_en LVDBE_Control(LVDBE_Handle_t      hInstance,$/;"	p	signature:(LVDBE_Handle_t hInstance, LVDBE_Params_t *pParams)
LVDBE_Control	lvm/Bass/src/LVDBE_Control.c	/^LVDBE_ReturnStatus_en LVDBE_Control(LVDBE_Handle_t         hInstance,$/;"	f	signature:(LVDBE_Handle_t hInstance, LVDBE_Params_t *pParams)
LVDBE_Data_t	lvm/Bass/src/LVDBE_Private.h	/^} LVDBE_Data_t;$/;"	t	typeref:struct:__anon12
LVDBE_EFFECT_03DB	lvm/Bass/lib/LVDBE.h	82;"	d
LVDBE_EFFECT_06DB	lvm/Bass/lib/LVDBE.h	83;"	d
LVDBE_EFFECT_09DB	lvm/Bass/lib/LVDBE.h	84;"	d
LVDBE_EFFECT_12DB	lvm/Bass/lib/LVDBE.h	85;"	d
LVDBE_EFFECT_15DB	lvm/Bass/lib/LVDBE.h	86;"	d
LVDBE_FS_11025	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FS_11025 = 1,$/;"	e	enum:__anon7
LVDBE_FS_12000	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FS_12000 = 2,$/;"	e	enum:__anon7
LVDBE_FS_16000	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FS_16000 = 3,$/;"	e	enum:__anon7
LVDBE_FS_22050	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FS_22050 = 4,$/;"	e	enum:__anon7
LVDBE_FS_24000	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FS_24000 = 5,$/;"	e	enum:__anon7
LVDBE_FS_32000	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FS_32000 = 6,$/;"	e	enum:__anon7
LVDBE_FS_44100	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FS_44100 = 7,$/;"	e	enum:__anon7
LVDBE_FS_48000	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FS_48000 = 8,$/;"	e	enum:__anon7
LVDBE_FS_8000	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FS_8000  = 0,$/;"	e	enum:__anon7
LVDBE_FS_MAX	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FS_MAX   = LVM_MAXINT_32$/;"	e	enum:__anon7
LVDBE_FilterSelect_en	lvm/Bass/lib/LVDBE.h	/^} LVDBE_FilterSelect_en;$/;"	t	typeref:enum:__anon2
LVDBE_Fs_en	lvm/Bass/lib/LVDBE.h	/^} LVDBE_Fs_en;$/;"	t	typeref:enum:__anon7
LVDBE_GetCapabilities	lvm/Bass/lib/LVDBE.h	/^LVDBE_ReturnStatus_en LVDBE_GetCapabilities(LVDBE_Handle_t            hInstance,$/;"	p	signature:(LVDBE_Handle_t hInstance, LVDBE_Capabilities_t *pCapabilities)
LVDBE_GetCapabilities	lvm/Bass/src/LVDBE_Control.c	/^LVDBE_ReturnStatus_en LVDBE_GetCapabilities(LVDBE_Handle_t            hInstance,$/;"	f	signature:(LVDBE_Handle_t hInstance, LVDBE_Capabilities_t *pCapabilities)
LVDBE_GetParameters	lvm/Bass/lib/LVDBE.h	/^LVDBE_ReturnStatus_en LVDBE_GetParameters(LVDBE_Handle_t        hInstance,$/;"	p	signature:(LVDBE_Handle_t hInstance, LVDBE_Params_t *pParams)
LVDBE_GetParameters	lvm/Bass/src/LVDBE_Control.c	/^LVDBE_ReturnStatus_en LVDBE_GetParameters(LVDBE_Handle_t        hInstance,$/;"	f	signature:(LVDBE_Handle_t hInstance, LVDBE_Params_t *pParams)
LVDBE_HPF_MAX	lvm/Bass/lib/LVDBE.h	/^    LVDBE_HPF_MAX = LVM_MAXINT_32$/;"	e	enum:__anon2
LVDBE_HPF_OFF	lvm/Bass/lib/LVDBE.h	/^    LVDBE_HPF_OFF = 0,$/;"	e	enum:__anon2
LVDBE_HPF_ON	lvm/Bass/lib/LVDBE.h	/^    LVDBE_HPF_ON  = 1,$/;"	e	enum:__anon2
LVDBE_HPF_Table	lvm/Bass/src/LVDBE_Tables.c	/^const BQ_C32_Coefs_t LVDBE_HPF_Table[] = {$/;"	v
LVDBE_Handle_t	lvm/Bass/lib/LVDBE.h	/^typedef void    *LVDBE_Handle_t;$/;"	t
LVDBE_INSTANCE_ALIGN	lvm/Bass/src/LVDBE_Private.h	62;"	d
LVDBE_INVALID	lvm/Bass/src/LVDBE_Private.h	54;"	d
LVDBE_Init	lvm/Bass/lib/LVDBE.h	/^LVDBE_ReturnStatus_en LVDBE_Init(LVDBE_Handle_t             *phInstance,$/;"	p	signature:(LVDBE_Handle_t *phInstance, LVDBE_MemTab_t *pMemoryTable, LVDBE_Capabilities_t *pCapabilities)
LVDBE_Init	lvm/Bass/src/LVDBE_Init.c	/^LVDBE_ReturnStatus_en LVDBE_Init(LVDBE_Handle_t         *phInstance,$/;"	f	signature:(LVDBE_Handle_t *phInstance, LVDBE_MemTab_t *pMemoryTable, LVDBE_Capabilities_t *pCapabilities)
LVDBE_Instance_t	lvm/Bass/src/LVDBE_Private.h	/^} LVDBE_Instance_t;$/;"	t	typeref:struct:__anon14
LVDBE_MEMORY_MAX	lvm/Bass/lib/LVDBE.h	/^    LVDBE_MEMORY_MAX      = LVM_MAXINT_32$/;"	e	enum:__anon4
LVDBE_MEMREGION_INSTANCE	lvm/Bass/src/LVDBE_Private.h	57;"	d
LVDBE_MEMREGION_PERSISTENT_COEF	lvm/Bass/src/LVDBE_Private.h	59;"	d
LVDBE_MEMREGION_PERSISTENT_DATA	lvm/Bass/src/LVDBE_Private.h	58;"	d
LVDBE_MEMREGION_SCRATCH	lvm/Bass/src/LVDBE_Private.h	60;"	d
LVDBE_MIXER_TC	lvm/Bass/src/LVDBE_Private.h	69;"	d
LVDBE_MODE_MAX	lvm/Bass/lib/LVDBE.h	/^    LVDBE_MODE_MAX = LVM_MAXINT_32$/;"	e	enum:__anon1
LVDBE_MemTab_t	lvm/Bass/lib/LVDBE.h	/^} LVDBE_MemTab_t;$/;"	t	typeref:struct:__anon9
LVDBE_Memory	lvm/Bass/lib/LVDBE.h	/^LVDBE_ReturnStatus_en LVDBE_Memory(LVDBE_Handle_t           hInstance,$/;"	p	signature:(LVDBE_Handle_t hInstance, LVDBE_MemTab_t *pMemoryTable, LVDBE_Capabilities_t *pCapabilities)
LVDBE_Memory	lvm/Bass/src/LVDBE_Init.c	/^LVDBE_ReturnStatus_en LVDBE_Memory(LVDBE_Handle_t            hInstance,$/;"	f	signature:(LVDBE_Handle_t hInstance, LVDBE_MemTab_t *pMemoryTable, LVDBE_Capabilities_t *pCapabilities)
LVDBE_MemoryRegion_t	lvm/Bass/lib/LVDBE.h	/^} LVDBE_MemoryRegion_t;$/;"	t	typeref:struct:__anon8
LVDBE_MemoryTypes_en	lvm/Bass/lib/LVDBE.h	/^} LVDBE_MemoryTypes_en;$/;"	t	typeref:enum:__anon4
LVDBE_MixerTCTable	lvm/Bass/src/LVDBE_Tables.c	/^const LVM_INT16 LVDBE_MixerTCTable[] = {$/;"	v
LVDBE_Mode_en	lvm/Bass/lib/LVDBE.h	/^} LVDBE_Mode_en;$/;"	t	typeref:enum:__anon1
LVDBE_NR_MEMORY_REGIONS	lvm/Bass/lib/LVDBE.h	79;"	d
LVDBE_NULLADDRESS	lvm/Bass/lib/LVDBE.h	/^    LVDBE_NULLADDRESS    = 2,                        \/* NULL allocation address *\/$/;"	e	enum:__anon5
LVDBE_OFF	lvm/Bass/lib/LVDBE.h	/^    LVDBE_OFF      = 0,$/;"	e	enum:__anon1
LVDBE_ON	lvm/Bass/lib/LVDBE.h	/^    LVDBE_ON       = 1,$/;"	e	enum:__anon1
LVDBE_PERSISTENT	lvm/Bass/lib/LVDBE.h	/^    LVDBE_PERSISTENT      = 0,$/;"	e	enum:__anon4
LVDBE_PERSISTENT_COEF	lvm/Bass/lib/LVDBE.h	/^    LVDBE_PERSISTENT_COEF = 2,$/;"	e	enum:__anon4
LVDBE_PERSISTENT_COEF_ALIGN	lvm/Bass/src/LVDBE_Private.h	64;"	d
LVDBE_PERSISTENT_DATA	lvm/Bass/lib/LVDBE.h	/^    LVDBE_PERSISTENT_DATA = 1,$/;"	e	enum:__anon4
LVDBE_PERSISTENT_DATA_ALIGN	lvm/Bass/src/LVDBE_Private.h	63;"	d
LVDBE_Params_t	lvm/Bass/lib/LVDBE.h	/^} LVDBE_Params_t;$/;"	t	typeref:struct:__anon10
LVDBE_Process	lvm/Bass/lib/LVDBE.h	/^LVDBE_ReturnStatus_en LVDBE_Process(LVDBE_Handle_t          hInstance,$/;"	p	signature:(LVDBE_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVDBE_Process	lvm/Bass/src/LVDBE_Process.c	/^LVDBE_ReturnStatus_en LVDBE_Process(LVDBE_Handle_t            hInstance,$/;"	f	signature:(LVDBE_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVDBE_ReturnStatus_en	lvm/Bass/lib/LVDBE.h	/^} LVDBE_ReturnStatus_en;$/;"	t	typeref:enum:__anon5
LVDBE_SCALESHIFT	lvm/Bass/src/LVDBE_Coeffs.h	28;"	d
LVDBE_SCRATCH	lvm/Bass/lib/LVDBE.h	/^    LVDBE_SCRATCH         = 3,$/;"	e	enum:__anon4
LVDBE_SCRATCHBUFFERS_INPLACE	lvm/Bass/src/LVDBE_Private.h	67;"	d
LVDBE_SCRATCH_ALIGN	lvm/Bass/src/LVDBE_Private.h	65;"	d
LVDBE_SIZEERROR	lvm/Bass/lib/LVDBE.h	/^    LVDBE_SIZEERROR      = 4,                        \/* Incorrect structure size *\/$/;"	e	enum:__anon5
LVDBE_STATUS_MAX	lvm/Bass/lib/LVDBE.h	/^    LVDBE_STATUS_MAX     = LVM_MAXINT_32$/;"	e	enum:__anon5
LVDBE_SUCCESS	lvm/Bass/lib/LVDBE.h	/^    LVDBE_SUCCESS        = 0,                        \/* Successful return from a routine *\/$/;"	e	enum:__anon5
LVDBE_SetAGC	lvm/Bass/src/LVDBE_Control.c	/^void    LVDBE_SetAGC(LVDBE_Instance_t     *pInstance,$/;"	f	signature:(LVDBE_Instance_t *pInstance, LVDBE_Params_t *pParams)
LVDBE_SetAGC	lvm/Bass/src/LVDBE_Private.h	/^void    LVDBE_SetAGC(LVDBE_Instance_t       *pInstance,$/;"	p	signature:(LVDBE_Instance_t *pInstance, LVDBE_Params_t *pParams)
LVDBE_SetFilters	lvm/Bass/src/LVDBE_Control.c	/^void    LVDBE_SetFilters(LVDBE_Instance_t     *pInstance,$/;"	f	signature:(LVDBE_Instance_t *pInstance, LVDBE_Params_t *pParams)
LVDBE_SetFilters	lvm/Bass/src/LVDBE_Private.h	/^void    LVDBE_SetFilters(LVDBE_Instance_t   *pInstance,$/;"	p	signature:(LVDBE_Instance_t *pInstance, LVDBE_Params_t *pParams)
LVDBE_SetVolume	lvm/Bass/src/LVDBE_Control.c	/^void    LVDBE_SetVolume(LVDBE_Instance_t     *pInstance,$/;"	f	signature:(LVDBE_Instance_t *pInstance, LVDBE_Params_t *pParams)
LVDBE_SetVolume	lvm/Bass/src/LVDBE_Private.h	/^void    LVDBE_SetVolume(LVDBE_Instance_t    *pInstance,$/;"	p	signature:(LVDBE_Instance_t *pInstance, LVDBE_Params_t *pParams)
LVDBE_TOOMANYSAMPLES	lvm/Bass/lib/LVDBE.h	/^    LVDBE_TOOMANYSAMPLES = 3,                        \/* Maximum block size exceeded *\/$/;"	e	enum:__anon5
LVDBE_VOLUME_MAX	lvm/Bass/lib/LVDBE.h	/^    LVDBE_VOLUME_MAX = LVM_MAXINT_32$/;"	e	enum:__anon3
LVDBE_VOLUME_OFF	lvm/Bass/lib/LVDBE.h	/^    LVDBE_VOLUME_OFF = 0,$/;"	e	enum:__anon3
LVDBE_VOLUME_ON	lvm/Bass/lib/LVDBE.h	/^    LVDBE_VOLUME_ON  = 1,$/;"	e	enum:__anon3
LVDBE_VolumeTCTable	lvm/Bass/src/LVDBE_Tables.c	/^const LVM_INT16 LVDBE_VolumeTCTable[] = {$/;"	v
LVDBE_VolumeTable	lvm/Bass/src/LVDBE_Tables.c	/^const LVM_INT16 LVDBE_VolumeTable[] = {$/;"	v
LVDBE_Volume_en	lvm/Bass/lib/LVDBE.h	/^} LVDBE_Volume_en;$/;"	t	typeref:enum:__anon3
LVEQNB_100DSHIFT	lvm/Eq/src/LVEQNB_Coeffs.h	87;"	d
LVEQNB_100D_0_dB	lvm/Eq/src/LVEQNB_Coeffs.h	103;"	d
LVEQNB_100D_Neg10_dB	lvm/Eq/src/LVEQNB_Coeffs.h	93;"	d
LVEQNB_100D_Neg11_dB	lvm/Eq/src/LVEQNB_Coeffs.h	92;"	d
LVEQNB_100D_Neg12_dB	lvm/Eq/src/LVEQNB_Coeffs.h	91;"	d
LVEQNB_100D_Neg13_dB	lvm/Eq/src/LVEQNB_Coeffs.h	90;"	d
LVEQNB_100D_Neg14_dB	lvm/Eq/src/LVEQNB_Coeffs.h	89;"	d
LVEQNB_100D_Neg15_dB	lvm/Eq/src/LVEQNB_Coeffs.h	88;"	d
LVEQNB_100D_Neg1_dB	lvm/Eq/src/LVEQNB_Coeffs.h	102;"	d
LVEQNB_100D_Neg2_dB	lvm/Eq/src/LVEQNB_Coeffs.h	101;"	d
LVEQNB_100D_Neg3_dB	lvm/Eq/src/LVEQNB_Coeffs.h	100;"	d
LVEQNB_100D_Neg4_dB	lvm/Eq/src/LVEQNB_Coeffs.h	99;"	d
LVEQNB_100D_Neg5_dB	lvm/Eq/src/LVEQNB_Coeffs.h	98;"	d
LVEQNB_100D_Neg6_dB	lvm/Eq/src/LVEQNB_Coeffs.h	97;"	d
LVEQNB_100D_Neg7_dB	lvm/Eq/src/LVEQNB_Coeffs.h	96;"	d
LVEQNB_100D_Neg8_dB	lvm/Eq/src/LVEQNB_Coeffs.h	95;"	d
LVEQNB_100D_Neg9_dB	lvm/Eq/src/LVEQNB_Coeffs.h	94;"	d
LVEQNB_2PiOn_11025	lvm/Eq/src/LVEQNB_Coeffs.h	71;"	d
LVEQNB_2PiOn_12000	lvm/Eq/src/LVEQNB_Coeffs.h	72;"	d
LVEQNB_2PiOn_16000	lvm/Eq/src/LVEQNB_Coeffs.h	73;"	d
LVEQNB_2PiOn_22050	lvm/Eq/src/LVEQNB_Coeffs.h	74;"	d
LVEQNB_2PiOn_24000	lvm/Eq/src/LVEQNB_Coeffs.h	75;"	d
LVEQNB_2PiOn_32000	lvm/Eq/src/LVEQNB_Coeffs.h	76;"	d
LVEQNB_2PiOn_44100	lvm/Eq/src/LVEQNB_Coeffs.h	77;"	d
LVEQNB_2PiOn_48000	lvm/Eq/src/LVEQNB_Coeffs.h	78;"	d
LVEQNB_2PiOn_8000	lvm/Eq/src/LVEQNB_Coeffs.h	70;"	d
LVEQNB_ALIGNMENTERROR	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_ALIGNMENTERROR = 1,                          \/* Memory alignment error *\/$/;"	e	enum:__anon52
LVEQNB_BIQUADTYPE_MAX	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_BIQUADTYPE_MAX  = LVM_MAXINT_32$/;"	e	enum:__anon60
LVEQNB_BYPASS	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_BYPASS   = 0,$/;"	e	enum:__anon49
LVEQNB_BYPASS_MIXER_TC	lvm/Eq/src/LVEQNB_Private.h	52;"	d
LVEQNB_BandDef_t	lvm/Eq/lib/LVEQNB.h	/^} LVEQNB_BandDef_t;$/;"	t	typeref:struct:__anon57
LVEQNB_BiquadType_en	lvm/Eq/src/LVEQNB_Private.h	/^} LVEQNB_BiquadType_en;$/;"	t	typeref:enum:__anon60
LVEQNB_BypassMixerCallBack	lvm/Eq/src/LVEQNB_Control.c	/^LVM_INT32 LVEQNB_BypassMixerCallBack (void* hInstance,$/;"	f	signature:(void* hInstance, void *pGeneralPurpose, LVM_INT16 CallbackParam)
LVEQNB_BypassMixerCallBack	lvm/Eq/src/LVEQNB_Private.h	/^LVM_INT32 LVEQNB_BypassMixerCallBack (void* hInstance, void *pGeneralPurpose, LVM_INT16 CallbackParam);$/;"	p	signature:(void* hInstance, void *pGeneralPurpose, LVM_INT16 CallbackParam)
LVEQNB_CAP_FS_11025	lvm/Eq/lib/LVEQNB.h	195;"	d
LVEQNB_CAP_FS_12000	lvm/Eq/lib/LVEQNB.h	196;"	d
LVEQNB_CAP_FS_16000	lvm/Eq/lib/LVEQNB.h	197;"	d
LVEQNB_CAP_FS_22050	lvm/Eq/lib/LVEQNB.h	198;"	d
LVEQNB_CAP_FS_24000	lvm/Eq/lib/LVEQNB.h	199;"	d
LVEQNB_CAP_FS_32000	lvm/Eq/lib/LVEQNB.h	200;"	d
LVEQNB_CAP_FS_44100	lvm/Eq/lib/LVEQNB.h	201;"	d
LVEQNB_CAP_FS_48000	lvm/Eq/lib/LVEQNB.h	202;"	d
LVEQNB_CAP_FS_8000	lvm/Eq/lib/LVEQNB.h	194;"	d
LVEQNB_CAP_MONOINSTEREO	lvm/Eq/lib/LVEQNB.h	181;"	d
LVEQNB_CAP_STEREO	lvm/Eq/lib/LVEQNB.h	180;"	d
LVEQNB_COEF_ALIGN	lvm/Eq/src/LVEQNB_Private.h	48;"	d
LVEQNB_Capabilities_t	lvm/Eq/lib/LVEQNB.h	/^} LVEQNB_Capabilities_t;$/;"	t	typeref:struct:__anon59
LVEQNB_ClearFilterHistory	lvm/Eq/src/LVEQNB_Control.c	/^void    LVEQNB_ClearFilterHistory(LVEQNB_Instance_t     *pInstance)$/;"	f	signature:(LVEQNB_Instance_t *pInstance)
LVEQNB_ClearFilterHistory	lvm/Eq/src/LVEQNB_Private.h	/^void    LVEQNB_ClearFilterHistory(LVEQNB_Instance_t *pInstance);$/;"	p	signature:(LVEQNB_Instance_t *pInstance)
LVEQNB_Control	lvm/Eq/lib/LVEQNB.h	/^LVEQNB_ReturnStatus_en LVEQNB_Control(LVEQNB_Handle_t       hInstance,$/;"	p	signature:(LVEQNB_Handle_t hInstance, LVEQNB_Params_t *pParams)
LVEQNB_Control	lvm/Eq/src/LVEQNB_Control.c	/^LVEQNB_ReturnStatus_en LVEQNB_Control(LVEQNB_Handle_t        hInstance,$/;"	f	signature:(LVEQNB_Handle_t hInstance, LVEQNB_Params_t *pParams)
LVEQNB_CosCoef	lvm/Eq/src/LVEQNB_Tables.c	/^const LVM_INT16     LVEQNB_CosCoef[] = {3,                             \/* Shifts *\/$/;"	v
LVEQNB_DATA_ALIGN	lvm/Eq/src/LVEQNB_Private.h	47;"	d
LVEQNB_DPCosCoef	lvm/Eq/src/LVEQNB_Tables.c	/^const LVM_INT16     LVEQNB_DPCosCoef[] = {1,                           \/* Shifts *\/$/;"	v
LVEQNB_DTable	lvm/Eq/src/LVEQNB_Tables.c	/^const LVM_INT16    LVEQNB_DTable[] = {LVEQNB_100D_Neg15_dB,            \/* -15dB gain *\/$/;"	v
LVEQNB_DoublePrecCoefs	lvm/Eq/src/LVEQNB_CalcCoef.c	/^LVEQNB_ReturnStatus_en LVEQNB_DoublePrecCoefs(LVM_UINT16        Fs,$/;"	f	signature:(LVM_UINT16 Fs, LVEQNB_BandDef_t *pFilterDefinition, PK_C32_Coefs_t *pCoefficients)
LVEQNB_DoublePrecCoefs	lvm/Eq/src/LVEQNB_Private.h	/^LVEQNB_ReturnStatus_en LVEQNB_DoublePrecCoefs(LVM_UINT16        Fs,$/;"	p	signature:(LVM_UINT16 Fs, LVEQNB_BandDef_t *pFilterDefinition, PK_C32_Coefs_t *pCoefficients)
LVEQNB_DoublePrecision	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_DoublePrecision = 1,$/;"	e	enum:__anon60
LVEQNB_EVENT_ALGOFF	lvm/Eq/lib/LVEQNB.h	104;"	d
LVEQNB_EVENT_NONE	lvm/Eq/lib/LVEQNB.h	103;"	d
LVEQNB_FILTER_DUMMY	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FILTER_DUMMY = LVM_MAXINT_32$/;"	e	enum:__anon50
LVEQNB_FILTER_OFF	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FILTER_OFF   = 0,$/;"	e	enum:__anon50
LVEQNB_FILTER_ON	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FILTER_ON    = 1,$/;"	e	enum:__anon50
LVEQNB_FREQSHIFT	lvm/Eq/src/LVEQNB_Coeffs.h	69;"	d
LVEQNB_FS_11025	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FS_11025 = 1,$/;"	e	enum:__anon54
LVEQNB_FS_12000	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FS_12000 = 2,$/;"	e	enum:__anon54
LVEQNB_FS_16000	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FS_16000 = 3,$/;"	e	enum:__anon54
LVEQNB_FS_22050	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FS_22050 = 4,$/;"	e	enum:__anon54
LVEQNB_FS_24000	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FS_24000 = 5,$/;"	e	enum:__anon54
LVEQNB_FS_32000	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FS_32000 = 6,$/;"	e	enum:__anon54
LVEQNB_FS_44100	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FS_44100 = 7,$/;"	e	enum:__anon54
LVEQNB_FS_48000	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FS_48000 = 8,$/;"	e	enum:__anon54
LVEQNB_FS_8000	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FS_8000  = 0,$/;"	e	enum:__anon54
LVEQNB_FS_MAX	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_FS_MAX   = LVM_MAXINT_32$/;"	e	enum:__anon54
LVEQNB_FilterMode_en	lvm/Eq/lib/LVEQNB.h	/^} LVEQNB_FilterMode_en;$/;"	t	typeref:enum:__anon50
LVEQNB_Fs_en	lvm/Eq/lib/LVEQNB.h	/^} LVEQNB_Fs_en;$/;"	t	typeref:enum:__anon54
LVEQNB_GAINSHIFT	lvm/Eq/src/LVEQNB_Coeffs.h	29;"	d
LVEQNB_GainTable	lvm/Eq/src/LVEQNB_Tables.c	/^const LVM_INT16     LVEQNB_GainTable[] = {LVEQNB_Gain_Neg15_dB,        \/* -15dB gain *\/$/;"	v
LVEQNB_Gain_0_dB	lvm/Eq/src/LVEQNB_Coeffs.h	45;"	d
LVEQNB_Gain_10_dB	lvm/Eq/src/LVEQNB_Coeffs.h	55;"	d
LVEQNB_Gain_11_dB	lvm/Eq/src/LVEQNB_Coeffs.h	56;"	d
LVEQNB_Gain_12_dB	lvm/Eq/src/LVEQNB_Coeffs.h	57;"	d
LVEQNB_Gain_13_dB	lvm/Eq/src/LVEQNB_Coeffs.h	58;"	d
LVEQNB_Gain_14_dB	lvm/Eq/src/LVEQNB_Coeffs.h	59;"	d
LVEQNB_Gain_15_dB	lvm/Eq/src/LVEQNB_Coeffs.h	60;"	d
LVEQNB_Gain_1_dB	lvm/Eq/src/LVEQNB_Coeffs.h	46;"	d
LVEQNB_Gain_2_dB	lvm/Eq/src/LVEQNB_Coeffs.h	47;"	d
LVEQNB_Gain_3_dB	lvm/Eq/src/LVEQNB_Coeffs.h	48;"	d
LVEQNB_Gain_4_dB	lvm/Eq/src/LVEQNB_Coeffs.h	49;"	d
LVEQNB_Gain_5_dB	lvm/Eq/src/LVEQNB_Coeffs.h	50;"	d
LVEQNB_Gain_6_dB	lvm/Eq/src/LVEQNB_Coeffs.h	51;"	d
LVEQNB_Gain_7_dB	lvm/Eq/src/LVEQNB_Coeffs.h	52;"	d
LVEQNB_Gain_8_dB	lvm/Eq/src/LVEQNB_Coeffs.h	53;"	d
LVEQNB_Gain_9_dB	lvm/Eq/src/LVEQNB_Coeffs.h	54;"	d
LVEQNB_Gain_Neg10_dB	lvm/Eq/src/LVEQNB_Coeffs.h	35;"	d
LVEQNB_Gain_Neg11_dB	lvm/Eq/src/LVEQNB_Coeffs.h	34;"	d
LVEQNB_Gain_Neg12_dB	lvm/Eq/src/LVEQNB_Coeffs.h	33;"	d
LVEQNB_Gain_Neg13_dB	lvm/Eq/src/LVEQNB_Coeffs.h	32;"	d
LVEQNB_Gain_Neg14_dB	lvm/Eq/src/LVEQNB_Coeffs.h	31;"	d
LVEQNB_Gain_Neg15_dB	lvm/Eq/src/LVEQNB_Coeffs.h	30;"	d
LVEQNB_Gain_Neg1_dB	lvm/Eq/src/LVEQNB_Coeffs.h	44;"	d
LVEQNB_Gain_Neg2_dB	lvm/Eq/src/LVEQNB_Coeffs.h	43;"	d
LVEQNB_Gain_Neg3_dB	lvm/Eq/src/LVEQNB_Coeffs.h	42;"	d
LVEQNB_Gain_Neg4_dB	lvm/Eq/src/LVEQNB_Coeffs.h	41;"	d
LVEQNB_Gain_Neg5_dB	lvm/Eq/src/LVEQNB_Coeffs.h	40;"	d
LVEQNB_Gain_Neg6_dB	lvm/Eq/src/LVEQNB_Coeffs.h	39;"	d
LVEQNB_Gain_Neg7_dB	lvm/Eq/src/LVEQNB_Coeffs.h	38;"	d
LVEQNB_Gain_Neg8_dB	lvm/Eq/src/LVEQNB_Coeffs.h	37;"	d
LVEQNB_Gain_Neg9_dB	lvm/Eq/src/LVEQNB_Coeffs.h	36;"	d
LVEQNB_GetCapabilities	lvm/Eq/lib/LVEQNB.h	/^LVEQNB_ReturnStatus_en LVEQNB_GetCapabilities(LVEQNB_Handle_t           hInstance,$/;"	p	signature:(LVEQNB_Handle_t hInstance, LVEQNB_Capabilities_t *pCapabilities)
LVEQNB_GetCapabilities	lvm/Eq/src/LVEQNB_Control.c	/^LVEQNB_ReturnStatus_en LVEQNB_GetCapabilities(LVEQNB_Handle_t           hInstance,$/;"	f	signature:(LVEQNB_Handle_t hInstance, LVEQNB_Capabilities_t *pCapabilities)
LVEQNB_GetParameters	lvm/Eq/lib/LVEQNB.h	/^LVEQNB_ReturnStatus_en LVEQNB_GetParameters(LVEQNB_Handle_t     hInstance,$/;"	p	signature:(LVEQNB_Handle_t hInstance, LVEQNB_Params_t *pParams)
LVEQNB_GetParameters	lvm/Eq/src/LVEQNB_Control.c	/^LVEQNB_ReturnStatus_en LVEQNB_GetParameters(LVEQNB_Handle_t     hInstance,$/;"	f	signature:(LVEQNB_Handle_t hInstance, LVEQNB_Params_t *pParams)
LVEQNB_Handle_t	lvm/Eq/lib/LVEQNB.h	/^typedef void *LVEQNB_Handle_t;$/;"	t
LVEQNB_INSTANCE_ALIGN	lvm/Eq/src/LVEQNB_Private.h	46;"	d
LVEQNB_INVALID	lvm/Eq/src/LVEQNB_Private.h	43;"	d
LVEQNB_Init	lvm/Eq/lib/LVEQNB.h	/^LVEQNB_ReturnStatus_en LVEQNB_Init(LVEQNB_Handle_t          *phInstance,$/;"	p	signature:(LVEQNB_Handle_t *phInstance, LVEQNB_MemTab_t *pMemoryTable, LVEQNB_Capabilities_t *pCapabilities)
LVEQNB_Init	lvm/Eq/src/LVEQNB_Init.c	/^LVEQNB_ReturnStatus_en LVEQNB_Init(LVEQNB_Handle_t          *phInstance,$/;"	f	signature:(LVEQNB_Handle_t *phInstance, LVEQNB_MemTab_t *pMemoryTable, LVEQNB_Capabilities_t *pCapabilities)
LVEQNB_Instance_t	lvm/Eq/src/LVEQNB_Private.h	/^} LVEQNB_Instance_t;$/;"	t	typeref:struct:__anon61
LVEQNB_MEMORY_MAX	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_MEMORY_MAX      = LVM_MAXINT_32$/;"	e	enum:__anon51
LVEQNB_MEMREGION_INSTANCE	lvm/Eq/lib/LVEQNB.h	96;"	d
LVEQNB_MEMREGION_PERSISTENT_COEF	lvm/Eq/lib/LVEQNB.h	98;"	d
LVEQNB_MEMREGION_PERSISTENT_DATA	lvm/Eq/lib/LVEQNB.h	97;"	d
LVEQNB_MEMREGION_SCRATCH	lvm/Eq/lib/LVEQNB.h	99;"	d
LVEQNB_MIX_TC_Fs11025	lvm/Eq/src/LVEQNB_Tables.c	176;"	d	file:
LVEQNB_MIX_TC_Fs12000	lvm/Eq/src/LVEQNB_Tables.c	177;"	d	file:
LVEQNB_MIX_TC_Fs16000	lvm/Eq/src/LVEQNB_Tables.c	178;"	d	file:
LVEQNB_MIX_TC_Fs22050	lvm/Eq/src/LVEQNB_Tables.c	179;"	d	file:
LVEQNB_MIX_TC_Fs24000	lvm/Eq/src/LVEQNB_Tables.c	180;"	d	file:
LVEQNB_MIX_TC_Fs32000	lvm/Eq/src/LVEQNB_Tables.c	181;"	d	file:
LVEQNB_MIX_TC_Fs44100	lvm/Eq/src/LVEQNB_Tables.c	182;"	d	file:
LVEQNB_MIX_TC_Fs48000	lvm/Eq/src/LVEQNB_Tables.c	183;"	d	file:
LVEQNB_MIX_TC_Fs8000	lvm/Eq/src/LVEQNB_Tables.c	175;"	d	file:
LVEQNB_MODE_MAX	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_MODE_MAX = LVM_MAXINT_32$/;"	e	enum:__anon49
LVEQNB_MONOINSTEREO	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_MONOINSTEREO = 1,$/;"	e	enum:__anon53
LVEQNB_MemTab_t	lvm/Eq/lib/LVEQNB.h	/^} LVEQNB_MemTab_t;$/;"	t	typeref:struct:__anon56
LVEQNB_Memory	lvm/Eq/lib/LVEQNB.h	/^LVEQNB_ReturnStatus_en LVEQNB_Memory(LVEQNB_Handle_t            hInstance,$/;"	p	signature:(LVEQNB_Handle_t hInstance, LVEQNB_MemTab_t *pMemoryTable, LVEQNB_Capabilities_t *pCapabilities)
LVEQNB_Memory	lvm/Eq/src/LVEQNB_Init.c	/^LVEQNB_ReturnStatus_en LVEQNB_Memory(LVEQNB_Handle_t            hInstance,$/;"	f	signature:(LVEQNB_Handle_t hInstance, LVEQNB_MemTab_t *pMemoryTable, LVEQNB_Capabilities_t *pCapabilities)
LVEQNB_MemoryRegion_t	lvm/Eq/lib/LVEQNB.h	/^} LVEQNB_MemoryRegion_t;$/;"	t	typeref:struct:__anon55
LVEQNB_MemoryTypes_en	lvm/Eq/lib/LVEQNB.h	/^} LVEQNB_MemoryTypes_en;$/;"	t	typeref:enum:__anon51
LVEQNB_MixerTCTable	lvm/Eq/src/LVEQNB_Tables.c	/^const LVM_INT16 LVEQNB_MixerTCTable[] = {$/;"	v
LVEQNB_Mode_en	lvm/Eq/lib/LVEQNB.h	/^} LVEQNB_Mode_en;$/;"	t	typeref:enum:__anon49
LVEQNB_NR_MEMORY_REGIONS	lvm/Eq/lib/LVEQNB.h	100;"	d
LVEQNB_NULLADDRESS	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_NULLADDRESS    = 2,                          \/* NULL allocation address *\/$/;"	e	enum:__anon52
LVEQNB_ON	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_ON       = 1,$/;"	e	enum:__anon49
LVEQNB_OutOfRange	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_OutOfRange      = 2,$/;"	e	enum:__anon60
LVEQNB_PERSISTENT	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_PERSISTENT      = 0,$/;"	e	enum:__anon51
LVEQNB_PERSISTENT_COEF	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_PERSISTENT_COEF = 2,$/;"	e	enum:__anon51
LVEQNB_PERSISTENT_DATA	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_PERSISTENT_DATA = 1,$/;"	e	enum:__anon51
LVEQNB_Params_t	lvm/Eq/lib/LVEQNB.h	/^} LVEQNB_Params_t;$/;"	t	typeref:struct:__anon58
LVEQNB_Process	lvm/Eq/lib/LVEQNB.h	/^LVEQNB_ReturnStatus_en LVEQNB_Process(LVEQNB_Handle_t       hInstance,$/;"	p	signature:(LVEQNB_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVEQNB_Process	lvm/Eq/src/LVEQNB_Process.c	/^LVEQNB_ReturnStatus_en LVEQNB_Process(LVEQNB_Handle_t       hInstance,$/;"	f	signature:(LVEQNB_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples)
LVEQNB_ReturnStatus_en	lvm/Eq/lib/LVEQNB.h	/^} LVEQNB_ReturnStatus_en;$/;"	t	typeref:enum:__anon52
LVEQNB_SCRATCH	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_SCRATCH         = 3,$/;"	e	enum:__anon51
LVEQNB_SCRATCHBUFFERS	lvm/Eq/src/LVEQNB_Private.h	49;"	d
LVEQNB_SCRATCH_ALIGN	lvm/Eq/src/LVEQNB_Private.h	50;"	d
LVEQNB_SOURCE_MAX	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_SOURCE_MAX   = LVM_MAXINT_32$/;"	e	enum:__anon53
LVEQNB_STATUS_MAX	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_STATUS_MAX     = LVM_MAXINT_32$/;"	e	enum:__anon52
LVEQNB_STEREO	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_STEREO       = 0,$/;"	e	enum:__anon53
LVEQNB_SUCCESS	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_SUCCESS        = 0,                          \/* Successful return from a routine *\/$/;"	e	enum:__anon52
LVEQNB_SampleRateTab	lvm/Eq/src/LVEQNB_Tables.c	/^const LVM_UINT16    LVEQNB_SampleRateTab[] = {8000,                    \/* 8kS\/s  *\/$/;"	v
LVEQNB_SetCoefficients	lvm/Eq/src/LVEQNB_Control.c	/^void    LVEQNB_SetCoefficients(LVEQNB_Instance_t     *pInstance)$/;"	f	signature:(LVEQNB_Instance_t *pInstance)
LVEQNB_SetCoefficients	lvm/Eq/src/LVEQNB_Private.h	/^void    LVEQNB_SetCoefficients(LVEQNB_Instance_t    *pInstance);$/;"	p	signature:(LVEQNB_Instance_t *pInstance)
LVEQNB_SetFilters	lvm/Eq/src/LVEQNB_Control.c	/^void    LVEQNB_SetFilters(LVEQNB_Instance_t     *pInstance,$/;"	f	signature:(LVEQNB_Instance_t *pInstance, LVEQNB_Params_t *pParams)
LVEQNB_SetFilters	lvm/Eq/src/LVEQNB_Private.h	/^void    LVEQNB_SetFilters(LVEQNB_Instance_t   *pInstance,$/;"	p	signature:(LVEQNB_Instance_t *pInstance, LVEQNB_Params_t *pParams)
LVEQNB_SinglePrecCoefs	lvm/Eq/src/LVEQNB_CalcCoef.c	/^LVEQNB_ReturnStatus_en LVEQNB_SinglePrecCoefs(LVM_UINT16        Fs,$/;"	f	signature:(LVM_UINT16 Fs, LVEQNB_BandDef_t *pFilterDefinition, PK_C16_Coefs_t *pCoefficients)
LVEQNB_SinglePrecCoefs	lvm/Eq/src/LVEQNB_Private.h	/^LVEQNB_ReturnStatus_en LVEQNB_SinglePrecCoefs(LVM_UINT16        Fs,$/;"	p	signature:(LVM_UINT16 Fs, LVEQNB_BandDef_t *pFilterDefinition, PK_C16_Coefs_t *pCoefficients)
LVEQNB_SinglePrecision	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_SinglePrecision = 0,$/;"	e	enum:__anon60
LVEQNB_SourceFormat_en	lvm/Eq/lib/LVEQNB.h	/^} LVEQNB_SourceFormat_en;$/;"	t	typeref:enum:__anon53
LVEQNB_TOOMANYSAMPLES	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_TOOMANYSAMPLES = 3,                          \/* Maximum block size exceeded *\/$/;"	e	enum:__anon52
LVEQNB_TwoPiOnFsTable	lvm/Eq/src/LVEQNB_Tables.c	/^const LVM_INT16     LVEQNB_TwoPiOnFsTable[] = {LVEQNB_2PiOn_8000,      \/* 8kS\/s *\/$/;"	v
LVM_ALGORITHMDISABLED	lvm/Bundle/lib/LVM.h	/^    LVM_ALGORITHMDISABLED  = 6,                     \/* Algorithm is disabled*\/$/;"	e	enum:__anon15
LVM_ALGORITHMPSA	lvm/Bundle/lib/LVM.h	/^    LVM_ALGORITHMPSA       = 7,                     \/* Algorithm PSA returns an error *\/$/;"	e	enum:__anon15
LVM_ALIGNMENTERROR	lvm/Bundle/lib/LVM.h	/^    LVM_ALIGNMENTERROR     = 1,                     \/* Memory alignment error *\/$/;"	e	enum:__anon15
LVM_AlgoCallBack	lvm/Bundle/src/LVM_Control.c	/^LVM_INT32 LVM_AlgoCallBack( void          *pBundleHandle,$/;"	f	signature:( void *pBundleHandle, void *pData, LVM_INT16 callbackId)
LVM_AlgoCallBack	lvm/Bundle/src/LVM_Private.h	/^LVM_INT32 LVM_AlgoCallBack(     void          *pBundleHandle,$/;"	p	signature:( void *pBundleHandle, void *pData, LVM_INT16 callbackId)
LVM_ApplyNewSettings	lvm/Bundle/src/LVM_Control.c	/^LVM_ReturnStatus_en LVM_ApplyNewSettings(LVM_Handle_t   hInstance)$/;"	f	signature:(LVM_Handle_t hInstance)
LVM_ApplyNewSettings	lvm/Bundle/src/LVM_Private.h	/^LVM_ReturnStatus_en LVM_ApplyNewSettings(LVM_Handle_t       hInstance);$/;"	p	signature:(LVM_Handle_t hInstance)
LVM_BE_0DB	lvm/Bundle/lib/LVM.h	89;"	d
LVM_BE_12DB	lvm/Bundle/lib/LVM.h	93;"	d
LVM_BE_15DB	lvm/Bundle/lib/LVM.h	94;"	d
LVM_BE_3DB	lvm/Bundle/lib/LVM.h	90;"	d
LVM_BE_6DB	lvm/Bundle/lib/LVM.h	91;"	d
LVM_BE_9DB	lvm/Bundle/lib/LVM.h	92;"	d
LVM_BE_CENTRE_55Hz	lvm/Bundle/lib/LVM.h	/^    LVM_BE_CENTRE_55Hz  = 0,$/;"	e	enum:__anon21
LVM_BE_CENTRE_66Hz	lvm/Bundle/lib/LVM.h	/^    LVM_BE_CENTRE_66Hz  = 1,$/;"	e	enum:__anon21
LVM_BE_CENTRE_78Hz	lvm/Bundle/lib/LVM.h	/^    LVM_BE_CENTRE_78Hz  = 2,$/;"	e	enum:__anon21
LVM_BE_CENTRE_90Hz	lvm/Bundle/lib/LVM.h	/^    LVM_BE_CENTRE_90Hz  = 3,$/;"	e	enum:__anon21
LVM_BE_CENTRE_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_BE_CENTRE_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon21
LVM_BE_CentreFreq_en	lvm/Bundle/lib/LVM.h	/^} LVM_BE_CentreFreq_en;$/;"	t	typeref:enum:__anon21
LVM_BE_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_BE_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon20
LVM_BE_FilterSelect_en	lvm/Bundle/lib/LVM.h	/^} LVM_BE_FilterSelect_en;$/;"	t	typeref:enum:__anon22
LVM_BE_HPF_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_BE_HPF_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon22
LVM_BE_HPF_OFF	lvm/Bundle/lib/LVM.h	/^    LVM_BE_HPF_OFF   = 0,$/;"	e	enum:__anon22
LVM_BE_HPF_ON	lvm/Bundle/lib/LVM.h	/^    LVM_BE_HPF_ON    = 1,$/;"	e	enum:__anon22
LVM_BE_MAX_EFFECTLEVEL	lvm/Bundle/src/LVM_Private.h	88;"	d
LVM_BE_MIN_EFFECTLEVEL	lvm/Bundle/src/LVM_Private.h	87;"	d
LVM_BE_Mode_en	lvm/Bundle/lib/LVM.h	/^} LVM_BE_Mode_en;$/;"	t	typeref:enum:__anon20
LVM_BE_OFF	lvm/Bundle/lib/LVM.h	/^    LVM_BE_OFF   = 0,$/;"	e	enum:__anon20
LVM_BE_ON	lvm/Bundle/lib/LVM.h	/^    LVM_BE_ON    = 1,$/;"	e	enum:__anon20
LVM_BUFFERS_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_BUFFERS_DUMMY     = LVM_MAXENUM$/;"	e	enum:__anon16
LVM_BufferIn	lvm/Bundle/src/LVM_Buffers.c	/^void LVM_BufferIn(LVM_Handle_t      hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 **pToProcess, LVM_INT16 **pProcessed, LVM_UINT16 *pNumSamples)
LVM_BufferIn	lvm/Bundle/src/LVM_Private.h	/^void    LVM_BufferIn(   LVM_Handle_t      hInstance,$/;"	p	signature:( LVM_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 **pToProcess, LVM_INT16 **pProcessed, LVM_UINT16 *pNumSamples)
LVM_BufferManagedIn	lvm/Bundle/src/LVM_Buffers.c	/^void LVM_BufferManagedIn(LVM_Handle_t       hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 **pToProcess, LVM_INT16 **pProcessed, LVM_UINT16 *pNumSamples)
LVM_BufferManagedOut	lvm/Bundle/src/LVM_Buffers.c	/^void LVM_BufferManagedOut(LVM_Handle_t        hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, LVM_INT16 *pOutData, LVM_UINT16 *pNumSamples)
LVM_BufferMode_en	lvm/Bundle/lib/LVM.h	/^} LVM_BufferMode_en;$/;"	t	typeref:enum:__anon16
LVM_BufferOptimisedIn	lvm/Bundle/src/LVM_Buffers.c	/^void LVM_BufferOptimisedIn(LVM_Handle_t         hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 **pToProcess, LVM_INT16 **pProcessed, LVM_UINT16 *pNumSamples)
LVM_BufferOptimisedOut	lvm/Bundle/src/LVM_Buffers.c	/^void LVM_BufferOptimisedOut(LVM_Handle_t    hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, LVM_UINT16 *pNumSamples)
LVM_BufferOut	lvm/Bundle/src/LVM_Buffers.c	/^void LVM_BufferOut(LVM_Handle_t     hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, LVM_INT16 *pOutData, LVM_UINT16 *pNumSamples)
LVM_BufferOut	lvm/Bundle/src/LVM_Private.h	/^void    LVM_BufferOut(  LVM_Handle_t     hInstance,$/;"	p	signature:( LVM_Handle_t hInstance, LVM_INT16 *pOutData, LVM_UINT16 *pNumSamples)
LVM_BufferUnmanagedIn	lvm/Bundle/src/LVM_Buffers.c	/^void LVM_BufferUnmanagedIn(LVM_Handle_t     hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, LVM_INT16 **pToProcess, LVM_INT16 **pProcessed, LVM_UINT16 *pNumSamples)
LVM_BufferUnmanagedOut	lvm/Bundle/src/LVM_Buffers.c	/^void LVM_BufferUnmanagedOut(LVM_Handle_t        hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, LVM_UINT16 *pNumSamples)
LVM_Buffer_t	lvm/Bundle/src/LVM_Private.h	/^} LVM_Buffer_t;$/;"	t	typeref:struct:__anon37
LVM_CHAR	lvm/Common/lib/LVM_Types.h	/^typedef     char                LVM_CHAR;           \/* ASCII character *\/$/;"	t
LVM_CONCERTSOUND	lvm/Bundle/lib/LVM.h	/^    LVM_CONCERTSOUND       = 0,$/;"	e	enum:__anon18
LVM_CS_EFFECT_HIGH	lvm/Bundle/lib/LVM.h	83;"	d
LVM_CS_EFFECT_LOW	lvm/Bundle/lib/LVM.h	81;"	d
LVM_CS_EFFECT_MED	lvm/Bundle/lib/LVM.h	82;"	d
LVM_CS_EFFECT_NONE	lvm/Bundle/lib/LVM.h	80;"	d
LVM_CS_MASK	lvm/Bundle/src/LVM_Private.h	109;"	d
LVM_CS_MAX_REVERB_LEVEL	lvm/Bundle/src/LVM_Private.h	101;"	d
LVM_CS_MIN_EFFECT_LEVEL	lvm/Bundle/src/LVM_Private.h	100;"	d
LVM_Callback	lvm/Common/lib/LVM_Types.h	/^typedef LVM_INT32 (*LVM_Callback)(void          *pCallbackData,     \/* Pointer to the callback data structure *\/$/;"	t
LVM_ClearAudioBuffers	lvm/Bundle/lib/LVM.h	/^LVM_ReturnStatus_en LVM_ClearAudioBuffers(LVM_Handle_t  hInstance);$/;"	p	signature:(LVM_Handle_t hInstance)
LVM_ClearAudioBuffers	lvm/Bundle/src/LVM_Init.c	/^LVM_ReturnStatus_en LVM_ClearAudioBuffers(LVM_Handle_t  hInstance)$/;"	f	signature:(LVM_Handle_t hInstance)
LVM_ControlParams_t	lvm/Bundle/lib/LVM.h	/^} LVM_ControlParams_t;$/;"	t	typeref:struct:__anon32
LVM_DBE_MASK	lvm/Bundle/src/LVM_Private.h	111;"	d
LVM_EQNB_BandDef_t	lvm/Bundle/lib/LVM.h	/^} LVM_EQNB_BandDef_t;$/;"	t	typeref:struct:__anon30
LVM_EQNB_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_EQNB_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon19
LVM_EQNB_MASK	lvm/Bundle/src/LVM_Private.h	110;"	d
LVM_EQNB_MAX_BAND_FREQ	lvm/Bundle/src/LVM_Private.h	91;"	d
LVM_EQNB_MAX_BAND_GAIN	lvm/Bundle/src/LVM_Private.h	93;"	d
LVM_EQNB_MAX_HPF_FREQ	lvm/Bundle/src/LVM_Private.h	98;"	d
LVM_EQNB_MAX_QFACTOR	lvm/Bundle/src/LVM_Private.h	95;"	d
LVM_EQNB_MIN_BAND_FREQ	lvm/Bundle/src/LVM_Private.h	90;"	d
LVM_EQNB_MIN_BAND_GAIN	lvm/Bundle/src/LVM_Private.h	92;"	d
LVM_EQNB_MIN_HPF_FREQ	lvm/Bundle/src/LVM_Private.h	97;"	d
LVM_EQNB_MIN_LPF_FREQ	lvm/Bundle/src/LVM_Private.h	96;"	d
LVM_EQNB_MIN_QFACTOR	lvm/Bundle/src/LVM_Private.h	94;"	d
LVM_EQNB_Mode_en	lvm/Bundle/lib/LVM.h	/^} LVM_EQNB_Mode_en;$/;"	t	typeref:enum:__anon19
LVM_EQNB_OFF	lvm/Bundle/lib/LVM.h	/^    LVM_EQNB_OFF   = 0,$/;"	e	enum:__anon19
LVM_EQNB_ON	lvm/Bundle/lib/LVM.h	/^    LVM_EQNB_ON    = 1,$/;"	e	enum:__anon19
LVM_EQ_NBANDS	lvm/Bundle/lib/LVM.h	97;"	d
LVM_EVENTID_MASK	lvm/Common/lib/LVM_Types.h	50;"	d
LVM_EX_HEADPHONES	lvm/Bundle/lib/LVM.h	/^    LVM_EX_HEADPHONES          = 1,$/;"	e	enum:__anon17
LVM_FALSE	lvm/Common/lib/LVM_Types.h	42;"	d
LVM_FIRSTCALL	lvm/Bundle/src/LVM_Private.h	62;"	d
LVM_FIRSTLASTCALL	lvm/Bundle/src/LVM_Private.h	65;"	d
LVM_FO_HPF	lvm/Common/lib/Filter.h	/^LVM_INT32 LVM_FO_HPF(    LVM_INT32  w,$/;"	p	signature:( LVM_INT32 w, FO_C32_Coefs_t *pCoeffs)
LVM_FO_HPF	lvm/Common/src/LVM_FO_HPF.c	/^LVM_INT32 LVM_FO_HPF(   LVM_INT32       w,$/;"	f	signature:( LVM_INT32 w, FO_C32_Coefs_t *pCoeffs)
LVM_FO_LPF	lvm/Common/lib/Filter.h	/^LVM_INT32 LVM_FO_LPF(    LVM_INT32  w,$/;"	p	signature:( LVM_INT32 w, FO_C32_Coefs_t *pCoeffs)
LVM_FO_LPF	lvm/Common/src/LVM_FO_LPF.c	/^LVM_INT32 LVM_FO_LPF(   LVM_INT32       w,$/;"	f	signature:( LVM_INT32 w, FO_C32_Coefs_t *pCoeffs)
LVM_FS_11025	lvm/Common/lib/LVM_Types.h	/^    LVM_FS_11025 = 1,$/;"	e	enum:__anon81
LVM_FS_12000	lvm/Common/lib/LVM_Types.h	/^    LVM_FS_12000 = 2,$/;"	e	enum:__anon81
LVM_FS_16000	lvm/Common/lib/LVM_Types.h	/^    LVM_FS_16000 = 3,$/;"	e	enum:__anon81
LVM_FS_22050	lvm/Common/lib/LVM_Types.h	/^    LVM_FS_22050 = 4,$/;"	e	enum:__anon81
LVM_FS_24000	lvm/Common/lib/LVM_Types.h	/^    LVM_FS_24000 = 5,$/;"	e	enum:__anon81
LVM_FS_32000	lvm/Common/lib/LVM_Types.h	/^    LVM_FS_32000 = 6,$/;"	e	enum:__anon81
LVM_FS_44100	lvm/Common/lib/LVM_Types.h	/^    LVM_FS_44100 = 7,$/;"	e	enum:__anon81
LVM_FS_48000	lvm/Common/lib/LVM_Types.h	/^    LVM_FS_48000 = 8,$/;"	e	enum:__anon81
LVM_FS_8000	lvm/Common/lib/LVM_Types.h	/^    LVM_FS_8000  = 0,$/;"	e	enum:__anon81
LVM_FS_DUMMY	lvm/Common/lib/LVM_Types.h	/^    LVM_FS_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon81
LVM_FS_INVALID	lvm/Common/lib/LVM_Types.h	/^    LVM_FS_INVALID = LVM_MAXENUM-1,$/;"	e	enum:__anon81
LVM_Format_en	lvm/Common/lib/LVM_Types.h	/^} LVM_Format_en;$/;"	t	typeref:enum:__anon80
LVM_FsTable	lvm/Reverb/src/LVREV_Tables.c	/^const LVM_UINT16 LVM_FsTable[] = {$/;"	v
LVM_Fs_en	lvm/Common/lib/LVM_Types.h	/^} LVM_Fs_en;$/;"	t	typeref:enum:__anon81
LVM_GetControlParameters	lvm/Bundle/lib/LVM.h	/^LVM_ReturnStatus_en LVM_GetControlParameters(LVM_Handle_t           hInstance,$/;"	p	signature:(LVM_Handle_t hInstance, LVM_ControlParams_t *pParams)
LVM_GetControlParameters	lvm/Bundle/src/LVM_Control.c	/^LVM_ReturnStatus_en LVM_GetControlParameters(LVM_Handle_t           hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, LVM_ControlParams_t *pParams)
LVM_GetFsFromTable	lvm/Reverb/src/LVREV_Tables.c	/^LVM_UINT16 LVM_GetFsFromTable(LVM_Fs_en FsIndex){$/;"	f	signature:(LVM_Fs_en FsIndex)
LVM_GetFsFromTable	lvm/Reverb/src/LVREV_Tables.h	/^extern          LVM_UINT16  LVM_GetFsFromTable(LVM_Fs_en FsIndex);$/;"	p	signature:(LVM_Fs_en FsIndex)
LVM_GetHeadroomParams	lvm/Bundle/lib/LVM.h	/^LVM_ReturnStatus_en LVM_GetHeadroomParams(  LVM_Handle_t            hInstance,$/;"	p	signature:( LVM_Handle_t hInstance, LVM_HeadroomParams_t *pHeadroomParams)
LVM_GetHeadroomParams	lvm/Bundle/src/LVM_Control.c	/^LVM_ReturnStatus_en LVM_GetHeadroomParams(LVM_Handle_t          hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, LVM_HeadroomParams_t *pHeadroomParams)
LVM_GetInstanceHandle	lvm/Bundle/lib/LVM.h	/^LVM_ReturnStatus_en LVM_GetInstanceHandle(LVM_Handle_t        *phInstance,$/;"	p	signature:(LVM_Handle_t *phInstance, LVM_MemTab_t *pMemoryTable, LVM_InstParams_t *pInstParams)
LVM_GetInstanceHandle	lvm/Bundle/src/LVM_Init.c	/^LVM_ReturnStatus_en LVM_GetInstanceHandle(LVM_Handle_t           *phInstance,$/;"	f	signature:(LVM_Handle_t *phInstance, LVM_MemTab_t *pMemoryTable, LVM_InstParams_t *pInstParams)
LVM_GetMemoryTable	lvm/Bundle/lib/LVM.h	/^LVM_ReturnStatus_en LVM_GetMemoryTable(LVM_Handle_t         hInstance,$/;"	p	signature:(LVM_Handle_t hInstance, LVM_MemTab_t *pMemoryTable, LVM_InstParams_t *pInstParams)
LVM_GetMemoryTable	lvm/Bundle/src/LVM_Init.c	/^LVM_ReturnStatus_en LVM_GetMemoryTable(LVM_Handle_t         hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, LVM_MemTab_t *pMemoryTable, LVM_InstParams_t *pInstParams)
LVM_GetOmega	lvm/Common/lib/Filter.h	/^LVM_INT32   LVM_GetOmega(LVM_UINT16  Fc,$/;"	p	signature:(LVM_UINT16 Fc, LVM_Fs_en SampleRate)
LVM_GetOmega	lvm/Common/src/LVM_GetOmega.c	/^LVM_INT32 LVM_GetOmega(LVM_UINT16                  Fc,$/;"	f	signature:(LVM_UINT16 Fc, LVM_Fs_en Fs)
LVM_GetSpectrum	lvm/Bundle/lib/LVM.h	/^LVM_ReturnStatus_en LVM_GetSpectrum( LVM_Handle_t            hInstance,$/;"	p	signature:( LVM_Handle_t hInstance, LVM_UINT8 *pCurrentPeaks, LVM_UINT8 *pPastPeaks, LVM_INT32 AudioTime)
LVM_GetSpectrum	lvm/Bundle/src/LVM_API_Specials.c	/^LVM_ReturnStatus_en LVM_GetSpectrum($/;"	f	signature:( LVM_Handle_t hInstance, LVM_UINT8 *pCurrentPeaks, LVM_UINT8 *pPastPeaks, LVM_INT32 AudioTime )
LVM_GetVersionInfo	lvm/Bundle/lib/LVM.h	/^LVM_ReturnStatus_en LVM_GetVersionInfo(LVM_VersionInfo_st  *pVersion);$/;"	p	signature:(LVM_VersionInfo_st *pVersion)
LVM_HEADPHONES	lvm/Bundle/lib/LVM.h	/^    LVM_HEADPHONES             = 0,$/;"	e	enum:__anon17
LVM_HEADROOM_MAX_NBANDS	lvm/Bundle/lib/LVM.h	100;"	d
LVM_HEADROOM_OFF	lvm/Bundle/lib/LVM.h	/^    LVM_HEADROOM_OFF   = 0,$/;"	e	enum:__anon25
LVM_HEADROOM_ON	lvm/Bundle/lib/LVM.h	/^    LVM_HEADROOM_ON    = 1,$/;"	e	enum:__anon25
LVM_Handle_t	lvm/Bundle/lib/LVM.h	/^typedef void *LVM_Handle_t;$/;"	t
LVM_HeadroomBandDef_t	lvm/Bundle/lib/LVM.h	/^} LVM_HeadroomBandDef_t;$/;"	t	typeref:struct:__anon31
LVM_HeadroomParams_t	lvm/Bundle/lib/LVM.h	/^} LVM_HeadroomParams_t;$/;"	t	typeref:struct:__anon34
LVM_Headroom_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_Headroom_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon25
LVM_Headroom_Mode_en	lvm/Bundle/lib/LVM.h	/^} LVM_Headroom_Mode_en;$/;"	t	typeref:enum:__anon25
LVM_INSTANCE_ALIGN	lvm/Bundle/src/LVM_Private.h	61;"	d
LVM_INT16	lvm/Common/lib/LVM_Types.h	/^typedef     short               LVM_INT16;          \/* Signed 16-bit word *\/$/;"	t
LVM_INT32	lvm/Common/lib/LVM_Types.h	/^typedef     long                LVM_INT32;          \/* Signed 32-bit word *\/$/;"	t
LVM_INT8	lvm/Common/lib/LVM_Types.h	/^typedef     char                LVM_INT8;           \/* Signed 8-bit word *\/$/;"	t
LVM_INVALID	lvm/Bundle/src/LVM_Private.h	58;"	d
LVM_INVALIDNUMSAMPLES	lvm/Bundle/lib/LVM.h	/^    LVM_INVALIDNUMSAMPLES  = 4,                     \/* Invalid number of samples *\/$/;"	e	enum:__anon15
LVM_InstParams_t	lvm/Bundle/lib/LVM.h	/^} LVM_InstParams_t;$/;"	t	typeref:struct:__anon33
LVM_Instance_t	lvm/Bundle/src/LVM_Private.h	/^} LVM_Instance_t;$/;"	t	typeref:struct:__anon40
LVM_IntMemTab_t	lvm/Bundle/src/LVM_Private.h	/^} LVM_IntMemTab_t;$/;"	t	typeref:struct:__anon36
LVM_IntMemoryRegion_t	lvm/Bundle/src/LVM_Private.h	/^} LVM_IntMemoryRegion_t;$/;"	t	typeref:struct:__anon35
LVM_LASTCALL	lvm/Bundle/src/LVM_Private.h	64;"	d
LVM_MANAGED_BUFFERS	lvm/Bundle/lib/LVM.h	/^    LVM_MANAGED_BUFFERS   = 0,$/;"	e	enum:__anon16
LVM_MANAGED_MAX_MAXBLOCKSIZE	lvm/Bundle/src/LVM_Private.h	69;"	d
LVM_MAXBLOCKCALL	lvm/Bundle/src/LVM_Private.h	63;"	d
LVM_MAXENUM	lvm/Common/lib/LVM_Types.h	47;"	d
LVM_MAXINT_16	lvm/Common/lib/LVM_Types.h	45;"	d
LVM_MAXINT_32	lvm/Common/lib/LVM_Types.h	46;"	d
LVM_MAXINT_8	lvm/Common/lib/LVM_Types.h	44;"	d
LVM_MEMORYTYPE_DUMMY	lvm/Common/lib/LVM_Types.h	/^    LVM_MEMORYTYPE_DUMMY        = LVM_MAXENUM$/;"	e	enum:__anon82
LVM_MEMREGION_PERSISTENT_FAST_COEF	lvm/Common/lib/LVM_Types.h	55;"	d
LVM_MEMREGION_PERSISTENT_FAST_DATA	lvm/Common/lib/LVM_Types.h	54;"	d
LVM_MEMREGION_PERSISTENT_SLOW_DATA	lvm/Common/lib/LVM_Types.h	53;"	d
LVM_MEMREGION_TEMPORARY_FAST	lvm/Common/lib/LVM_Types.h	56;"	d
LVM_MEM_EXTERNAL	lvm/Common/lib/LVM_Types.h	72;"	d
LVM_MEM_INTERNAL	lvm/Common/lib/LVM_Types.h	71;"	d
LVM_MEM_PARTITION0	lvm/Common/lib/LVM_Types.h	61;"	d
LVM_MEM_PARTITION1	lvm/Common/lib/LVM_Types.h	62;"	d
LVM_MEM_PARTITION2	lvm/Common/lib/LVM_Types.h	63;"	d
LVM_MEM_PARTITION3	lvm/Common/lib/LVM_Types.h	64;"	d
LVM_MEM_PERSISTENT	lvm/Common/lib/LVM_Types.h	67;"	d
LVM_MEM_SCRATCH	lvm/Common/lib/LVM_Types.h	68;"	d
LVM_MININT_32	lvm/SpectrumAnalyzer/src/LVPSA_Process.c	23;"	d	file:
LVM_MIN_MAXBLOCKSIZE	lvm/Bundle/src/LVM_Private.h	68;"	d
LVM_MIX_TC_Fs11025	lvm/Bundle/src/LVM_Tables.c	369;"	d	file:
LVM_MIX_TC_Fs12000	lvm/Bundle/src/LVM_Tables.c	370;"	d	file:
LVM_MIX_TC_Fs16000	lvm/Bundle/src/LVM_Tables.c	371;"	d	file:
LVM_MIX_TC_Fs22050	lvm/Bundle/src/LVM_Tables.c	372;"	d	file:
LVM_MIX_TC_Fs24000	lvm/Bundle/src/LVM_Tables.c	373;"	d	file:
LVM_MIX_TC_Fs32000	lvm/Bundle/src/LVM_Tables.c	374;"	d	file:
LVM_MIX_TC_Fs44100	lvm/Bundle/src/LVM_Tables.c	375;"	d	file:
LVM_MIX_TC_Fs48000	lvm/Bundle/src/LVM_Tables.c	376;"	d	file:
LVM_MIX_TC_Fs8000	lvm/Bundle/src/LVM_Tables.c	368;"	d	file:
LVM_MODE_DUMMY	lvm/Common/lib/LVM_Types.h	/^    LVM_MODE_DUMMY  = LVM_MAXENUM$/;"	e	enum:__anon79
LVM_MODE_OFF	lvm/Common/lib/LVM_Types.h	/^    LVM_MODE_OFF    = 0,$/;"	e	enum:__anon79
LVM_MODE_ON	lvm/Common/lib/LVM_Types.h	/^    LVM_MODE_ON     = 1,$/;"	e	enum:__anon79
LVM_MODULEID_MASK	lvm/Common/lib/LVM_Types.h	49;"	d
LVM_MONO	lvm/Common/lib/LVM_Types.h	/^    LVM_MONO            = 2,$/;"	e	enum:__anon80
LVM_MONOINSTEREO	lvm/Common/lib/LVM_Types.h	/^    LVM_MONOINSTEREO    = 1,$/;"	e	enum:__anon80
LVM_MemTab_t	lvm/Bundle/lib/LVM.h	/^} LVM_MemTab_t;$/;"	t	typeref:struct:__anon29
LVM_MemoryRegion_st	lvm/Common/lib/LVM_Types.h	/^} LVM_MemoryRegion_st;$/;"	t	typeref:struct:__anon83
LVM_MemoryTable_st	lvm/Common/lib/LVM_Types.h	/^} LVM_MemoryTable_st;$/;"	t	typeref:struct:__anon84
LVM_MemoryTypes_en	lvm/Common/lib/LVM_Types.h	/^} LVM_MemoryTypes_en;$/;"	t	typeref:enum:__anon82
LVM_MixerTCTable	lvm/Bundle/src/LVM_Tables.c	/^const LVM_INT16 LVM_MixerTCTable[] = {$/;"	v
LVM_Mixer_TimeConstant	lvm/Common/lib/Mixer.h	/^LVM_UINT32 LVM_Mixer_TimeConstant(LVM_UINT32   tc,$/;"	p	signature:(LVM_UINT32 tc, LVM_UINT16 Fs, LVM_UINT16 NumChannels)
LVM_Mixer_TimeConstant	lvm/Common/src/LVM_Mixer_TimeConstant.c	/^LVM_UINT32 LVM_Mixer_TimeConstant(LVM_UINT32   tc,$/;"	f	signature:(LVM_UINT32 tc, LVM_UINT16 Fs, LVM_UINT16 NumChannels)
LVM_Mode_en	lvm/Common/lib/LVM_Types.h	/^} LVM_Mode_en;$/;"	t	typeref:enum:__anon79
LVM_NR_MEMORY_REGIONS	lvm/Bundle/lib/LVM.h	77;"	d
LVM_NR_MEMORY_REGIONS	lvm/Common/lib/LVM_Types.h	58;"	d
LVM_NULL	lvm/Common/lib/LVM_Types.h	39;"	d
LVM_NULLADDRESS	lvm/Bundle/lib/LVM.h	/^    LVM_NULLADDRESS        = 2,                     \/* NULL allocation address *\/$/;"	e	enum:__anon15
LVM_OUTOFRANGE	lvm/Bundle/lib/LVM.h	/^    LVM_OUTOFRANGE         = 3,                     \/* Out of range control parameter *\/$/;"	e	enum:__anon15
LVM_OutputDeviceType_en	lvm/Bundle/lib/LVM.h	/^} LVM_OutputDeviceType_en;$/;"	t	typeref:enum:__anon17
LVM_PERSISTENT	lvm/Common/lib/LVM_Types.h	75;"	d
LVM_PERSISTENT_COEF	lvm/Common/lib/LVM_Types.h	77;"	d
LVM_PERSISTENT_DATA	lvm/Common/lib/LVM_Types.h	76;"	d
LVM_PERSISTENT_FAST_COEF	lvm/Common/lib/LVM_Types.h	/^    LVM_PERSISTENT_FAST_COEF    = LVM_MEMREGION_PERSISTENT_FAST_COEF,$/;"	e	enum:__anon82
LVM_PERSISTENT_FAST_DATA	lvm/Common/lib/LVM_Types.h	/^    LVM_PERSISTENT_FAST_DATA    = LVM_MEMREGION_PERSISTENT_FAST_DATA,$/;"	e	enum:__anon82
LVM_PERSISTENT_SLOW_DATA	lvm/Common/lib/LVM_Types.h	/^    LVM_PERSISTENT_SLOW_DATA    = LVM_MEMREGION_PERSISTENT_SLOW_DATA,$/;"	e	enum:__anon82
LVM_PSA_BARHEIGHT	lvm/Bundle/src/LVM_Private.h	79;"	d
LVM_PSA_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon27
LVM_PSA_DYNAMICRANGE	lvm/Bundle/src/LVM_Private.h	78;"	d
LVM_PSA_DecaySpeed_en	lvm/Bundle/lib/LVM.h	/^} LVM_PSA_DecaySpeed_en;$/;"	t	typeref:enum:__anon26
LVM_PSA_MASK	lvm/Bundle/src/LVM_Private.h	114;"	d
LVM_PSA_Mode_en	lvm/Bundle/lib/LVM.h	/^} LVM_PSA_Mode_en;$/;"	t	typeref:enum:__anon27
LVM_PSA_OFF	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_OFF   = 0,$/;"	e	enum:__anon27
LVM_PSA_ON	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_ON    = 1,$/;"	e	enum:__anon27
LVM_PSA_SPEED_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_SPEED_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon26
LVM_PSA_SPEED_FAST	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_SPEED_FAST,                                  \/* Peak decaying at fast speed *\/$/;"	e	enum:__anon26
LVM_PSA_SPEED_MEDIUM	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_SPEED_MEDIUM,                                \/* Peak decaying at medium speed *\/$/;"	e	enum:__anon26
LVM_PSA_SPEED_SLOW	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_SPEED_SLOW,                                  \/* Peak decaying at slow speed *\/$/;"	e	enum:__anon26
LVM_Polynomial	lvm/Common/lib/Filter.h	/^LVM_INT32 LVM_Polynomial(LVM_UINT16 N,$/;"	p	signature:(LVM_UINT16 N, LVM_INT32 *pCoefficients, LVM_INT32 X)
LVM_Polynomial	lvm/Common/src/LVM_Polynomial.c	/^LVM_INT32 LVM_Polynomial(LVM_UINT16    N,$/;"	f	signature:(LVM_UINT16 N, LVM_INT32 *pCoefficients, LVM_INT32 X)
LVM_Power10	lvm/Common/lib/Filter.h	/^LVM_INT32 LVM_Power10(   LVM_INT32  X);$/;"	p	signature:( LVM_INT32 X)
LVM_Power10	lvm/Common/src/LVM_Power10.c	/^LVM_INT32 LVM_Power10(LVM_INT32     X)$/;"	f	signature:(LVM_INT32 X)
LVM_Process	lvm/Bundle/lib/LVM.h	/^LVM_ReturnStatus_en LVM_Process(LVM_Handle_t                hInstance,$/;"	p	signature:(LVM_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples, LVM_UINT32 AudioTime)
LVM_Process	lvm/Bundle/src/LVM_Process.c	/^LVM_ReturnStatus_en LVM_Process(LVM_Handle_t                hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, const LVM_INT16 *pInData, LVM_INT16 *pOutData, LVM_UINT16 NumSamples, LVM_UINT32 AudioTime)
LVM_RETURNSTATUS_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_RETURNSTATUS_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon15
LVM_ReturnStatus_en	lvm/Bundle/lib/LVM.h	/^} LVM_ReturnStatus_en;$/;"	t	typeref:enum:__anon15
LVM_SCRATCH	lvm/Common/lib/LVM_Types.h	78;"	d
LVM_SOURCE_DUMMY	lvm/Common/lib/LVM_Types.h	/^    LVM_SOURCE_DUMMY    = LVM_MAXENUM$/;"	e	enum:__anon80
LVM_SPEAKERTYPE_MAX	lvm/Bundle/lib/LVM.h	/^    LVM_SPEAKERTYPE_MAX        = LVM_MAXENUM$/;"	e	enum:__anon17
LVM_STEREO	lvm/Common/lib/LVM_Types.h	/^    LVM_STEREO          = 0,$/;"	e	enum:__anon80
LVM_SUCCESS	lvm/Bundle/lib/LVM.h	/^    LVM_SUCCESS            = 0,                     \/* Successful return from a routine *\/$/;"	e	enum:__anon15
LVM_SetControlParameters	lvm/Bundle/lib/LVM.h	/^LVM_ReturnStatus_en LVM_SetControlParameters(LVM_Handle_t           hInstance,$/;"	p	signature:(LVM_Handle_t hInstance, LVM_ControlParams_t *pParams)
LVM_SetControlParameters	lvm/Bundle/src/LVM_Control.c	/^LVM_ReturnStatus_en LVM_SetControlParameters(LVM_Handle_t           hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, LVM_ControlParams_t *pParams)
LVM_SetHeadroom	lvm/Bundle/src/LVM_Control.c	/^void    LVM_SetHeadroom(LVM_Instance_t         *pInstance,$/;"	f	signature:(LVM_Instance_t *pInstance, LVM_ControlParams_t *pParams)
LVM_SetHeadroom	lvm/Bundle/src/LVM_Private.h	/^void    LVM_SetHeadroom(    LVM_Instance_t         *pInstance,$/;"	p	signature:( LVM_Instance_t *pInstance, LVM_ControlParams_t *pParams)
LVM_SetHeadroomParams	lvm/Bundle/lib/LVM.h	/^LVM_ReturnStatus_en LVM_SetHeadroomParams(  LVM_Handle_t            hInstance,$/;"	p	signature:( LVM_Handle_t hInstance, LVM_HeadroomParams_t *pHeadroomParams)
LVM_SetHeadroomParams	lvm/Bundle/src/LVM_Control.c	/^LVM_ReturnStatus_en LVM_SetHeadroomParams(LVM_Handle_t              hInstance,$/;"	f	signature:(LVM_Handle_t hInstance, LVM_HeadroomParams_t *pHeadroomParams)
LVM_SetTrebleBoost	lvm/Bundle/src/LVM_Control.c	/^void LVM_SetTrebleBoost(LVM_Instance_t         *pInstance,$/;"	f	signature:(LVM_Instance_t *pInstance, LVM_ControlParams_t *pParams)
LVM_SetTrebleBoost	lvm/Bundle/src/LVM_Private.h	/^void    LVM_SetTrebleBoost( LVM_Instance_t         *pInstance,$/;"	p	signature:( LVM_Instance_t *pInstance, LVM_ControlParams_t *pParams)
LVM_SetVolume	lvm/Bundle/src/LVM_Control.c	/^void    LVM_SetVolume(LVM_Instance_t         *pInstance,$/;"	f	signature:(LVM_Instance_t *pInstance, LVM_ControlParams_t *pParams)
LVM_SetVolume	lvm/Bundle/src/LVM_Private.h	/^void    LVM_SetVolume(  LVM_Instance_t         *pInstance,$/;"	p	signature:( LVM_Instance_t *pInstance, LVM_ControlParams_t *pParams)
LVM_SetVolumeNoSmoothing	lvm/Bundle/lib/LVM.h	/^LVM_ReturnStatus_en LVM_SetVolumeNoSmoothing( LVM_Handle_t           hInstance,$/;"	p	signature:( LVM_Handle_t hInstance, LVM_ControlParams_t *pParams)
LVM_SetVolumeNoSmoothing	lvm/Bundle/src/LVM_API_Specials.c	/^LVM_ReturnStatus_en LVM_SetVolumeNoSmoothing( LVM_Handle_t           hInstance,$/;"	f	signature:( LVM_Handle_t hInstance, LVM_ControlParams_t *pParams)
LVM_TEMPORARY_FAST	lvm/Common/lib/LVM_Types.h	/^    LVM_TEMPORARY_FAST          = LVM_MEMREGION_TEMPORARY_FAST,$/;"	e	enum:__anon82
LVM_TE_Coefs_t	lvm/Bundle/src/LVM_Private.h	/^} LVM_TE_Coefs_t;$/;"	t	typeref:struct:__anon39
LVM_TE_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_TE_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon24
LVM_TE_Data_t	lvm/Bundle/src/LVM_Private.h	/^} LVM_TE_Data_t;$/;"	t	typeref:struct:__anon38
LVM_TE_LOW_MIPS	lvm/Bundle/lib/LVM.h	86;"	d
LVM_TE_MASK	lvm/Bundle/src/LVM_Private.h	113;"	d
LVM_TE_MAX_EFFECTLEVEL	lvm/Bundle/src/LVM_Private.h	82;"	d
LVM_TE_MIN_EFFECTLEVEL	lvm/Bundle/src/LVM_Private.h	81;"	d
LVM_TE_Mode_en	lvm/Bundle/lib/LVM.h	/^} LVM_TE_Mode_en;$/;"	t	typeref:enum:__anon24
LVM_TE_OFF	lvm/Bundle/lib/LVM.h	/^    LVM_TE_OFF   = 0,$/;"	e	enum:__anon24
LVM_TE_ON	lvm/Bundle/lib/LVM.h	/^    LVM_TE_ON    = 1,$/;"	e	enum:__anon24
LVM_TIMER_PRIVATE_H	lvm/Common/src/LVM_Timer_Private.h	19;"	d
LVM_TRUE	lvm/Common/lib/LVM_Types.h	41;"	d
LVM_TYPES_H	lvm/Common/lib/LVM_Types.h	26;"	d
LVM_Timer	lvm/Common/lib/LVM_Timer.h	/^void LVM_Timer      (   LVM_Timer_Instance_t       *pInstance,$/;"	p	signature:( LVM_Timer_Instance_t *pInstance, LVM_INT16 BlockSize )
LVM_Timer	lvm/Common/src/LVM_Timer.c	/^void LVM_Timer      (   LVM_Timer_Instance_t       *pInstance,$/;"	f	signature:( LVM_Timer_Instance_t *pInstance, LVM_INT16 BlockSize )
LVM_Timer_Init	lvm/Common/lib/LVM_Timer.h	/^void LVM_Timer_Init (   LVM_Timer_Instance_t       *pInstance,$/;"	p	signature:( LVM_Timer_Instance_t *pInstance, LVM_Timer_Params_t *pParams )
LVM_Timer_Init	lvm/Common/src/LVM_Timer_Init.c	/^void LVM_Timer_Init (   LVM_Timer_Instance_t       *pInstance,$/;"	f	signature:( LVM_Timer_Instance_t *pInstance, LVM_Timer_Params_t *pParams )
LVM_Timer_Instance_Private_t	lvm/Common/src/LVM_Timer_Private.h	/^} LVM_Timer_Instance_Private_t;$/;"	t	typeref:struct:__anon93
LVM_Timer_Instance_t	lvm/Common/lib/LVM_Timer.h	/^} LVM_Timer_Instance_t;$/;"	t	typeref:struct:__anon62
LVM_Timer_Params_t	lvm/Common/lib/LVM_Timer.h	/^} LVM_Timer_Params_t;$/;"	t	typeref:struct:__anon63
LVM_TrebleBoostCoefs	lvm/Bundle/src/LVM_Tables.c	/^FO_C16_LShx_Coefs_t    LVM_TrebleBoostCoefs[] = {$/;"	v
LVM_UINT16	lvm/Common/lib/LVM_Types.h	/^typedef     unsigned short      LVM_UINT16;         \/* Unsigned 16-bit word *\/$/;"	t
LVM_UINT32	lvm/Common/lib/LVM_Types.h	/^typedef     unsigned long       LVM_UINT32;         \/* Unsigned 32-bit word *\/$/;"	t
LVM_UINT8	lvm/Common/lib/LVM_Types.h	/^typedef     unsigned char       LVM_UINT8;          \/* Unsigned 8-bit word *\/$/;"	t
LVM_UNMANAGED_BUFFERS	lvm/Bundle/lib/LVM.h	/^    LVM_UNMANAGED_BUFFERS = 1,$/;"	e	enum:__anon16
LVM_UNMANAGED_MAX_MAXBLOCKSIZE	lvm/Bundle/src/LVM_Private.h	70;"	d
LVM_VCCallBack	lvm/Bundle/src/LVM_Control.c	/^LVM_INT32    LVM_VCCallBack(void*   pBundleHandle,$/;"	f	signature:(void* pBundleHandle, void* pGeneralPurpose, short CallBackParam)
LVM_VCCallBack	lvm/Bundle/src/LVM_Private.h	/^LVM_INT32    LVM_VCCallBack(void*   pBundleHandle,$/;"	p	signature:(void* pBundleHandle, void* pGeneralPurpose, short CallBackParam)
LVM_VC_BALANCE_MAX	lvm/Bundle/src/LVM_Private.h	105;"	d
LVM_VC_BALANCE_MIN	lvm/Bundle/src/LVM_Private.h	106;"	d
LVM_VC_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_VC_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon23
LVM_VC_MASK	lvm/Bundle/src/LVM_Private.h	112;"	d
LVM_VC_MAX_EFFECTLEVEL	lvm/Bundle/src/LVM_Private.h	85;"	d
LVM_VC_MIN_EFFECTLEVEL	lvm/Bundle/src/LVM_Private.h	84;"	d
LVM_VC_MIXER_TIME	lvm/Bundle/src/LVM_Private.h	104;"	d
LVM_VC_Mode_en	lvm/Bundle/lib/LVM.h	/^} LVM_VC_Mode_en;$/;"	t	typeref:enum:__anon23
LVM_VC_OFF	lvm/Bundle/lib/LVM.h	/^    LVM_VC_OFF   = 0,$/;"	e	enum:__anon23
LVM_VC_ON	lvm/Bundle/lib/LVM.h	/^    LVM_VC_ON    = 1,$/;"	e	enum:__anon23
LVM_VIRTUALIZERTYPE_DUMMY	lvm/Bundle/lib/LVM.h	/^    LVM_VIRTUALIZERTYPE_DUMMY   = LVM_MAXENUM$/;"	e	enum:__anon18
LVM_VIRTUALIZER_MAX_REVERB_LEVEL	lvm/Bundle/src/LVM_Private.h	102;"	d
LVM_VersionInfo_st	lvm/Bundle/lib/LVM.h	/^} LVM_VersionInfo_st;$/;"	t	typeref:struct:__anon28
LVM_VirtualizerType_en	lvm/Bundle/lib/LVM.h	/^} LVM_VirtualizerType_en;$/;"	t	typeref:enum:__anon18
LVM_VolumeTable	lvm/Bundle/src/LVM_Tables.c	/^const LVM_INT16 LVM_VolumeTable[] = {$/;"	v
LVM_WRONGAUDIOTIME	lvm/Bundle/lib/LVM.h	/^    LVM_WRONGAUDIOTIME     = 5,                     \/* Wrong time value for audio time*\/$/;"	e	enum:__anon15
LVMixer3_1St_st	lvm/Common/src/LVC_Mixer.h	/^} LVMixer3_1St_st;$/;"	t	typeref:struct:__anon90
LVMixer3_2St_st	lvm/Common/src/LVC_Mixer.h	/^} LVMixer3_2St_st;$/;"	t	typeref:struct:__anon91
LVMixer3_3St_st	lvm/Common/src/LVC_Mixer.h	/^} LVMixer3_3St_st;$/;"	t	typeref:struct:__anon92
LVMixer3_MixInSoft_D16C31_SAT	lvm/Common/src/LVC_Mixer.h	65;"	d
LVMixer3_MixSoft_1St_D16C31_SAT	lvm/Common/src/LVC_Mixer.h	64;"	d
LVMixer3_MixSoft_2St_D16C31_SAT	lvm/Common/src/LVC_Mixer.h	66;"	d
LVMixer3_MixSoft_3St_D16C31_SAT	lvm/Common/src/LVC_Mixer.h	67;"	d
LVMixer3_st	lvm/Common/src/LVC_Mixer.h	/^} LVMixer3_st;$/;"	t	typeref:struct:__anon89
LVPSA_ApplyNewSettings	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_ApplyNewSettings (LVPSA_InstancePr_t     *pInst)$/;"	f	signature:(LVPSA_InstancePr_t *pInst)
LVPSA_ApplyNewSettings	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^LVPSA_RETURN LVPSA_ApplyNewSettings (LVPSA_InstancePr_t     *pInst);$/;"	p	signature:(LVPSA_InstancePr_t *pInst)
LVPSA_BPDoublePrecCoefs	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_BPDoublePrecCoefs(   LVM_UINT16            Fs,$/;"	f	signature:( LVM_UINT16 Fs, LVPSA_FilterParam_t *pFilterParams, BP_C32_Coefs_t *pCoefficients)
LVPSA_BPDoublePrecCoefs	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_BPDoublePrecCoefs(  LVM_UINT16              Fs,$/;"	p	file:	signature:( LVM_UINT16 Fs, LVPSA_FilterParam_t *pFilterParams, BP_C32_Coefs_t *pCoefficients)
LVPSA_BPDoublePrecCoefs	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_BPDoublePrecCoefs(  LVM_UINT16            Fs,$/;"	p	file:	signature:( LVM_UINT16 Fs, LVPSA_FilterParam_t *pFilterParams, BP_C32_Coefs_t *pCoefficients)
LVPSA_BPFilterPrecision_en	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^} LVPSA_BPFilterPrecision_en;$/;"	t	typeref:enum:__anon125
LVPSA_BPSinglePrecCoefs	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_BPSinglePrecCoefs(    LVM_UINT16              Fs,$/;"	f	signature:( LVM_UINT16 Fs, LVPSA_FilterParam_t *pFilterParams, BP_C16_Coefs_t *pCoefficients)
LVPSA_BPSinglePrecCoefs	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_BPSinglePrecCoefs(  LVM_UINT16             Fs,$/;"	p	file:	signature:( LVM_UINT16 Fs, LVPSA_FilterParam_t *pFilterParams, BP_C16_Coefs_t *pCoefficients)
LVPSA_COEF_ALIGN	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	39;"	d
LVPSA_ClearFilterHistory	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_ClearFilterHistory( LVPSA_InstancePr_t        *pInst);$/;"	p	file:	signature:( LVPSA_InstancePr_t *pInst)
LVPSA_ClearFilterHistory	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_ClearFilterHistory(LVPSA_InstancePr_t        *pInst)$/;"	f	signature:(LVPSA_InstancePr_t *pInst)
LVPSA_Control	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^LVPSA_RETURN LVPSA_Control           ( pLVPSA_Handle_t             hInstance,$/;"	p	signature:( pLVPSA_Handle_t hInstance, LVPSA_ControlParams_t *pNewParams )
LVPSA_Control	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_Control           ( pLVPSA_Handle_t             hInstance,$/;"	f	signature:( pLVPSA_Handle_t hInstance, LVPSA_ControlParams_t *pNewParams )
LVPSA_ControlParams_t	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^} LVPSA_ControlParams_t, *pLVPSA_ControlParams_t;$/;"	t	typeref:struct:__anon121
LVPSA_CosCoef	lvm/SpectrumAnalyzer/src/LVPSA_Tables.c	/^const LVM_INT16     LVPSA_CosCoef[] = { 3,                             \/* Shifts *\/$/;"	v
LVPSA_DATA_ALIGN	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	40;"	d
LVPSA_DPCosCoef	lvm/SpectrumAnalyzer/src/LVPSA_Tables.c	/^const LVM_INT16     LVPSA_DPCosCoef[] = {   1,                           \/* Shifts *\/$/;"	v
LVPSA_DoublePrecisionFilter	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_DoublePrecisionFilter     \/* Double precision *\/$/;"	e	enum:__anon125
LVPSA_DownSamplingFactor	lvm/SpectrumAnalyzer/src/LVPSA_Tables.c	/^const LVM_UINT16    LVPSA_DownSamplingFactor[]  = {     5,                    \/* 8000  S\/s  *\/$/;"	v
LVPSA_ERROR_INVALIDPARAM	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_ERROR_INVALIDPARAM,                               \/* A parameter is incorrect                                          *\/$/;"	e	enum:__anon124
LVPSA_ERROR_NULLADDRESS	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_ERROR_NULLADDRESS,                                \/* A pointer has a NULL value                                        *\/$/;"	e	enum:__anon124
LVPSA_ERROR_WRONGTIME	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_ERROR_WRONGTIME,                                  \/* An incorrect AudioTime is used                                    *\/$/;"	e	enum:__anon124
LVPSA_FREQSHIFT	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	67;"	d
LVPSA_FilterParam_t	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^} LVPSA_FilterParam_t;$/;"	t	typeref:struct:__anon119
LVPSA_FsInvertShift	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	65;"	d
LVPSA_GAINSHIFT	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	66;"	d
LVPSA_GainTable	lvm/SpectrumAnalyzer/src/LVPSA_Tables.c	/^const LVM_INT16     LVPSA_GainTable[] = {   364,          \/* -15dB gain *\/$/;"	v
LVPSA_GetControlParams	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^LVPSA_RETURN LVPSA_GetControlParams  (    pLVPSA_Handle_t            hInstance,$/;"	p	signature:( pLVPSA_Handle_t hInstance, LVPSA_ControlParams_t *pParams )
LVPSA_GetControlParams	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_GetControlParams         (    pLVPSA_Handle_t            hInstance,$/;"	f	signature:( pLVPSA_Handle_t hInstance, LVPSA_ControlParams_t *pParams )
LVPSA_GetInitParams	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^LVPSA_RETURN LVPSA_GetInitParams     (    pLVPSA_Handle_t            hInstance,$/;"	p	signature:( pLVPSA_Handle_t hInstance, LVPSA_InitParams_t *pParams )
LVPSA_GetInitParams	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_GetInitParams         (    pLVPSA_Handle_t            hInstance,$/;"	f	signature:( pLVPSA_Handle_t hInstance, LVPSA_InitParams_t *pParams )
LVPSA_GetSpectrum	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^LVPSA_RETURN LVPSA_GetSpectrum       ( pLVPSA_Handle_t      hInstance,$/;"	p	signature:( pLVPSA_Handle_t hInstance, LVPSA_Time GetSpectrumAudioTime, LVM_UINT8 *pCurrentValues, LVM_UINT8 *pPeakValues )
LVPSA_GetSpectrum	lvm/SpectrumAnalyzer/src/LVPSA_Process.c	/^LVPSA_RETURN LVPSA_GetSpectrum       ( pLVPSA_Handle_t      hInstance,$/;"	f	signature:( pLVPSA_Handle_t hInstance, LVPSA_Time GetSpectrumAudioTime, LVM_UINT8 *pCurrentValues, LVM_UINT8 *pPeakValues )
LVPSA_INSTANCE_ALIGN	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	37;"	d
LVPSA_Init	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^LVPSA_RETURN LVPSA_Init              ( pLVPSA_Handle_t             *phInstance,$/;"	p	signature:( pLVPSA_Handle_t *phInstance, LVPSA_InitParams_t *pInitParams, LVPSA_ControlParams_t *pControlParams, LVPSA_MemTab_t *pMemoryTable )
LVPSA_Init	lvm/SpectrumAnalyzer/src/LVPSA_Init.c	/^LVPSA_RETURN LVPSA_Init              ( pLVPSA_Handle_t             *phInstance,$/;"	f	signature:( pLVPSA_Handle_t *phInstance, LVPSA_InitParams_t *pInitParams, LVPSA_ControlParams_t *pControlParams, LVPSA_MemTab_t *pMemoryTable )
LVPSA_InitParams_t	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^} LVPSA_InitParams_t, *pLVPSA_InitParams_t;$/;"	t	typeref:struct:__anon120
LVPSA_InstancePr_t	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^}LVPSA_InstancePr_t, *pLVPSA_InstancePr_t;$/;"	t	typeref:struct:__anon126
LVPSA_InternalRefreshTime	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	73;"	d
LVPSA_InternalRefreshTimeInv	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	74;"	d
LVPSA_InternalRefreshTimeShift	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	75;"	d
LVPSA_LevelDetectSpeed_en	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^} LVPSA_LevelDetectSpeed_en;$/;"	t	typeref:enum:__anon118
LVPSA_MAXBUFFERDURATION	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	50;"	d
LVPSA_MAXCENTERFREQ	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	54;"	d
LVPSA_MAXINPUTBLOCKSIZE	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	51;"	d
LVPSA_MAXLEVELDECAYFACTOR	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	60;"	d
LVPSA_MAXLEVELDECAYSHIFT	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	61;"	d
LVPSA_MAXPOSTGAIN	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	56;"	d
LVPSA_MAXQFACTOR	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	58;"	d
LVPSA_MAXUNSIGNEDCHAR	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	63;"	d
LVPSA_MEMORY_DUMMY	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_MEMORY_DUMMY = LVM_MAXINT_32                      \/* Force 32 bits enum, don't use it!                                 *\/$/;"	e	enum:__anon117
LVPSA_MEMREGION_INSTANCE	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	42;"	d
LVPSA_MEMREGION_PERSISTENT_COEF	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	43;"	d
LVPSA_MEMREGION_PERSISTENT_DATA	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	44;"	d
LVPSA_MEMREGION_SCRATCH	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	45;"	d
LVPSA_MINPOSTGAIN	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	55;"	d
LVPSA_MINQFACTOR	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	57;"	d
LVPSA_MemTab_t	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^} LVPSA_MemTab_t;$/;"	t	typeref:struct:__anon123
LVPSA_Memory	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^LVPSA_RETURN LVPSA_Memory            ( pLVPSA_Handle_t             hInstance,$/;"	p	signature:( pLVPSA_Handle_t hInstance, LVPSA_MemTab_t *pMemoryTable, LVPSA_InitParams_t *pInitParams )
LVPSA_Memory	lvm/SpectrumAnalyzer/src/LVPSA_Memory.c	/^LVPSA_RETURN LVPSA_Memory            ( pLVPSA_Handle_t             hInstance,$/;"	f	signature:( pLVPSA_Handle_t hInstance, LVPSA_MemTab_t *pMemoryTable, LVPSA_InitParams_t *pInitParams )
LVPSA_MemoryRegion_t	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^} LVPSA_MemoryRegion_t;$/;"	t	typeref:struct:__anon122
LVPSA_MemoryTypes_en	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^} LVPSA_MemoryTypes_en;$/;"	t	typeref:enum:__anon117
LVPSA_NBANDSMAX	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	53;"	d
LVPSA_NBANDSMIN	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	52;"	d
LVPSA_NR_MEMORY_REGIONS	lvm/SpectrumAnalyzer/lib/LVPSA.h	36;"	d
LVPSA_NR_SUPPORTED_RATE	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	47;"	d
LVPSA_NR_SUPPORTED_SPEED	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	48;"	d
LVPSA_OK	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_OK,                                               \/* The function ran without any problem                              *\/$/;"	e	enum:__anon124
LVPSA_PERSISTENT	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_PERSISTENT      = LVM_PERSISTENT,$/;"	e	enum:__anon117
LVPSA_PERSISTENT_COEF	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_PERSISTENT_COEF = LVM_PERSISTENT_COEF,$/;"	e	enum:__anon117
LVPSA_PERSISTENT_DATA	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_PERSISTENT_DATA = LVM_PERSISTENT_DATA,$/;"	e	enum:__anon117
LVPSA_Process	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^LVPSA_RETURN LVPSA_Process           ( pLVPSA_Handle_t      hInstance,$/;"	p	signature:( pLVPSA_Handle_t hInstance, LVM_INT16 *pLVPSA_InputSamples, LVM_UINT16 InputBlockSize, LVPSA_Time AudioTime )
LVPSA_Process	lvm/SpectrumAnalyzer/src/LVPSA_Process.c	/^LVPSA_RETURN LVPSA_Process           ( pLVPSA_Handle_t      hInstance,$/;"	f	signature:( pLVPSA_Handle_t hInstance, LVM_INT16 *pLVPSA_InputSamples, LVM_UINT16 InputBlockSize, LVPSA_Time AudioTime )
LVPSA_QPD_Coefs	lvm/SpectrumAnalyzer/src/LVPSA_Tables.c	/^const QPD_C32_Coefs     LVPSA_QPD_Coefs[] = {$/;"	v
LVPSA_QPD_Init	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^void LVPSA_QPD_Init (   QPD_State_t       *pInstance,$/;"	p	signature:( QPD_State_t *pInstance, QPD_Taps_t *pTaps, QPD_C32_Coefs *pCoef )
LVPSA_QPD_Init	lvm/SpectrumAnalyzer/src/LVPSA_QPD_Init.c	/^void LVPSA_QPD_Init (   pQPD_State_t       pQPD_State,$/;"	f	signature:( pQPD_State_t pQPD_State, QPD_Taps_t *pTaps, QPD_C32_Coefs *pCoef )
LVPSA_QPD_Process	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^void LVPSA_QPD_Process (            void                               *hInstance,$/;"	p	signature:( void *hInstance, LVM_INT16 *pInSamps, LVM_INT16 numSamples, LVM_INT16 BandIndex)
LVPSA_QPD_Process	lvm/SpectrumAnalyzer/src/LVPSA_QPD_Process.c	/^void LVPSA_QPD_Process (            void                               *hInstance,$/;"	f	signature:( void *hInstance, LVM_INT16 *pInSamps, LVM_INT16 numSamples, LVM_INT16 BandIndex)
LVPSA_QPD_WritePeak	lvm/SpectrumAnalyzer/src/LVPSA_QPD_Process.c	/^void LVPSA_QPD_WritePeak(   pLVPSA_InstancePr_t       pLVPSA_Inst,$/;"	f	signature:( pLVPSA_InstancePr_t pLVPSA_Inst, LVM_UINT8 **ppWrite, LVM_INT16 BandIndex, LVM_INT16 Value )
LVPSA_QPD_WritePeak	lvm/SpectrumAnalyzer/src/LVPSA_QPD_Process.c	/^void LVPSA_QPD_WritePeak(   pLVPSA_InstancePr_t       pLVPSA_Inst,$/;"	p	file:	signature:( pLVPSA_InstancePr_t pLVPSA_Inst, LVM_UINT8 **ppWrite, LVM_INT16 BandIndex, LVM_INT16 Value )
LVPSA_RETURN	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^} LVPSA_RETURN;$/;"	t	typeref:enum:__anon124
LVPSA_RETURN_DUMMY	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_RETURN_DUMMY = LVM_MAXINT_32                      \/* Force 32 bits enum, don't use it!                                 *\/$/;"	e	enum:__anon124
LVPSA_SCRATCH	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_SCRATCH         = LVM_SCRATCH,$/;"	e	enum:__anon117
LVPSA_SCRATCH_ALIGN	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	38;"	d
LVPSA_SPEED_DUMMY	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_SPEED_DUMMY = LVM_MAXINT_32                       \/* Force 32 bits enum, don't use it!                                 *\/$/;"	e	enum:__anon118
LVPSA_SPEED_HIGH	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_SPEED_HIGH,                                       \/* High speed level   detection                                      *\/$/;"	e	enum:__anon118
LVPSA_SPEED_LOW	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_SPEED_LOW,                                        \/* Low speed level   detection                                       *\/$/;"	e	enum:__anon118
LVPSA_SPEED_MEDIUM	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_SPEED_MEDIUM,                                     \/* Medium speed level   detection                                    *\/$/;"	e	enum:__anon118
LVPSA_SampleRateInvTab	lvm/SpectrumAnalyzer/src/LVPSA_Tables.c	/^const LVM_UINT32    LVPSA_SampleRateInvTab[] = {    268435,                    \/* 8kS\/s  *\/$/;"	v
LVPSA_SampleRateTab	lvm/SpectrumAnalyzer/src/LVPSA_Tables.c	/^const LVM_UINT16    LVPSA_SampleRateTab[] = {   8000,                    \/* 8kS\/s  *\/$/;"	v
LVPSA_SetBPFCoefficients	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_SetBPFCoefficients(  LVPSA_InstancePr_t        *pInst,$/;"	f	signature:( LVPSA_InstancePr_t *pInst, LVPSA_ControlParams_t *pParams)
LVPSA_SetBPFCoefficients	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_SetBPFCoefficients( LVPSA_InstancePr_t        *pInst,$/;"	p	file:	signature:( LVPSA_InstancePr_t *pInst, LVPSA_ControlParams_t *pParams )
LVPSA_SetBPFiltersType	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_SetBPFiltersType (   LVPSA_InstancePr_t        *pInst,$/;"	f	signature:( LVPSA_InstancePr_t *pInst, LVPSA_ControlParams_t *pParams )
LVPSA_SetBPFiltersType	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_SetBPFiltersType (  LVPSA_InstancePr_t        *pInst,$/;"	p	file:	signature:( LVPSA_InstancePr_t *pInst, LVPSA_ControlParams_t *pParams )
LVPSA_SetQPFCoefficients	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_SetQPFCoefficients(   LVPSA_InstancePr_t        *pInst,$/;"	f	signature:( LVPSA_InstancePr_t *pInst, LVPSA_ControlParams_t *pParams )
LVPSA_SetQPFCoefficients	lvm/SpectrumAnalyzer/src/LVPSA_Control.c	/^LVPSA_RETURN LVPSA_SetQPFCoefficients( LVPSA_InstancePr_t        *pInst,$/;"	p	file:	signature:( LVPSA_InstancePr_t *pInst, LVPSA_ControlParams_t *pParams )
LVPSA_SimplePrecisionFilter	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_SimplePrecisionFilter,    \/* Simple precision *\/$/;"	e	enum:__anon125
LVPSA_Time	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^typedef LVM_INT32 LVPSA_Time;$/;"	t
LVPSA_TwoPiOnFsTable	lvm/SpectrumAnalyzer/src/LVPSA_Tables.c	/^const LVM_INT16     LVPSA_TwoPiOnFsTable[] = {  26354,      \/* 8kS\/s *\/$/;"	v
LVPSA_nSamplesBufferUpdate	lvm/SpectrumAnalyzer/src/LVPSA_Tables.c	/^const LVM_UINT16    LVPSA_nSamplesBufferUpdate[]  = {   160,                   \/* 8kS\/s  *\/$/;"	v
LVREV_2_9_INQ29	lvm/Reverb/src/LVREV_Private.h	49;"	d
LVREV_ALLPASS_TAP_TC	lvm/Reverb/src/LVREV_Private.h	74;"	d
LVREV_ALLPASS_TC	lvm/Reverb/src/LVREV_Private.h	73;"	d
LVREV_ApplyNewSettings	lvm/Reverb/src/LVREV_ApplyNewSettings.c	/^LVREV_ReturnStatus_en LVREV_ApplyNewSettings (LVREV_Instance_st     *pPrivate)$/;"	f	signature:(LVREV_Instance_st *pPrivate)
LVREV_ApplyNewSettings	lvm/Reverb/src/LVREV_Private.h	/^LVREV_ReturnStatus_en   LVREV_ApplyNewSettings(LVREV_Instance_st     *pPrivate);$/;"	p	signature:(LVREV_Instance_st *pPrivate)
LVREV_BLOCKSIZE_MULTIPLE	lvm/Reverb/lib/LVREV.h	50;"	d
LVREV_BYPASSMIXER_TC	lvm/Reverb/src/LVREV_Private.h	72;"	d
LVREV_B_8_on_1000	lvm/Reverb/src/LVREV_Private.h	47;"	d
LVREV_ClearAudioBuffers	lvm/Reverb/lib/LVREV.h	/^LVREV_ReturnStatus_en LVREV_ClearAudioBuffers(LVREV_Handle_t  hInstance);$/;"	p	signature:(LVREV_Handle_t hInstance)
LVREV_ClearAudioBuffers	lvm/Reverb/src/LVREV_ClearAudioBuffers.c	/^LVREV_ReturnStatus_en LVREV_ClearAudioBuffers(LVREV_Handle_t  hInstance)$/;"	f	signature:(LVREV_Handle_t hInstance)
LVREV_ControlParams_st	lvm/Reverb/lib/LVREV.h	/^} LVREV_ControlParams_st;$/;"	t	typeref:struct:__anon44
LVREV_DELAYLINES_1	lvm/Reverb/lib/LVREV.h	/^    LVREV_DELAYLINES_1     = 1,                         \/* One delay line *\/$/;"	e	enum:__anon42
LVREV_DELAYLINES_2	lvm/Reverb/lib/LVREV.h	/^    LVREV_DELAYLINES_2     = 2,                         \/* Two delay lines *\/$/;"	e	enum:__anon42
LVREV_DELAYLINES_4	lvm/Reverb/lib/LVREV.h	/^    LVREV_DELAYLINES_4     = 4,                         \/* Four delay lines *\/$/;"	e	enum:__anon42
LVREV_DELAYLINES_DUMMY	lvm/Reverb/lib/LVREV.h	/^    LVREV_DELAYLINES_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon42
LVREV_FEEDBACKMIXER_TC	lvm/Reverb/src/LVREV_Private.h	75;"	d
LVREV_FastCoef_st	lvm/Reverb/src/LVREV_Private.h	/^} LVREV_FastCoef_st;$/;"	t	typeref:struct:__anon47
LVREV_FastData_st	lvm/Reverb/src/LVREV_Private.h	/^} LVREV_FastData_st;$/;"	t	typeref:struct:__anon46
LVREV_GainPolyTable	lvm/Reverb/src/LVREV_Tables.c	/^const LVM_INT32 LVREV_GainPolyTable[24][5]={{1,17547434,128867434,-120988896,50761228,},$/;"	v
LVREV_GetControlParameters	lvm/Reverb/lib/LVREV.h	/^LVREV_ReturnStatus_en LVREV_GetControlParameters(LVREV_Handle_t           hInstance,$/;"	p	signature:(LVREV_Handle_t hInstance, LVREV_ControlParams_st *pControlParams)
LVREV_GetControlParameters	lvm/Reverb/src/LVREV_GetControlParameters.c	/^LVREV_ReturnStatus_en LVREV_GetControlParameters(LVREV_Handle_t           hInstance,$/;"	f	signature:(LVREV_Handle_t hInstance, LVREV_ControlParams_st *pControlParams)
LVREV_GetInstanceHandle	lvm/Reverb/lib/LVREV.h	/^LVREV_ReturnStatus_en LVREV_GetInstanceHandle(LVREV_Handle_t            *phInstance,$/;"	p	signature:(LVREV_Handle_t *phInstance, LVREV_MemoryTable_st *pMemoryTable, LVREV_InstanceParams_st *pInstanceParams)
LVREV_GetInstanceHandle	lvm/Reverb/src/LVREV_GetInstanceHandle.c	/^LVREV_ReturnStatus_en LVREV_GetInstanceHandle(LVREV_Handle_t            *phInstance,$/;"	f	signature:(LVREV_Handle_t *phInstance, LVREV_MemoryTable_st *pMemoryTable, LVREV_InstanceParams_st *pInstanceParams)
LVREV_GetMemoryTable	lvm/Reverb/lib/LVREV.h	/^LVREV_ReturnStatus_en LVREV_GetMemoryTable(LVREV_Handle_t           hInstance,$/;"	p	signature:(LVREV_Handle_t hInstance, LVREV_MemoryTable_st *pMemoryTable, LVREV_InstanceParams_st *pInstanceParams)
LVREV_GetMemoryTable	lvm/Reverb/src/LVREV_GetMemoryTable.c	/^LVREV_ReturnStatus_en LVREV_GetMemoryTable(LVREV_Handle_t           hInstance,$/;"	f	signature:(LVREV_Handle_t hInstance, LVREV_MemoryTable_st *pMemoryTable, LVREV_InstanceParams_st *pInstanceParams)
LVREV_HEADROOM	lvm/Reverb/src/LVREV_Private.h	48;"	d
LVREV_Handle_t	lvm/Reverb/lib/LVREV.h	/^typedef void *LVREV_Handle_t;$/;"	t
LVREV_INVALIDNUMSAMPLES	lvm/Reverb/lib/LVREV.h	/^    LVREV_INVALIDNUMSAMPLES  = 3,                       \/* Invalid number of samples *\/$/;"	e	enum:__anon41
LVREV_InstanceParams_st	lvm/Reverb/lib/LVREV.h	/^} LVREV_InstanceParams_st;$/;"	t	typeref:struct:__anon45
LVREV_Instance_st	lvm/Reverb/src/LVREV_Private.h	/^} LVREV_Instance_st;$/;"	t	typeref:struct:__anon48
LVREV_LP_Poly_Order	lvm/Reverb/src/LVREV_Private.h	53;"	d
LVREV_LP_Poly_Shift	lvm/Reverb/src/LVREV_Private.h	54;"	d
LVREV_MAXBLKSIZE_LIMIT	lvm/Reverb/src/LVREV_Private.h	80;"	d
LVREV_MAX_AP0_DELAY	lvm/Reverb/src/LVREV_Private.h	71;"	d
LVREV_MAX_AP1_DELAY	lvm/Reverb/src/LVREV_Private.h	70;"	d
LVREV_MAX_AP2_DELAY	lvm/Reverb/src/LVREV_Private.h	69;"	d
LVREV_MAX_AP3_DELAY	lvm/Reverb/src/LVREV_Private.h	68;"	d
LVREV_MAX_DAMPING	lvm/Reverb/src/LVREV_Private.h	88;"	d
LVREV_MAX_DENSITY	lvm/Reverb/src/LVREV_Private.h	87;"	d
LVREV_MAX_HPF_CORNER	lvm/Reverb/src/LVREV_Private.h	85;"	d
LVREV_MAX_LEVEL	lvm/Reverb/src/LVREV_Private.h	81;"	d
LVREV_MAX_LPF_CORNER	lvm/Reverb/src/LVREV_Private.h	83;"	d
LVREV_MAX_ROOMSIZE	lvm/Reverb/src/LVREV_Private.h	89;"	d
LVREV_MAX_T0_DELAY	lvm/Reverb/src/LVREV_Private.h	67;"	d
LVREV_MAX_T1_DELAY	lvm/Reverb/src/LVREV_Private.h	66;"	d
LVREV_MAX_T2_DELAY	lvm/Reverb/src/LVREV_Private.h	65;"	d
LVREV_MAX_T3_DELAY	lvm/Reverb/src/LVREV_Private.h	64;"	d
LVREV_MAX_T60	lvm/Reverb/lib/LVREV.h	51;"	d
LVREV_MAX_T60	lvm/Reverb/src/LVREV_Private.h	86;"	d
LVREV_MIN3DB	lvm/Reverb/src/LVREV_Private.h	50;"	d
LVREV_MIN_HPF_CORNER	lvm/Reverb/src/LVREV_Private.h	84;"	d
LVREV_MIN_LPF_CORNER	lvm/Reverb/src/LVREV_Private.h	82;"	d
LVREV_MemoryTable_st	lvm/Reverb/lib/LVREV.h	/^} LVREV_MemoryTable_st;$/;"	t	typeref:struct:__anon43
LVREV_NR_MEMORY_REGIONS	lvm/Reverb/lib/LVREV.h	54;"	d
LVREV_NULLADDRESS	lvm/Reverb/lib/LVREV.h	/^    LVREV_NULLADDRESS        = 1,                       \/* NULL allocation address *\/$/;"	e	enum:__anon41
LVREV_NUM_FS	lvm/Reverb/src/LVREV_Private.h	79;"	d
LVREV_NumDelayLines_en	lvm/Reverb/lib/LVREV.h	/^} LVREV_NumDelayLines_en;$/;"	t	typeref:enum:__anon42
LVREV_OUTOFRANGE	lvm/Reverb/lib/LVREV.h	/^    LVREV_OUTOFRANGE         = 2,                       \/* Out of range control parameter *\/$/;"	e	enum:__anon41
LVREV_OUTPUTGAIN_SHIFT	lvm/Reverb/src/LVREV_Private.h	76;"	d
LVREV_Process	lvm/Reverb/lib/LVREV.h	/^LVREV_ReturnStatus_en LVREV_Process(LVREV_Handle_t      hInstance,$/;"	p	signature:(LVREV_Handle_t hInstance, const LVM_INT32 *pInData, LVM_INT32 *pOutData, const LVM_UINT16 NumSamples)
LVREV_Process	lvm/Reverb/src/LVREV_Process.c	/^LVREV_ReturnStatus_en LVREV_Process(LVREV_Handle_t      hInstance,$/;"	f	signature:(LVREV_Handle_t hInstance, const LVM_INT32 *pInData, LVM_INT32 *pOutData, const LVM_UINT16 NumSamples)
LVREV_RETURNSTATUS_DUMMY	lvm/Reverb/lib/LVREV.h	/^    LVREV_RETURNSTATUS_DUMMY = LVM_MAXENUM$/;"	e	enum:__anon41
LVREV_ReturnStatus_en	lvm/Reverb/lib/LVREV.h	/^} LVREV_ReturnStatus_en;$/;"	t	typeref:enum:__anon41
LVREV_SUCCESS	lvm/Reverb/lib/LVREV.h	/^    LVREV_SUCCESS            = 0,                       \/* Successful return from a routine *\/$/;"	e	enum:__anon41
LVREV_SetControlParameters	lvm/Reverb/lib/LVREV.h	/^LVREV_ReturnStatus_en LVREV_SetControlParameters(LVREV_Handle_t           hInstance,$/;"	p	signature:(LVREV_Handle_t hInstance, LVREV_ControlParams_st *pNewParams)
LVREV_SetControlParameters	lvm/Reverb/src/LVREV_SetControlParameters.c	/^LVREV_ReturnStatus_en LVREV_SetControlParameters(LVREV_Handle_t           hInstance,$/;"	f	signature:(LVREV_Handle_t hInstance, LVREV_ControlParams_st *pNewParams)
LVREV_T60_SCALE	lvm/Reverb/src/LVREV_Private.h	59;"	d
LVREV_T_3_Power_0_on_4	lvm/Reverb/src/LVREV_Private.h	55;"	d
LVREV_T_3_Power_1_on_4	lvm/Reverb/src/LVREV_Private.h	56;"	d
LVREV_T_3_Power_2_on_4	lvm/Reverb/src/LVREV_Private.h	57;"	d
LVREV_T_3_Power_3_on_4	lvm/Reverb/src/LVREV_Private.h	58;"	d
LVREV_T_3_Power_minus0_on_4	lvm/Reverb/src/LVREV_Private.h	60;"	d
LVREV_T_3_Power_minus1_on_4	lvm/Reverb/src/LVREV_Private.h	61;"	d
LVREV_T_3_Power_minus2_on_4	lvm/Reverb/src/LVREV_Private.h	62;"	d
LVREV_T_3_Power_minus3_on_4	lvm/Reverb/src/LVREV_Private.h	63;"	d
LVVDL_2PiByFs_SHIFT1	lvm/Common/src/LVM_GetOmega.c	32;"	d	file:
LVVDL_2PiByFs_SHIFT2	lvm/Common/src/LVM_GetOmega.c	33;"	d	file:
LVVDL_2PiByFs_SHIFT3	lvm/Common/src/LVM_GetOmega.c	34;"	d	file:
LVVDL_2PiBy_11025	lvm/Common/src/LVM_GetOmega.c	29;"	d	file:
LVVDL_2PiBy_12000	lvm/Common/src/LVM_GetOmega.c	30;"	d	file:
LVVDL_2PiBy_8000	lvm/Common/src/LVM_GetOmega.c	28;"	d	file:
LVVDL_2PiOnFsShiftTable	lvm/Common/src/LVM_GetOmega.c	/^const LVM_INT32     LVVDL_2PiOnFsShiftTable[]={LVVDL_2PiByFs_SHIFT1 ,         \/* 8kHz, 11025Hz, 12kHz *\/$/;"	v
LVVDL_2PiOnFsTable	lvm/Common/src/LVM_GetOmega.c	/^const LVM_INT32     LVVDL_2PiOnFsTable[] =  {LVVDL_2PiBy_8000 , \/* 8kHz in Q41, 16kHz in Q42, 32kHz in Q43 *\/$/;"	v
LeftDC	lvm/Common/src/DC_2I_D16_TRC_WRA_01_Private.h	/^  LVM_INT32  LeftDC;     \/* LeftDC  *\/$/;"	m	struct:_Filter_State_	access:public
Level	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  Level;                  \/* Level, 0 to 100 representing percentage of reverb *\/$/;"	m	struct:__anon44	access:public
LevelDetectionSpeed	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_LevelDetectSpeed_en  LevelDetectionSpeed;         \/* Level detection speed                                             *\/$/;"	m	struct:__anon121	access:public
Limit_High	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  Limit_High;             \/* High frequency limit of the band in Hertz *\/$/;"	m	struct:__anon31	access:public
Limit_Low	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  Limit_Low;              \/* Low frequency limit of the band in Hertz *\/$/;"	m	struct:__anon31	access:public
LoadConst_16	lvm/Common/lib/VectorArithmetic.h	/^void LoadConst_16(            const LVM_INT16 val,$/;"	p	signature:( const LVM_INT16 val, LVM_INT16 *dst, LVM_INT16 n )
LoadConst_16	lvm/Common/src/LoadConst_16.c	/^void LoadConst_16(const LVM_INT16 val,$/;"	f	signature:(const LVM_INT16 val, LVM_INT16 *dst, LVM_INT16 n )
LoadConst_32	lvm/Common/lib/VectorArithmetic.h	/^void LoadConst_32(            const LVM_INT32 val,$/;"	p	signature:( const LVM_INT32 val, LVM_INT32 *dst, LVM_INT16 n )
LoadConst_32	lvm/Common/src/LoadConst_32.c	/^void LoadConst_32(const LVM_INT32   val,$/;"	f	signature:(const LVM_INT32 val, LVM_INT32 *dst, LVM_INT16 n )
LocalSamplesCount	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  LocalSamplesCount;                  \/* Counter used to update the SpectralDataBufferAudioTime                                       *\/$/;"	m	struct:__anon126	access:public
Loss	lvm/StereoWidening/src/LVCS_BypassMix.h	/^    LVM_UINT16              Loss;                       \/* Loss required *\/$/;"	m	struct:__anon111	access:public
MAKEROOT	Makefile	/^export MAKEROOT := $(shell pwd)$/;"	m
MAKEROOT	lvm/Makefile	/^export MAKEROOT := $(shell pwd)$/;"	m
MAX_INTERNAL_BLOCKSIZE	lvm/Bundle/src/LVM_Private.h	72;"	d
MAX_NAME_LEN	include/dtap.h	30;"	d
MAX_VALUE	lvm/Common/src/dB_to_Lin32.c	65;"	d	file:
MIN_INTERNAL_BLOCKMASK	lvm/Bundle/src/LVM_Private.h	76;"	d
MIN_INTERNAL_BLOCKSHIFT	lvm/Bundle/src/LVM_Private.h	75;"	d
MIN_INTERNAL_BLOCKSIZE	lvm/Bundle/src/LVM_Private.h	74;"	d
MIX_TC_Fs11025	lvm/Bass/src/LVDBE_Coeffs.h	508;"	d
MIX_TC_Fs12000	lvm/Bass/src/LVDBE_Coeffs.h	509;"	d
MIX_TC_Fs16000	lvm/Bass/src/LVDBE_Coeffs.h	510;"	d
MIX_TC_Fs22050	lvm/Bass/src/LVDBE_Coeffs.h	511;"	d
MIX_TC_Fs24000	lvm/Bass/src/LVDBE_Coeffs.h	512;"	d
MIX_TC_Fs32000	lvm/Bass/src/LVDBE_Coeffs.h	513;"	d
MIX_TC_Fs44100	lvm/Bass/src/LVDBE_Coeffs.h	514;"	d
MIX_TC_Fs48000	lvm/Bass/src/LVDBE_Coeffs.h	515;"	d
MIX_TC_Fs8000	lvm/Bass/src/LVDBE_Coeffs.h	507;"	d
MSTarget0	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               MSTarget0;                          \/* Mixer state control variable for smooth transtion *\/$/;"	m	struct:__anon114	access:public
MSTarget1	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               MSTarget1;                          \/* Mixer state control variable for smooth transtion *\/$/;"	m	struct:__anon114	access:public
MSTo2i_Sat_16x16	lvm/Common/lib/VectorArithmetic.h	/^void MSTo2i_Sat_16x16(        const LVM_INT16 *srcM,$/;"	p	signature:( const LVM_INT16 *srcM, const LVM_INT16 *srcS, LVM_INT16 *dst, LVM_INT16 n )
MSTo2i_Sat_16x16	lvm/Common/src/MSTo2i_Sat_16x16.c	/^void MSTo2i_Sat_16x16(const LVM_INT16  *srcM,$/;"	f	signature:(const LVM_INT16 *srcM, const LVM_INT16 *srcS, LVM_INT16 *dst, LVM_INT16 n )
MUL32x16INTO32	lvm/Common/lib/LVM_Macros.h	75;"	d
MUL32x32INTO32	lvm/Common/lib/LVM_Macros.h	36;"	d
Mac3s_Sat_16x16	lvm/Common/lib/VectorArithmetic.h	/^void Mac3s_Sat_16x16(         const LVM_INT16 *src,$/;"	p	signature:( const LVM_INT16 *src, const LVM_INT16 val, LVM_INT16 *dst, LVM_INT16 n)
Mac3s_Sat_16x16	lvm/Common/src/Mac3s_Sat_16x16.c	/^void Mac3s_Sat_16x16( const LVM_INT16 *src,$/;"	f	signature:( const LVM_INT16 *src, const LVM_INT16 val, LVM_INT16 *dst, LVM_INT16 n)
Mac3s_Sat_32x16	lvm/Common/lib/VectorArithmetic.h	/^void Mac3s_Sat_32x16(         const LVM_INT32  *src,$/;"	p	signature:( const LVM_INT32 *src, const LVM_INT16 val, LVM_INT32 *dst, LVM_INT16 n)
Mac3s_Sat_32x16	lvm/Common/src/Mac3s_Sat_32x16.c	/^void Mac3s_Sat_32x16(  const LVM_INT32 *src,$/;"	f	signature:( const LVM_INT32 *src, const LVM_INT16 val, LVM_INT32 *dst, LVM_INT16 n)
MaxBands	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  MaxBands;$/;"	m	struct:__anon59	access:public
MaxBlkLen	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               MaxBlkLen;                  \/* Maximum block size for internal processing *\/$/;"	m	struct:__anon48	access:public
MaxBlockSize	lvm/Bass/lib/LVDBE.h	/^      LVM_UINT16              MaxBlockSize;             \/* Maximum block size in sample pairs *\/$/;"	m	struct:__anon11	access:public
MaxBlockSize	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  MaxBlockSize;           \/* Maximum processing block size *\/$/;"	m	struct:__anon33	access:public
MaxBlockSize	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  MaxBlockSize;$/;"	m	struct:__anon59	access:public
MaxBlockSize	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  MaxBlockSize;           \/* Maximum processing block size *\/$/;"	m	struct:__anon45	access:public
MaxBlockSize	lvm/StereoWidening/lib/LVCS.h	/^    LVM_UINT16              MaxBlockSize;           \/* Maximum block size in sample pairs *\/$/;"	m	struct:__anon106	access:public
MaxInputBlockSize	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT16                 MaxInputBlockSize;           \/* Maximum expected input block size (in samples)                    *\/$/;"	m	struct:__anon120	access:public
MaxInputBlockSize	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  MaxInputBlockSize;                  \/* Maximum input data buffer size                                                               *\/$/;"	m	struct:__anon126	access:public
MemoryTable	lvm/Bass/src/LVDBE_Private.h	/^    LVDBE_MemTab_t                MemoryTable;        \/* Instance memory allocation table *\/$/;"	m	struct:__anon14	access:public
MemoryTable	lvm/Bundle/src/LVM_Private.h	/^    LVM_MemTab_t            MemoryTable;        \/* Instance memory allocation table *\/$/;"	m	struct:__anon40	access:public
MemoryTable	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_MemTab_t                 MemoryTable;        \/* Instance memory allocation table *\/$/;"	m	struct:__anon61	access:public
MemoryTable	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_MemoryTable_st    MemoryTable;                \/* Memory table *\/$/;"	m	struct:__anon48	access:public
MemoryTable	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_MemTab_t              MemoryTable;$/;"	m	struct:__anon126	access:public
MemoryTable	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_MemTab_t           MemoryTable;        \/* Instance memory allocation table *\/$/;"	m	struct:__anon114	access:public
MidGain	lvm/StereoWidening/src/LVCS_StereoEnhancer.h	/^      LVM_UINT16              MidGain;            \/* Middle gain in mobile speaker mode *\/$/;"	m	struct:__anon109	access:public
MixInSoft_D32C31_SAT	lvm/Common/lib/Mixer.h	/^void MixInSoft_D32C31_SAT(      Mix_1St_Cll_t       *pInstance,$/;"	p	signature:( Mix_1St_Cll_t *pInstance, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
MixInSoft_D32C31_SAT	lvm/Common/src/MixInSoft_D32C31_SAT.c	/^void MixInSoft_D32C31_SAT( Mix_1St_Cll_t        *pInstance,$/;"	f	signature:( Mix_1St_Cll_t *pInstance, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
MixSoft_1St_D32C31_WRA	lvm/Common/lib/Mixer.h	/^void MixSoft_1St_D32C31_WRA(    Mix_1St_Cll_t       *pInstance,$/;"	p	signature:( Mix_1St_Cll_t *pInstance, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
MixSoft_1St_D32C31_WRA	lvm/Common/src/MixSoft_1St_D32C31_WRA.c	/^void MixSoft_1St_D32C31_WRA(    Mix_1St_Cll_t       *pInstance,$/;"	f	signature:( Mix_1St_Cll_t *pInstance, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
MixSoft_2St_D32C31_SAT	lvm/Common/lib/Mixer.h	/^void MixSoft_2St_D32C31_SAT(    Mix_2St_Cll_t       *pInstance,$/;"	p	signature:( Mix_2St_Cll_t *pInstance, const LVM_INT32 *src1, const LVM_INT32 *src2, LVM_INT32 *dst, LVM_INT16 n)
MixSoft_2St_D32C31_SAT	lvm/Common/src/MixSoft_2St_D32C31_SAT.c	/^void MixSoft_2St_D32C31_SAT(    Mix_2St_Cll_t       *pInstance,$/;"	f	signature:( Mix_2St_Cll_t *pInstance, const LVM_INT32 *src1, const LVM_INT32 *src2, LVM_INT32 *dst, LVM_INT16 n)
Mix_1St_Cll_t	lvm/Common/lib/Mixer.h	/^} Mix_1St_Cll_t;$/;"	t	typeref:struct:__anon86
Mix_2St_Cll_t	lvm/Common/lib/Mixer.h	/^} Mix_2St_Cll_t;$/;"	t	typeref:struct:__anon87
Mix_Private_st	lvm/Common/src/LVC_Mixer_Private.h	/^} Mix_Private_st;$/;"	t	typeref:struct:__anon96
MixerStream	lvm/Common/src/LVC_Mixer.h	/^    LVMixer3_st     MixerStream[1];    \/* Instance Params for one Audio Stream *\/$/;"	m	struct:__anon90	access:public
MixerStream	lvm/Common/src/LVC_Mixer.h	/^    LVMixer3_st     MixerStream[2];    \/* Instance Params for two Audio Streams *\/$/;"	m	struct:__anon91	access:public
MixerStream	lvm/Common/src/LVC_Mixer.h	/^    LVMixer3_st     MixerStream[3];    \/* Instance Params for three Audio Streams *\/$/;"	m	struct:__anon92	access:public
Mixer_APTaps	lvm/Reverb/src/LVREV_Private.h	/^    Mix_2St_Cll_t           Mixer_APTaps[4];            \/* Smoothed AP delay mixer *\/$/;"	m	struct:__anon48	access:public
Mixer_Instance	lvm/StereoWidening/src/LVCS_BypassMix.h	/^    LVMixer3_2St_st         Mixer_Instance;             \/* Mixer instance *\/$/;"	m	struct:__anon110	access:public
Mixer_SGFeedback	lvm/Reverb/src/LVREV_Private.h	/^    Mix_1St_Cll_t           Mixer_SGFeedback[4];        \/* Smoothed SAfeedback gain *\/$/;"	m	struct:__anon48	access:public
Mixer_SGFeedforward	lvm/Reverb/src/LVREV_Private.h	/^    Mix_1St_Cll_t           Mixer_SGFeedforward[4];     \/* Smoothed AP feedforward gain *\/$/;"	m	struct:__anon48	access:public
MonoTo2I_16	lvm/Common/lib/VectorArithmetic.h	/^void MonoTo2I_16(             const LVM_INT16 *src,$/;"	p	signature:( const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
MonoTo2I_16	lvm/Common/src/MonoTo2I_16.c	/^void MonoTo2I_16( const LVM_INT16 *src,$/;"	f	signature:( const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
MonoTo2I_32	lvm/Common/lib/VectorArithmetic.h	/^void MonoTo2I_32(             const LVM_INT32  *src,$/;"	p	signature:( const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
MonoTo2I_32	lvm/Common/src/MonoTo2I_32.c	/^void MonoTo2I_32( const LVM_INT32  *src,$/;"	f	signature:( const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
Mult3s_16x16	lvm/Common/lib/VectorArithmetic.h	/^void Mult3s_16x16(            const LVM_INT16 *src,$/;"	p	signature:( const LVM_INT16 *src, const LVM_INT16 val, LVM_INT16 *dst, LVM_INT16 n)
Mult3s_16x16	lvm/Common/src/mult3s_16x16.c	/^void Mult3s_16x16( const LVM_INT16 *src,$/;"	f	signature:( const LVM_INT16 *src, const LVM_INT16 val, LVM_INT16 *dst, LVM_INT16 n)
Mult3s_32x16	lvm/Common/lib/VectorArithmetic.h	/^void Mult3s_32x16(            const LVM_INT32  *src,$/;"	p	signature:( const LVM_INT32 *src, const LVM_INT16 val, LVM_INT32 *dst, LVM_INT16 n)
Mult3s_32x16	lvm/Common/src/Mult3s_32x16.c	/^void Mult3s_32x16( const LVM_INT32 *src,$/;"	f	signature:( const LVM_INT32 *src, const LVM_INT16 val, LVM_INT32 *dst, LVM_INT16 n)
NBands	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  NBands;                 \/* Number of bands *\/$/;"	m	struct:__anon58	access:public
NBands	lvm/Eq/src/LVEQNB_Private.h	/^    LVM_UINT16                      NBands;             \/* Number of bands *\/$/;"	m	struct:__anon61	access:public
NHeadroomBands	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  NHeadroomBands;         \/* Number of headroom bands *\/$/;"	m	struct:__anon34	access:public
NewHeadroomParams	lvm/Bundle/src/LVM_Private.h	/^    LVM_HeadroomParams_t    NewHeadroomParams;   \/* New headroom parameters pending update *\/$/;"	m	struct:__anon40	access:public
NewParams	lvm/Bundle/src/LVM_Private.h	/^    LVM_ControlParams_t     NewParams;          \/* New control parameters pending update *\/$/;"	m	struct:__anon40	access:public
NewParams	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_ControlParams_st  NewParams;                  \/* New parameters from the calling application *\/$/;"	m	struct:__anon48	access:public
NewParams	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_ControlParams_t       NewParams;                          \/* New control parameters given by the user                                                     *\/$/;"	m	struct:__anon126	access:public
NoSmoothVolume	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16              NoSmoothVolume;      \/* Enable or disable smooth volume changes*\/$/;"	m	struct:__anon40	access:public
NonLinComp_D16	lvm/Common/lib/CompLim.h	/^void NonLinComp_D16(LVM_INT16        Gain,$/;"	p	signature:(LVM_INT16 Gain, LVM_INT16 *pSterBfIn, LVM_INT16 *pSterBfOut, LVM_INT32 BlockLength)
NonLinComp_D16	lvm/Common/src/NonLinComp_D16.c	/^void NonLinComp_D16(LVM_INT16        Gain,$/;"	f	signature:(LVM_INT16 Gain, LVM_INT16 *pDataIn, LVM_INT16 *pDataOut, LVM_INT32 BlockLength)
NormInt	lvm/Common/lib/CompLim.h	/^    LVM_INT32   NormInt;            \/* Normaliser integrator current value *\/$/;"	m	struct:__anon85	access:public
Norm_Attack	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Norm_Attack;        \/* Attack time constant of the Normaliser integrator *\/$/;"	m	struct:__anon85	access:public
Norm_Decay	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Norm_Decay;         \/* Decay time constant of the Normaliser integrator *\/$/;"	m	struct:__anon85	access:public
NumDelays	lvm/Reverb/lib/LVREV.h	/^    LVREV_NumDelayLines_en      NumDelays;              \/* The number of delay lines, 1, 2 or 4 *\/$/;"	m	struct:__anon45	access:public
ONE_OVER_SQRT_TWO	lvm/Reverb/src/LVREV_Private.h	46;"	d
OneOverThousandInQ24	lvm/Common/src/LVM_Timer_Init.c	30;"	d	file:
OperatingMode	lvm/Bass/lib/LVDBE.h	/^    LVDBE_Mode_en           OperatingMode;$/;"	m	struct:__anon10	access:public
OperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_Mode_en                 OperatingMode;          \/* Bundle operating mode On\/Bypass *\/$/;"	m	struct:__anon32	access:public
OperatingMode	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_Mode_en              OperatingMode;$/;"	m	struct:__anon58	access:public
OperatingMode	lvm/Reverb/lib/LVREV.h	/^    LVM_Mode_en                 OperatingMode;          \/* Operating mode *\/$/;"	m	struct:__anon44	access:public
OperatingMode	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_Modes_en           OperatingMode;          \/* Algorithm mode *\/$/;"	m	struct:__anon105	access:public
OutDelayBuffer	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               OutDelayBuffer[2*MIN_INTERNAL_BLOCKSIZE]; \/* Output buffer delay line *\/$/;"	m	struct:__anon37	access:public
OutDelaySamples	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               OutDelaySamples;    \/* Number of samples in the output delay buffer, left and right *\/$/;"	m	struct:__anon37	access:public
OutputDevice	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_OutputDevice_en    OutputDevice;       \/* Selected output device type *\/$/;"	m	struct:__anon114	access:public
Output_Shift	lvm/StereoWidening/src/LVCS_BypassMix.h	/^    LVM_UINT16              Output_Shift;               \/* Correcting gain output shift *\/$/;"	m	struct:__anon110	access:public
PFilter_State	lvm/Common/src/BP_1I_D16F16Css_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/BP_1I_D16F32Cll_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/BP_1I_D32F32Cll_TRC_WRA_02_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/BQ_1I_D16F16Css_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/BQ_1I_D16F32Css_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/BQ_2I_D16F16Css_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/BQ_2I_D16F32Css_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/BQ_2I_D32F32Cll_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/DC_2I_D16_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/FO_1I_D16F16Css_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/FO_1I_D32F32Cll_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/FO_2I_D16F32Css_LShx_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/PK_2I_D32F32CllGss_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PFilter_State	lvm/Common/src/PK_2I_D32F32CssGss_TRC_WRA_01_Private.h	/^typedef Filter_State * PFilter_State ;$/;"	t
PI	lvm/Eq/src/LVEQNB_CalcCoef.c	33;"	d	file:
PK_2I_D32F32C14G11_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void PK_2I_D32F32C14G11_TRC_WRA_01 (        Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT32 *pDataIn, LVM_INT32 *pDataOut, LVM_INT16 NrSamples)
PK_2I_D32F32C14G11_TRC_WRA_01	lvm/Common/src/PK_2I_D32F32C14G11_TRC_WRA_01.c	/^void PK_2I_D32F32C14G11_TRC_WRA_01 ( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT32 *pDataIn, LVM_INT32 *pDataOut, LVM_INT16 NrSamples)
PK_2I_D32F32C30G11_TRC_WRA_01	lvm/Common/lib/BIQUAD.h	/^void PK_2I_D32F32C30G11_TRC_WRA_01 (        Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, LVM_INT32 *pDataIn, LVM_INT32 *pDataOut, LVM_INT16 NrSamples)
PK_2I_D32F32C30G11_TRC_WRA_01	lvm/Common/src/PK_2I_D32F32C30G11_TRC_WRA_01.c	/^void PK_2I_D32F32C30G11_TRC_WRA_01 ( Biquad_Instance_t       *pInstance,$/;"	f	signature:( Biquad_Instance_t *pInstance, LVM_INT32 *pDataIn, LVM_INT32 *pDataOut, LVM_INT16 NrSamples)
PK_2I_D32F32CllGss_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void PK_2I_D32F32CllGss_TRC_WRA_01_Init (   Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_2I_Order2_Taps_t *pTaps, PK_C32_Coefs_t *pCoef)
PK_2I_D32F32CllGss_TRC_WRA_01_Init	lvm/Common/src/PK_2I_D32F32CllGss_TRC_WRA_01_Init.c	/^void  PK_2I_D32F32CllGss_TRC_WRA_01_Init(Biquad_Instance_t         *pInstance,$/;"	f	signature:(Biquad_Instance_t *pInstance, Biquad_2I_Order2_Taps_t *pTaps, PK_C32_Coefs_t *pCoef)
PK_2I_D32F32CssGss_TRC_WRA_01_Init	lvm/Common/lib/BIQUAD.h	/^void PK_2I_D32F32CssGss_TRC_WRA_01_Init (   Biquad_Instance_t       *pInstance,$/;"	p	signature:( Biquad_Instance_t *pInstance, Biquad_2I_Order2_Taps_t *pTaps, PK_C16_Coefs_t *pCoef)
PK_2I_D32F32CssGss_TRC_WRA_01_Init	lvm/Common/src/PK_2I_D32F32CssGss_TRC_WRA_01_Init.c	/^void  PK_2I_D32F32CssGss_TRC_WRA_01_Init(Biquad_Instance_t         *pInstance,$/;"	f	signature:(Biquad_Instance_t *pInstance, Biquad_2I_Order2_Taps_t *pTaps, PK_C16_Coefs_t *pCoef)
PK_C16_Coefs_t	lvm/Common/lib/BIQUAD.h	/^} PK_C16_Coefs_t;$/;"	t	typeref:struct:__anon72
PK_C32_Coefs_t	lvm/Common/lib/BIQUAD.h	/^} PK_C32_Coefs_t;$/;"	t	typeref:struct:__anon73
POINT_ZERO_ONE_DB	lvm/Common/src/Mixer_private.h	27;"	d
PQPD_C32_Coefs	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^} QPD_C32_Coefs, *PQPD_C32_Coefs;$/;"	t	typeref:struct:__anon128
PSA_ControlParams	lvm/Bundle/src/LVM_Private.h	/^    LVPSA_ControlParams_t   PSA_ControlParams;  \/* Spectrum Analyzer control parameters *\/$/;"	m	struct:__anon40	access:public
PSA_Enable	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_Mode_en             PSA_Enable;$/;"	m	struct:__anon32	access:public
PSA_GainOffset	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               PSA_GainOffset;     \/* Tone control flag *\/$/;"	m	struct:__anon40	access:public
PSA_Included	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_Mode_en             PSA_Included;            \/* Controls the instance memory allocation for PSA: ON\/OFF *\/$/;"	m	struct:__anon33	access:public
PSA_InitParams	lvm/Bundle/src/LVM_Private.h	/^    LVPSA_InitParams_t      PSA_InitParams;     \/* Spectrum Analyzer initialization parameters *\/$/;"	m	struct:__anon40	access:public
PSA_Instance	lvm/Bundle/src/LVM_Private.h	/^    LVPSA_InstancePr_t      PSA_Instance;       \/* Spectrum Analyzer instance *\/$/;"	m	struct:__anon40	access:public
PSA_PeakDecayRate	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_DecaySpeed_en       PSA_PeakDecayRate;      \/* Peak value decay rate*\/$/;"	m	struct:__anon32	access:public
Params	lvm/Bass/src/LVDBE_Private.h	/^    LVDBE_Params_t                Params;             \/* Instance parameters *\/$/;"	m	struct:__anon14	access:public
Params	lvm/Bundle/src/LVM_Private.h	/^    LVM_ControlParams_t     Params;             \/* Control parameters *\/$/;"	m	struct:__anon40	access:public
Params	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_Params_t                 Params;             \/* Instance parameters *\/$/;"	m	struct:__anon61	access:public
Params	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_Params_t           Params;             \/* Instance parameters *\/$/;"	m	struct:__anon114	access:public
PostGain	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_INT16                  PostGain;                    \/* Postgain to apply after the filtering    (in dB Q16.0)            *\/$/;"	m	struct:__anon119	access:public
PrivateParams	lvm/Common/src/LVC_Mixer.h	/^    LVM_INT32       PrivateParams[4];   \/* Private Instance params for Audio Stream *\/$/;"	m	struct:__anon89	access:public
ProcGain	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                   ProcGain;$/;"	m	struct:__anon107	access:public
QFactor	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  QFactor;                \/* Band quality factor (x100) *\/$/;"	m	struct:__anon30	access:public
QFactor	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  QFactor;                \/* Band quality factor *\/$/;"	m	struct:__anon57	access:public
QFactor	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT16                 QFactor;                     \/* Quality factor of the filter             (in 1\/100)               *\/$/;"	m	struct:__anon119	access:public
QPD_C32_Coefs	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^} QPD_C32_Coefs, *PQPD_C32_Coefs;$/;"	t	typeref:struct:__anon128
QPD_State_t	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^}QPD_State_t, *pQPD_State_t;$/;"	t	typeref:struct:__anon127
QPD_Taps_t	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^} QPD_Taps_t, *pQPD_Taps_t;$/;"	t	typeref:struct:__anon129
REVERB_SHARED_TARGET	lvm/Makefile	/^REVERB_SHARED_TARGET:= libreverb.so$/;"	m
REVERB_STATIC_TARGET	lvm/Makefile	/^REVERB_STATIC_TARGET:= libreverb.a$/;"	m
Region	lvm/Bass/lib/LVDBE.h	/^    LVDBE_MemoryRegion_t    Region[LVDBE_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon9	access:public
Region	lvm/Bundle/lib/LVM.h	/^    LVM_MemoryRegion_st         Region[LVM_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon29	access:public
Region	lvm/Bundle/src/LVM_Private.h	/^    LVM_IntMemoryRegion_t   Region[LVM_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon36	access:public
Region	lvm/Common/lib/LVM_Types.h	/^    LVM_MemoryRegion_st         Region[LVM_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon84	access:public
Region	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_MemoryRegion_t       Region[LVEQNB_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon56	access:public
Region	lvm/Reverb/lib/LVREV.h	/^    LVM_MemoryRegion_st        Region[LVREV_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon43	access:public
Region	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_MemoryRegion_t       Region[LVPSA_NR_MEMORY_REGIONS];\/* One definition for each region                                 *\/$/;"	m	struct:__anon123	access:public
Region	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_MemoryRegion_t Region[LVCS_NR_MEMORY_REGIONS]; \/* One definition for each region *\/$/;"	m	struct:__anon104	access:public
RemainingTimeInSamples	lvm/Common/src/LVM_Timer_Private.h	/^    LVM_INT32  RemainingTimeInSamples;$/;"	m	struct:__anon93	access:public
RevLPCoefs	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_Instance_t       RevLPCoefs[4];              \/* Reverb low pass filters coefficients *\/$/;"	m	struct:__anon47	access:public
RevLPTaps	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_1I_Order1_Taps_t RevLPTaps[4];               \/* Reverb low pass filters taps *\/$/;"	m	struct:__anon46	access:public
ReverbBiquadInstance	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_Instance_t       ReverbBiquadInstance;$/;"	m	struct:__anon115	access:public
ReverbBiquadTaps	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_2I_Order2_Taps_t ReverbBiquadTaps;$/;"	m	struct:__anon116	access:public
ReverbBlock	lvm/Reverb/src/LVREV_Private.h	/^void                    ReverbBlock(LVM_INT32           *pInput,$/;"	p	signature:(LVM_INT32 *pInput, LVM_INT32 *pOutput, LVREV_Instance_st *pPrivate, LVM_UINT16 NumSamples)
ReverbBlock	lvm/Reverb/src/LVREV_Process.c	/^void ReverbBlock(LVM_INT32 *pInput, LVM_INT32 *pOutput, LVREV_Instance_st *pPrivate, LVM_UINT16 NumSamples)$/;"	f	signature:(LVM_INT32 *pInput, LVM_INT32 *pOutput, LVREV_Instance_st *pPrivate, LVM_UINT16 NumSamples)
ReverbLevel	lvm/StereoWidening/lib/LVCS.h	/^    LVM_UINT16              ReverbLevel;            \/* Reverb level in % *\/$/;"	m	struct:__anon105	access:public
ReverbLevel	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                   ReverbLevel;$/;"	m	struct:__anon107	access:public
Reverberation	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_ReverbGenerator_t  Reverberation;      \/* Reverberation configuration *\/$/;"	m	struct:__anon114	access:public
RightDC	lvm/Common/src/DC_2I_D16_TRC_WRA_01_Private.h	/^  LVM_INT32  RightDC;    \/* RightDC  *\/$/;"	m	struct:_Filter_State_	access:public
RoomSize	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  RoomSize;               \/* Simulated room size, 1 to 100 for minimum to maximum size *\/$/;"	m	struct:__anon44	access:public
RoomSizeInms	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               RoomSizeInms;               \/* Room size in msec *\/$/;"	m	struct:__anon48	access:public
SEBiquadInstanceMid	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_Instance_t       SEBiquadInstanceMid;$/;"	m	struct:__anon115	access:public
SEBiquadInstanceSide	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_Instance_t       SEBiquadInstanceSide;$/;"	m	struct:__anon115	access:public
SEBiquadTapsMid	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_1I_Order1_Taps_t SEBiquadTapsMid;$/;"	m	struct:__anon116	access:public
SEBiquadTapsSide	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_1I_Order2_Taps_t SEBiquadTapsSide;$/;"	m	struct:__anon116	access:public
SECOND_COEF	lvm/Common/src/dB_to_Lin32.c	64;"	d	file:
SHIFT	lvm/Eq/src/LVEQNB_Process.c	36;"	d	file:
SIX_DB	lvm/Common/src/dB_to_Lin32.c	61;"	d	file:
SRC_BUNDLE_FILES	lvm/Makefile	/^SRC_BUNDLE_FILES:= \\$/;"	m
SRC_COMMON_FILES	lvm/Makefile	/^SRC_COMMON_FILES:= \\$/;"	m
SRC_REVERB_FILES	lvm/Makefile	/^SRC_REVERB_FILES:= \\$/;"	m
STRIP	Makefile	/^STRIP    = strip $/;"	m
STRIP	lvm/Makefile	/^STRIP    = strip $/;"	m
SampleRate	lvm/Bass/lib/LVDBE.h	/^      LVM_UINT16              SampleRate;               \/* Sampling rate capabilities *\/$/;"	m	struct:__anon11	access:public
SampleRate	lvm/Bass/lib/LVDBE.h	/^    LVDBE_Fs_en             SampleRate;$/;"	m	struct:__anon10	access:public
SampleRate	lvm/Bundle/lib/LVM.h	/^    LVM_Fs_en                   SampleRate;             \/* Sample rate *\/$/;"	m	struct:__anon32	access:public
SampleRate	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_Fs_en                SampleRate;$/;"	m	struct:__anon58	access:public
SampleRate	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  SampleRate;$/;"	m	struct:__anon59	access:public
SampleRate	lvm/Reverb/lib/LVREV.h	/^    LVM_Fs_en                   SampleRate;             \/* Sample rate *\/$/;"	m	struct:__anon44	access:public
SampleRate	lvm/StereoWidening/lib/LVCS.h	/^    LVM_Fs_en               SampleRate;             \/* Sampling rate *\/$/;"	m	struct:__anon105	access:public
SamplesToOutput	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               SamplesToOutput;    \/* Samples to write to the output *\/$/;"	m	struct:__anon37	access:public
SamplesToProcess	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               SamplesToProcess;   \/* Input samples left to process *\/$/;"	m	struct:__anon40	access:public
SamplingRate	lvm/Common/lib/LVM_Timer.h	/^    LVM_INT32  SamplingRate;$/;"	m	struct:__anon63	access:public
Scale	lvm/Common/src/Filters.h	/^        LVM_UINT16  Scale;$/;"	m	struct:__anon94	access:public
Scale	lvm/Common/src/Filters.h	/^        LVM_UINT16  Scale;$/;"	m	struct:__anon95	access:public
Shift	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 Shift; \/* Shift *\/$/;"	m	struct:__anon69	access:public
Shift	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Shift;              \/* Shift gain *\/$/;"	m	struct:__anon85	access:public
Shift	lvm/Common/src/FO_2I_D16F32Css_LShx_TRC_WRA_01_Private.h	/^  LVM_INT16     Shift;          \/* Shift value*\/$/;"	m	struct:_Filter_State_	access:public
Shift	lvm/Common/src/LVC_Mixer_Private.h	/^    LVM_INT32                       Shift;                  \/* Left Shift for Integer part of Gain *\/$/;"	m	struct:__anon96	access:public
Shift	lvm/StereoWidening/src/LVCS_BypassMix.h	/^    LVM_UINT16              Shift;                      \/* Left shifts required *\/$/;"	m	struct:__anon111	access:public
Shift_Sat_v16xv16	lvm/Common/lib/VectorArithmetic.h	/^void Shift_Sat_v16xv16 (      const LVM_INT16 val,$/;"	p	signature:( const LVM_INT16 val, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
Shift_Sat_v16xv16	lvm/Common/src/Shift_Sat_v16xv16.c	/^void Shift_Sat_v16xv16 (const   LVM_INT16   val,$/;"	f	signature:(const LVM_INT16 val, const LVM_INT16 *src, LVM_INT16 *dst, LVM_INT16 n)
Shift_Sat_v32xv32	lvm/Common/lib/VectorArithmetic.h	/^void Shift_Sat_v32xv32 (      const LVM_INT16 val,$/;"	p	signature:( const LVM_INT16 val, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
Shift_Sat_v32xv32	lvm/Common/src/Shift_Sat_v32xv32.c	/^void Shift_Sat_v32xv32 (const   LVM_INT16   val,$/;"	f	signature:(const LVM_INT16 val, const LVM_INT32 *src, LVM_INT32 *dst, LVM_INT16 n)
Size	lvm/Bass/lib/LVDBE.h	/^    LVM_UINT32                Size;                        \/* Region size in bytes *\/$/;"	m	struct:__anon8	access:public
Size	lvm/Bundle/src/LVM_Private.h	/^    LVM_UINT32              Size;               \/* Region size in bytes *\/$/;"	m	struct:__anon35	access:public
Size	lvm/Common/lib/LVM_Types.h	/^    LVM_UINT32                  Size;                   \/* Region size in bytes *\/$/;"	m	struct:__anon83	access:public
Size	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT32                  Size;                   \/* Region size in bytes *\/$/;"	m	struct:__anon55	access:public
Size	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT32                 Size;                        \/* Region size in bytes                                              *\/$/;"	m	struct:__anon122	access:public
Size	lvm/StereoWidening/lib/LVCS.h	/^    LVM_UINT32              Size;                   \/* Region size in bytes *\/$/;"	m	struct:__anon103	access:public
SoftClipGain	lvm/Common/lib/CompLim.h	/^    LVM_INT16   SoftClipGain;       \/* Soft clip gain control *\/$/;"	m	struct:__anon85	access:public
SourceFormat	lvm/Bundle/lib/LVM.h	/^    LVM_Format_en               SourceFormat;           \/* Input data format *\/$/;"	m	struct:__anon32	access:public
SourceFormat	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_SourceFormat_en      SourceFormat;$/;"	m	struct:__anon58	access:public
SourceFormat	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  SourceFormat;$/;"	m	struct:__anon59	access:public
SourceFormat	lvm/Reverb/lib/LVREV.h	/^    LVM_Format_en               SourceFormat;           \/* Source data format *\/$/;"	m	struct:__anon44	access:public
SourceFormat	lvm/Reverb/lib/LVREV.h	/^    LVM_Format_en               SourceFormat;           \/* Source data formats to support *\/$/;"	m	struct:__anon45	access:public
SourceFormat	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_SourceFormat_en    SourceFormat;           \/* Source data format *\/$/;"	m	struct:__anon105	access:public
SpeakerType	lvm/Bundle/lib/LVM.h	/^    LVM_OutputDeviceType_en     SpeakerType;            \/* Output device type *\/$/;"	m	struct:__anon32	access:public
SpeakerType	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_SpeakerType_en     SpeakerType;            \/* Output device type *\/$/;"	m	struct:__anon105	access:public
SpectralDataBufferAudioTime	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_Time                  SpectralDataBufferAudioTime;        \/* AudioTime at which the last value save occured in the buffer                                 *\/$/;"	m	struct:__anon126	access:public
SpectralDataBufferDuration	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT16                 SpectralDataBufferDuration;  \/* Spectral data buffer duration in time (ms in Q16.0)               *\/$/;"	m	struct:__anon120	access:public
SpectralDataBufferDuration	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  SpectralDataBufferDuration;         \/* Length of the buffer in time (ms) defined by the application                                 *\/$/;"	m	struct:__anon126	access:public
SpectralDataBufferLength	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT32                  SpectralDataBufferLength;           \/* Number of spectrum data value that the buffer can contain (per band)$/;"	m	struct:__anon126	access:public
StereoEnhancer	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_StereoEnhancer_t   StereoEnhancer;     \/* Stereo enhancer configuration *\/$/;"	m	struct:__anon114	access:public
StereoSamples	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                    StereoSamples[2*LVCS_STEREODELAY_CS_48KHZ];$/;"	m	struct:__anon107	access:public
Storage	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32 Storage[ (1*2) ];  \/* One channel, two taps of size LVM_INT32 *\/$/;"	m	struct:__anon74	access:public
Storage	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32 Storage[ (1*4) ];  \/* One channel, four taps of size LVM_INT32 *\/$/;"	m	struct:__anon76	access:public
Storage	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32 Storage[ (2*2) ];  \/* Two channels, two taps of size LVM_INT32 *\/$/;"	m	struct:__anon75	access:public
Storage	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32 Storage[ (2*4) ];  \/* Two channels, four taps of size LVM_INT32 *\/$/;"	m	struct:__anon77	access:public
Storage	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32 Storage[6];$/;"	m	struct:__anon64	access:public
Storage	lvm/Common/lib/LVM_Timer.h	/^    LVM_INT32 Storage[6];$/;"	m	struct:__anon62	access:public
Storage	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^    LVM_INT32 Storage[1];$/;"	m	struct:__anon129	access:public
T	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               T[4];                       \/* Maximum delay size of buffer *\/$/;"	m	struct:__anon48	access:public
T60	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  T60;                    \/* Decay time constant, in ms *\/$/;"	m	struct:__anon44	access:public
TE_Active	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               TE_Active;          \/* Control flag *\/$/;"	m	struct:__anon40	access:public
TE_EffectLevel	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   TE_EffectLevel;         \/* Treble Enhancement gain dBs *\/$/;"	m	struct:__anon32	access:public
TE_OperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_TE_Mode_en              TE_OperatingMode;       \/* Treble Enhancement On\/Off *\/$/;"	m	struct:__anon32	access:public
TRUE	lvm/Common/src/LVC_MixInSoft_D16C31_SAT.c	30;"	d	file:
TRUE	lvm/Common/src/LVC_MixSoft_1St_2i_D16C31_SAT.c	30;"	d	file:
TRUE	lvm/Common/src/LVC_MixSoft_1St_D16C31_SAT.c	30;"	d	file:
TRUE	lvm/Common/src/MixInSoft_D32C31_SAT.c	29;"	d	file:
TRUE	lvm/Common/src/MixSoft_1St_D32C31_WRA.c	29;"	d	file:
Target	lvm/Common/lib/AGC.h	/^    LVM_INT32  Target;                          \/* The target volume setting *\/$/;"	m	struct:__anon88	access:public
Target	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Target;                   \/* Target value.  Set by calling application.  Can be changed at any time *\/$/;"	m	struct:__anon86	access:public
Target	lvm/Common/src/LVC_Mixer_Private.h	/^    LVM_INT32                       Target;                 \/* 32 bit number specifying fractional value of Target Gain *\/$/;"	m	struct:__anon96	access:public
Target1	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Target1;$/;"	m	struct:__anon87	access:public
Target2	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Target2;$/;"	m	struct:__anon87	access:public
Threshold	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Threshold;          \/* Target threshold *\/$/;"	m	struct:__anon85	access:public
TimeInMs	lvm/Common/lib/LVM_Timer.h	/^    LVM_INT16  TimeInMs;$/;"	m	struct:__anon63	access:public
TimerArmed	lvm/Common/src/LVM_Timer_Private.h	/^    LVM_INT16 TimerArmed;                        \/* Boolean, true between init and callback *\/$/;"	m	struct:__anon93	access:public
TimerInstance	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_Timer_Instance_t    TimerInstance;                      \/* Timer instance *\/$/;"	m	struct:__anon114	access:public
TimerParams	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_Timer_Params_t      TimerParams;                        \/* Timer parameters *\/$/;"	m	struct:__anon114	access:public
TotalSize	lvm/Common/lib/InstAlloc.h	/^    LVM_UINT32              TotalSize;      \/*  Accumulative total memory size                      *\/$/;"	m	struct:__anon78	access:public
TransitionGain	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               TransitionGain;     \/* Transition gain *\/$/;"	m	struct:__anon114	access:public
TrebleBoostCorner	lvm/Bundle/src/LVM_Coeffs.h	28;"	d
TrebleBoostMinRate	lvm/Bundle/src/LVM_Coeffs.h	29;"	d
TrebleBoostSteps	lvm/Bundle/src/LVM_Coeffs.h	30;"	d
TrebleBoost_State	lvm/Bundle/src/LVM_Private.h	/^    Biquad_Instance_t       TrebleBoost_State;  \/* State for the treble boost filter *\/$/;"	m	struct:__anon39	access:public
TrebleBoost_Taps	lvm/Bundle/src/LVM_Private.h	/^    Biquad_2I_Order1_Taps_t TrebleBoost_Taps;   \/* Treble boost Taps *\/$/;"	m	struct:__anon38	access:public
Type	lvm/Bass/lib/LVDBE.h	/^    LVDBE_MemoryTypes_en      Type;                       \/* Region type *\/$/;"	m	struct:__anon8	access:public
Type	lvm/Bundle/src/LVM_Private.h	/^    LVM_MemoryTypes_en      Type;               \/* Region type *\/$/;"	m	struct:__anon35	access:public
Type	lvm/Common/lib/LVM_Types.h	/^    LVM_MemoryTypes_en          Type;                   \/* Region type *\/$/;"	m	struct:__anon83	access:public
Type	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_MemoryTypes_en       Type;                   \/* Region type *\/$/;"	m	struct:__anon55	access:public
Type	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_MemoryTypes_en       Type;                        \/* Region type                                                       *\/$/;"	m	struct:__anon122	access:public
Type	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_MemoryTypes_en     Type;                   \/* Region type *\/$/;"	m	struct:__anon103	access:public
UnprocGain	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                   UnprocGain;$/;"	m	struct:__anon107	access:public
UnprocLoss	lvm/StereoWidening/src/LVCS_BypassMix.h	/^    LVM_UINT16              UnprocLoss;                 \/* Unprocessed path loss *\/$/;"	m	struct:__anon111	access:public
VC_AVLFixedVolume	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               VC_AVLFixedVolume;  \/* AVL fixed volume *\/$/;"	m	struct:__anon40	access:public
VC_Active	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               VC_Active;          \/* Control flag *\/$/;"	m	struct:__anon40	access:public
VC_Balance	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   VC_Balance;             \/* Left Right Balance control in dB (-96 to 96 dB), -ve values reduce$/;"	m	struct:__anon32	access:public
VC_BalanceMix	lvm/Bundle/src/LVM_Private.h	/^    LVMixer3_2St_st         VC_BalanceMix;      \/* VC balance mixer *\/$/;"	m	struct:__anon40	access:public
VC_EffectLevel	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   VC_EffectLevel;         \/* Volume Control setting in dBs *\/$/;"	m	struct:__anon32	access:public
VC_Volume	lvm/Bundle/src/LVM_Private.h	/^    LVMixer3_1St_st         VC_Volume;          \/* Volume scaler *\/$/;"	m	struct:__anon40	access:public
VC_VolumedB	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               VC_VolumedB;        \/* Gain in dB *\/$/;"	m	struct:__anon40	access:public
VOLUME_MAX	lvm/Bass/src/LVDBE_Coeffs.h	493;"	d
VOLUME_SHIFT	lvm/Bass/src/LVDBE_Coeffs.h	494;"	d
VOL_TC_Fs11025	lvm/Bass/src/LVDBE_Coeffs.h	499;"	d
VOL_TC_Fs12000	lvm/Bass/src/LVDBE_Coeffs.h	500;"	d
VOL_TC_Fs16000	lvm/Bass/src/LVDBE_Coeffs.h	501;"	d
VOL_TC_Fs22050	lvm/Bass/src/LVDBE_Coeffs.h	502;"	d
VOL_TC_Fs24000	lvm/Bass/src/LVDBE_Coeffs.h	503;"	d
VOL_TC_Fs32000	lvm/Bass/src/LVDBE_Coeffs.h	504;"	d
VOL_TC_Fs44100	lvm/Bass/src/LVDBE_Coeffs.h	505;"	d
VOL_TC_Fs48000	lvm/Bass/src/LVDBE_Coeffs.h	506;"	d
VOL_TC_Fs8000	lvm/Bass/src/LVDBE_Coeffs.h	498;"	d
VOL_TC_SHIFT	lvm/Bass/src/LVDBE_Coeffs.h	497;"	d
VOL_TC_SHIFT	lvm/Common/src/AGC_MIX_VOL_2St1Mon_D32_WRA.c	34;"	d	file:
VirtualizerOperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_Mode_en                 VirtualizerOperatingMode; \/* Virtualizer operating mode On\/Off *\/$/;"	m	struct:__anon32	access:public
VirtualizerReverbLevel	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  VirtualizerReverbLevel;   \/* Virtualizer reverb level in % *\/$/;"	m	struct:__anon32	access:public
VirtualizerType	lvm/Bundle/lib/LVM.h	/^    LVM_VirtualizerType_en      VirtualizerType;          \/* Virtualizer type: ConcertSound *\/$/;"	m	struct:__anon32	access:public
VolCorrect	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_VolCorrect_t       VolCorrect;         \/* Volume correction settings *\/$/;"	m	struct:__anon114	access:public
Volume	lvm/Common/lib/AGC.h	/^    LVM_INT32  Volume;                          \/* The current volume setting *\/$/;"	m	struct:__anon88	access:public
VolumeControl	lvm/Bass/lib/LVDBE.h	/^    LVDBE_Volume_en         VolumeControl;$/;"	m	struct:__anon10	access:public
VolumeShift	lvm/Common/lib/AGC.h	/^    LVM_INT16  VolumeShift;                     \/* Volume shift scaling *\/$/;"	m	struct:__anon88	access:public
VolumeTC	lvm/Common/lib/AGC.h	/^    LVM_INT16  VolumeTC;                        \/* Volume update time constant *\/$/;"	m	struct:__anon88	access:public
VolumedB	lvm/Bass/lib/LVDBE.h	/^    LVM_INT16               VolumedB;$/;"	m	struct:__anon10	access:public
_BIQUAD_H_	lvm/Common/lib/BIQUAD.h	19;"	d
_BP_1I_D16F16CSS_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/BP_1I_D16F16Css_TRC_WRA_01_Private.h	18;"	d
_BP_1I_D16F32CLL_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/BP_1I_D16F32Cll_TRC_WRA_01_Private.h	18;"	d
_BP_1I_D32F32CLL_TRC_WRA_02_PRIVATE_H_	lvm/Common/src/BP_1I_D32F32Cll_TRC_WRA_02_Private.h	18;"	d
_BQ_1I_D16F16CSS_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/BQ_1I_D16F16Css_TRC_WRA_01_Private.h	18;"	d
_BQ_1I_D16F32CSS_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/BQ_1I_D16F32Css_TRC_WRA_01_Private.h	18;"	d
_BQ_2I_D16F16CSS_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/BQ_2I_D16F16Css_TRC_WRA_01_Private.h	19;"	d
_BQ_2I_D16F32CSS_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/BQ_2I_D16F32Css_TRC_WRA_01_Private.h	19;"	d
_BQ_2I_D32F32CLL_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/BQ_2I_D32F32Cll_TRC_WRA_01_Private.h	19;"	d
_COMP_LIM_H	lvm/Common/lib/CompLim.h	19;"	d
_COMP_LIM_PRIVATE_	lvm/Common/src/CompLim_private.h	19;"	d
_DC_2I_D16_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/DC_2I_D16_TRC_WRA_01_Private.h	19;"	d
_FILTER_H_	lvm/Common/lib/Filter.h	19;"	d
_FO_1I_D16F16CSS_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/FO_1I_D16F16Css_TRC_WRA_01_Private.h	19;"	d
_FO_1I_D32F32CLL_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/FO_1I_D32F32Cll_TRC_WRA_01_Private.h	19;"	d
_FO_2I_D16F32CSS_LSHX_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/FO_2I_D16F32Css_LShx_TRC_WRA_01_Private.h	19;"	d
_Filter_State_	lvm/Common/src/BP_1I_D16F16Css_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/BP_1I_D16F32Cll_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/BP_1I_D32F32Cll_TRC_WRA_02_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/BQ_1I_D16F16Css_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/BQ_1I_D16F32Css_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/BQ_2I_D16F16Css_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/BQ_2I_D16F32Css_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/BQ_2I_D32F32Cll_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/DC_2I_D16_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/FO_1I_D16F16Css_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/FO_1I_D32F32Cll_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/FO_2I_D16F32Css_LShx_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/PK_2I_D32F32CllGss_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_	lvm/Common/src/PK_2I_D32F32CssGss_TRC_WRA_01_Private.h	/^typedef struct _Filter_State_$/;"	s
_Filter_State_::LeftDC	lvm/Common/src/DC_2I_D16_TRC_WRA_01_Private.h	/^  LVM_INT32  LeftDC;     \/* LeftDC  *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::RightDC	lvm/Common/src/DC_2I_D16_TRC_WRA_01_Private.h	/^  LVM_INT32  RightDC;    \/* RightDC  *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::Shift	lvm/Common/src/FO_2I_D16F32Css_LShx_TRC_WRA_01_Private.h	/^  LVM_INT16     Shift;          \/* Shift value*\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/BP_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT32         coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/BP_1I_D16F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32         coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/BP_1I_D32F32Cll_TRC_WRA_02_Private.h	/^  LVM_INT32         coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/BQ_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT16         coefs[5];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/BQ_1I_D16F32Css_TRC_WRA_01_Private.h	/^  LVM_INT16     coefs[5];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/BQ_2I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT16     coefs[5];           \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/BQ_2I_D16F32Css_TRC_WRA_01_Private.h	/^  LVM_INT16                           coefs[5];         \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/BQ_2I_D32F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32                            coefs[5];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/FO_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT16         coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/FO_1I_D32F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32         coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/FO_2I_D16F32Css_LShx_TRC_WRA_01_Private.h	/^  LVM_INT16     coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/PK_2I_D32F32CllGss_TRC_WRA_01_Private.h	/^  LVM_INT32         coefs[5];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::coefs	lvm/Common/src/PK_2I_D32F32CssGss_TRC_WRA_01_Private.h	/^  LVM_INT32         coefs[5];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/BP_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/BP_1I_D16F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/BP_1I_D32F32Cll_TRC_WRA_02_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/BQ_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/BQ_1I_D16F32Css_TRC_WRA_01_Private.h	/^  LVM_INT32 *   pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/BQ_2I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT32 *   pDelays;            \/* pointer to the delayed samples (data of 32 bits) *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/BQ_2I_D16F32Css_TRC_WRA_01_Private.h	/^  LVM_INT32 *                          pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/BQ_2I_D32F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32 *                          pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/FO_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT32*        pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/FO_1I_D32F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/FO_2I_D16F32Css_LShx_TRC_WRA_01_Private.h	/^  LVM_INT32     *pDelays;       \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/PK_2I_D32F32CllGss_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_Filter_State_::pDelays	lvm/Common/src/PK_2I_D32F32CssGss_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
_LVM_MACROS_H_	lvm/Common/lib/LVM_Macros.h	19;"	d
_LVPSA_H_	lvm/SpectrumAnalyzer/lib/LVPSA.h	19;"	d
_LVPSA_PRIVATE_H_	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	19;"	d
_LVPSA_QPD_H_	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	19;"	d
_LVREV_TABLES_H_	lvm/Reverb/src/LVREV_Tables.h	20;"	d
_PK_2I_D32F32CLLGSS_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/PK_2I_D32F32CllGss_TRC_WRA_01_Private.h	19;"	d
_PK_2I_D32F32CSSGSS_TRC_WRA_01_PRIVATE_H_	lvm/Common/src/PK_2I_D32F32CssGss_TRC_WRA_01_Private.h	19;"	d
_VECTOR_ARITHMETIC_H_	lvm/Common/lib/VectorArithmetic.h	19;"	d
__AGC_H__	lvm/Common/lib/AGC.h	19;"	d
__INSTALLOC_H__	lvm/Common/lib/InstAlloc.h	19;"	d
__LVBDE_TABLES_H__	lvm/Bass/src/LVDBE_Tables.h	25;"	d
__LVCS_BYPASSMIX_H__	lvm/StereoWidening/src/LVCS_BypassMix.h	19;"	d
__LVCS_EQUALISER_H__	lvm/StereoWidening/src/LVCS_Equaliser.h	19;"	d
__LVCS_HEADPHONE_COEFFS_H__	lvm/StereoWidening/src/LVCS_Headphone_Coeffs.h	19;"	d
__LVCS_PRIVATE_H__	lvm/StereoWidening/src/LVCS_Private.h	28;"	d
__LVCS_REVERBGENERATOR_H__	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	19;"	d
__LVCS_STEREOENHANCER_H__	lvm/StereoWidening/src/LVCS_StereoEnhancer.h	19;"	d
__LVCS_TABLES_H__	lvm/StereoWidening/src/LVCS_Tables.h	19;"	d
__LVC_MIXER_H__	lvm/Common/src/LVC_Mixer.h	19;"	d
__LVC_MIXER_PRIVATE_H__	lvm/Common/src/LVC_Mixer_Private.h	19;"	d
__LVDBE_COEFFS_H__	lvm/Bass/src/LVDBE_Coeffs.h	19;"	d
__LVDBE_H__	lvm/Bass/lib/LVDBE.h	56;"	d
__LVDBE_PRIVATE_H__	lvm/Bass/src/LVDBE_Private.h	28;"	d
__LVEQNB_COEFFS_H__	lvm/Eq/src/LVEQNB_Coeffs.h	20;"	d
__LVEQNB_H__	lvm/Eq/lib/LVEQNB.h	73;"	d
__LVEQNB_PRIVATE_H__	lvm/Eq/src/LVEQNB_Private.h	19;"	d
__LVM_COEFFS_H__	lvm/Bundle/src/LVM_Coeffs.h	19;"	d
__LVM_COMMON_H__	lvm/Common/lib/LVM_Common.h	28;"	d
__LVM_H__	lvm/Bundle/lib/LVM.h	54;"	d
__LVM_MIXER_FILTER_COEFFS_H__	lvm/Common/src/LVM_Mixer_FilterCoeffs.h	28;"	d
__LVM_PRIVATE_H__	lvm/Bundle/src/LVM_Private.h	28;"	d
__LVM_TABLES_H__	lvm/Bundle/src/LVM_Tables.h	19;"	d
__LVM_TIMER_H__	lvm/Common/lib/LVM_Timer.h	19;"	d
__LVREV_H__	lvm/Reverb/lib/LVREV.h	29;"	d
__LVREV_PRIVATE_H__	lvm/Reverb/src/LVREV_Private.h	19;"	d
__MIXER_H__	lvm/Common/lib/Mixer.h	19;"	d
__MIXER_PRIVATE_H__	lvm/Common/src/Mixer_private.h	19;"	d
__SCALARARITHMETIC_H__	lvm/Common/lib/ScalarArithmetic.h	19;"	d
__anon102::pTable1	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable1;$/;"	m	struct:__anon102	access:public
__anon102::pTable2	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable2;$/;"	m	struct:__anon102	access:public
__anon102::pTable3	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable3;$/;"	m	struct:__anon102	access:public
__anon102::pTable4	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable4;$/;"	m	struct:__anon102	access:public
__anon102::pTable5	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable5;$/;"	m	struct:__anon102	access:public
__anon102::pTable6	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable6;$/;"	m	struct:__anon102	access:public
__anon102::pTable7	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable7;$/;"	m	struct:__anon102	access:public
__anon102::pTable8	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable8;$/;"	m	struct:__anon102	access:public
__anon103::Size	lvm/StereoWidening/lib/LVCS.h	/^    LVM_UINT32              Size;                   \/* Region size in bytes *\/$/;"	m	struct:__anon103	access:public
__anon103::Type	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_MemoryTypes_en     Type;                   \/* Region type *\/$/;"	m	struct:__anon103	access:public
__anon103::pBaseAddress	lvm/StereoWidening/lib/LVCS.h	/^    void                    *pBaseAddress;          \/* Pointer to the region base address *\/$/;"	m	struct:__anon103	access:public
__anon104::Region	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_MemoryRegion_t Region[LVCS_NR_MEMORY_REGIONS]; \/* One definition for each region *\/$/;"	m	struct:__anon104	access:public
__anon105::CompressorMode	lvm/StereoWidening/lib/LVCS.h	/^    LVM_Mode_en             CompressorMode;         \/* Non-Linear Compressor Mode *\/$/;"	m	struct:__anon105	access:public
__anon105::EffectLevel	lvm/StereoWidening/lib/LVCS.h	/^    LVM_INT16               EffectLevel;            \/* Effect level *\/$/;"	m	struct:__anon105	access:public
__anon105::OperatingMode	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_Modes_en           OperatingMode;          \/* Algorithm mode *\/$/;"	m	struct:__anon105	access:public
__anon105::ReverbLevel	lvm/StereoWidening/lib/LVCS.h	/^    LVM_UINT16              ReverbLevel;            \/* Reverb level in % *\/$/;"	m	struct:__anon105	access:public
__anon105::SampleRate	lvm/StereoWidening/lib/LVCS.h	/^    LVM_Fs_en               SampleRate;             \/* Sampling rate *\/$/;"	m	struct:__anon105	access:public
__anon105::SourceFormat	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_SourceFormat_en    SourceFormat;           \/* Source data format *\/$/;"	m	struct:__anon105	access:public
__anon105::SpeakerType	lvm/StereoWidening/lib/LVCS.h	/^    LVCS_SpeakerType_en     SpeakerType;            \/* Output device type *\/$/;"	m	struct:__anon105	access:public
__anon106::CallBack	lvm/StereoWidening/lib/LVCS.h	/^    LVM_Callback            CallBack;               \/* Bundle callback *\/$/;"	m	struct:__anon106	access:public
__anon106::MaxBlockSize	lvm/StereoWidening/lib/LVCS.h	/^    LVM_UINT16              MaxBlockSize;           \/* Maximum block size in sample pairs *\/$/;"	m	struct:__anon106	access:public
__anon106::pBundleInstance	lvm/StereoWidening/lib/LVCS.h	/^    void                    *pBundleInstance;       \/* Bundle instance handle *\/$/;"	m	struct:__anon106	access:public
__anon107::DelayOffset	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                   DelayOffset;$/;"	m	struct:__anon107	access:public
__anon107::DelaySize	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                   DelaySize;$/;"	m	struct:__anon107	access:public
__anon107::ProcGain	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                   ProcGain;$/;"	m	struct:__anon107	access:public
__anon107::ReverbLevel	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                   ReverbLevel;$/;"	m	struct:__anon107	access:public
__anon107::StereoSamples	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                    StereoSamples[2*LVCS_STEREODELAY_CS_48KHZ];$/;"	m	struct:__anon107	access:public
__anon107::UnprocGain	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    LVM_INT16                   UnprocGain;$/;"	m	struct:__anon107	access:public
__anon107::pBiquadCallBack	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    void                        (*pBiquadCallBack) (Biquad_Instance_t*, LVM_INT16*, LVM_INT16*, LVM_INT16);$/;"	m	struct:__anon107	access:public
__anon108::pBiquadCallBack	lvm/StereoWidening/src/LVCS_Equaliser.h	/^    void (*pBiquadCallBack) (Biquad_Instance_t*, LVM_INT16*, LVM_INT16*, LVM_INT16);$/;"	m	struct:__anon108	access:public
__anon109::MidGain	lvm/StereoWidening/src/LVCS_StereoEnhancer.h	/^      LVM_UINT16              MidGain;            \/* Middle gain in mobile speaker mode *\/$/;"	m	struct:__anon109	access:public
__anon109::pBiquadCallBack_Mid	lvm/StereoWidening/src/LVCS_StereoEnhancer.h	/^    void                    (*pBiquadCallBack_Mid)(Biquad_Instance_t*, LVM_INT16*, LVM_INT16*, LVM_INT16);$/;"	m	struct:__anon109	access:public
__anon109::pBiquadCallBack_Side	lvm/StereoWidening/src/LVCS_StereoEnhancer.h	/^    void                    (*pBiquadCallBack_Side)(Biquad_Instance_t*, LVM_INT16*, LVM_INT16*, LVM_INT16);$/;"	m	struct:__anon109	access:public
__anon10::CentreFrequency	lvm/Bass/lib/LVDBE.h	/^    LVDBE_CentreFreq_en     CentreFrequency;$/;"	m	struct:__anon10	access:public
__anon10::EffectLevel	lvm/Bass/lib/LVDBE.h	/^    LVM_INT16               EffectLevel;$/;"	m	struct:__anon10	access:public
__anon10::HPFSelect	lvm/Bass/lib/LVDBE.h	/^    LVDBE_FilterSelect_en   HPFSelect;$/;"	m	struct:__anon10	access:public
__anon10::HeadroomdB	lvm/Bass/lib/LVDBE.h	/^    LVM_INT16               HeadroomdB;$/;"	m	struct:__anon10	access:public
__anon10::OperatingMode	lvm/Bass/lib/LVDBE.h	/^    LVDBE_Mode_en           OperatingMode;$/;"	m	struct:__anon10	access:public
__anon10::SampleRate	lvm/Bass/lib/LVDBE.h	/^    LVDBE_Fs_en             SampleRate;$/;"	m	struct:__anon10	access:public
__anon10::VolumeControl	lvm/Bass/lib/LVDBE.h	/^    LVDBE_Volume_en         VolumeControl;$/;"	m	struct:__anon10	access:public
__anon10::VolumedB	lvm/Bass/lib/LVDBE.h	/^    LVM_INT16               VolumedB;$/;"	m	struct:__anon10	access:public
__anon110::Mixer_Instance	lvm/StereoWidening/src/LVCS_BypassMix.h	/^    LVMixer3_2St_st         Mixer_Instance;             \/* Mixer instance *\/$/;"	m	struct:__anon110	access:public
__anon110::Output_Shift	lvm/StereoWidening/src/LVCS_BypassMix.h	/^    LVM_UINT16              Output_Shift;               \/* Correcting gain output shift *\/$/;"	m	struct:__anon110	access:public
__anon111::Loss	lvm/StereoWidening/src/LVCS_BypassMix.h	/^    LVM_UINT16              Loss;                       \/* Loss required *\/$/;"	m	struct:__anon111	access:public
__anon111::Shift	lvm/StereoWidening/src/LVCS_BypassMix.h	/^    LVM_UINT16              Shift;                      \/* Left shifts required *\/$/;"	m	struct:__anon111	access:public
__anon111::UnprocLoss	lvm/StereoWidening/src/LVCS_BypassMix.h	/^    LVM_UINT16              UnprocLoss;                 \/* Unprocessed path loss *\/$/;"	m	struct:__anon111	access:public
__anon113::CompFull	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16   CompFull;                       \/* Post CS compression 100% effect *\/$/;"	m	struct:__anon113	access:public
__anon113::CompMin	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16   CompMin;                        \/* Post CS compression 0% effect *\/$/;"	m	struct:__anon113	access:public
__anon113::GainFull	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16   GainFull;                       \/* CS gain correct 100% effect *\/$/;"	m	struct:__anon113	access:public
__anon113::GainMin	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16   GainMin;                        \/* CS gain correct 0% effect *\/$/;"	m	struct:__anon113	access:public
__anon114::BypassMix	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_BypassMix_t        BypassMix;          \/* Bypass mixer configuration *\/$/;"	m	struct:__anon114	access:public
__anon114::Capabilities	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_Capabilities_t     Capabilities;       \/* Initialisation capabilities *\/$/;"	m	struct:__anon114	access:public
__anon114::CompressGain	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               CompressGain;       \/* Last used compressor gain*\/$/;"	m	struct:__anon114	access:public
__anon114::Equaliser	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_Equaliser_t        Equaliser;          \/* Equaliser configuration *\/$/;"	m	struct:__anon114	access:public
__anon114::MSTarget0	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               MSTarget0;                          \/* Mixer state control variable for smooth transtion *\/$/;"	m	struct:__anon114	access:public
__anon114::MSTarget1	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               MSTarget1;                          \/* Mixer state control variable for smooth transtion *\/$/;"	m	struct:__anon114	access:public
__anon114::MemoryTable	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_MemTab_t           MemoryTable;        \/* Instance memory allocation table *\/$/;"	m	struct:__anon114	access:public
__anon114::OutputDevice	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_OutputDevice_en    OutputDevice;       \/* Selected output device type *\/$/;"	m	struct:__anon114	access:public
__anon114::Params	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_Params_t           Params;             \/* Instance parameters *\/$/;"	m	struct:__anon114	access:public
__anon114::Reverberation	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_ReverbGenerator_t  Reverberation;      \/* Reverberation configuration *\/$/;"	m	struct:__anon114	access:public
__anon114::StereoEnhancer	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_StereoEnhancer_t   StereoEnhancer;     \/* Stereo enhancer configuration *\/$/;"	m	struct:__anon114	access:public
__anon114::TimerInstance	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_Timer_Instance_t    TimerInstance;                      \/* Timer instance *\/$/;"	m	struct:__anon114	access:public
__anon114::TimerParams	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_Timer_Params_t      TimerParams;                        \/* Timer parameters *\/$/;"	m	struct:__anon114	access:public
__anon114::TransitionGain	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               TransitionGain;     \/* Transition gain *\/$/;"	m	struct:__anon114	access:public
__anon114::VolCorrect	lvm/StereoWidening/src/LVCS_Private.h	/^    LVCS_VolCorrect_t       VolCorrect;         \/* Volume correction settings *\/$/;"	m	struct:__anon114	access:public
__anon114::bInOperatingModeTransition	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               bInOperatingModeTransition;         \/* Operating mode transition flag *\/$/;"	m	struct:__anon114	access:public
__anon114::bTimerDone	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               bTimerDone;                         \/* Timer completion flag *\/$/;"	m	struct:__anon114	access:public
__anon115::EqualiserBiquadInstance	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_Instance_t       EqualiserBiquadInstance;$/;"	m	struct:__anon115	access:public
__anon115::ReverbBiquadInstance	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_Instance_t       ReverbBiquadInstance;$/;"	m	struct:__anon115	access:public
__anon115::SEBiquadInstanceMid	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_Instance_t       SEBiquadInstanceMid;$/;"	m	struct:__anon115	access:public
__anon115::SEBiquadInstanceSide	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_Instance_t       SEBiquadInstanceSide;$/;"	m	struct:__anon115	access:public
__anon116::EqualiserBiquadTaps	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_2I_Order2_Taps_t EqualiserBiquadTaps;$/;"	m	struct:__anon116	access:public
__anon116::ReverbBiquadTaps	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_2I_Order2_Taps_t ReverbBiquadTaps;$/;"	m	struct:__anon116	access:public
__anon116::SEBiquadTapsMid	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_1I_Order1_Taps_t SEBiquadTapsMid;$/;"	m	struct:__anon116	access:public
__anon116::SEBiquadTapsSide	lvm/StereoWidening/src/LVCS_Private.h	/^    Biquad_1I_Order2_Taps_t SEBiquadTapsSide;$/;"	m	struct:__anon116	access:public
__anon119::CenterFrequency	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT16                 CenterFrequency;             \/* Center frequency of the band-pass filter (in Hz)                  *\/$/;"	m	struct:__anon119	access:public
__anon119::PostGain	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_INT16                  PostGain;                    \/* Postgain to apply after the filtering    (in dB Q16.0)            *\/$/;"	m	struct:__anon119	access:public
__anon119::QFactor	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT16                 QFactor;                     \/* Quality factor of the filter             (in 1\/100)               *\/$/;"	m	struct:__anon119	access:public
__anon11::CentreFrequency	lvm/Bass/lib/LVDBE.h	/^      LVM_UINT16              CentreFrequency;          \/* Centre frequency capabilities *\/$/;"	m	struct:__anon11	access:public
__anon11::MaxBlockSize	lvm/Bass/lib/LVDBE.h	/^      LVM_UINT16              MaxBlockSize;             \/* Maximum block size in sample pairs *\/$/;"	m	struct:__anon11	access:public
__anon11::SampleRate	lvm/Bass/lib/LVDBE.h	/^      LVM_UINT16              SampleRate;               \/* Sampling rate capabilities *\/$/;"	m	struct:__anon11	access:public
__anon120::MaxInputBlockSize	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT16                 MaxInputBlockSize;           \/* Maximum expected input block size (in samples)                    *\/$/;"	m	struct:__anon120	access:public
__anon120::SpectralDataBufferDuration	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT16                 SpectralDataBufferDuration;  \/* Spectral data buffer duration in time (ms in Q16.0)               *\/$/;"	m	struct:__anon120	access:public
__anon120::nBands	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT16                 nBands;                      \/* Number of bands of the SA                                         *\/$/;"	m	struct:__anon120	access:public
__anon120::pFiltersParams	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_FilterParam_t       *pFiltersParams;              \/* Points to nBands filter param structures for filters settings     *\/$/;"	m	struct:__anon120	access:public
__anon121::Fs	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_Fs_en                  Fs;                          \/* Input sampling rate                                               *\/$/;"	m	struct:__anon121	access:public
__anon121::LevelDetectionSpeed	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_LevelDetectSpeed_en  LevelDetectionSpeed;         \/* Level detection speed                                             *\/$/;"	m	struct:__anon121	access:public
__anon122::Size	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT32                 Size;                        \/* Region size in bytes                                              *\/$/;"	m	struct:__anon122	access:public
__anon122::Type	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_MemoryTypes_en       Type;                        \/* Region type                                                       *\/$/;"	m	struct:__anon122	access:public
__anon122::pBaseAddress	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    void                       *pBaseAddress;               \/* Pointer to the region base address                                *\/$/;"	m	struct:__anon122	access:public
__anon123::Region	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_MemoryRegion_t       Region[LVPSA_NR_MEMORY_REGIONS];\/* One definition for each region                                 *\/$/;"	m	struct:__anon123	access:public
__anon126::BufferUpdateSamplesCount	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_INT32                   BufferUpdateSamplesCount;           \/* Counter used to know when to put a new value in the buffer                                   *\/$/;"	m	struct:__anon126	access:public
__anon126::CurrentParams	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_ControlParams_t       CurrentParams;                      \/* Current control parameters of the module                                                     *\/$/;"	m	struct:__anon126	access:public
__anon126::DownSamplingCount	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  DownSamplingCount;                  \/* Counter used for the downsampling handling                                                   *\/$/;"	m	struct:__anon126	access:public
__anon126::DownSamplingFactor	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  DownSamplingFactor;                 \/* Down sampling factor depending on the sampling frequency                                     *\/$/;"	m	struct:__anon126	access:public
__anon126::LocalSamplesCount	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  LocalSamplesCount;                  \/* Counter used to update the SpectralDataBufferAudioTime                                       *\/$/;"	m	struct:__anon126	access:public
__anon126::MaxInputBlockSize	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  MaxInputBlockSize;                  \/* Maximum input data buffer size                                                               *\/$/;"	m	struct:__anon126	access:public
__anon126::MemoryTable	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_MemTab_t              MemoryTable;$/;"	m	struct:__anon126	access:public
__anon126::NewParams	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_ControlParams_t       NewParams;                          \/* New control parameters given by the user                                                     *\/$/;"	m	struct:__anon126	access:public
__anon126::SpectralDataBufferAudioTime	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_Time                  SpectralDataBufferAudioTime;        \/* AudioTime at which the last value save occured in the buffer                                 *\/$/;"	m	struct:__anon126	access:public
__anon126::SpectralDataBufferDuration	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  SpectralDataBufferDuration;         \/* Length of the buffer in time (ms) defined by the application                                 *\/$/;"	m	struct:__anon126	access:public
__anon126::SpectralDataBufferLength	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT32                  SpectralDataBufferLength;           \/* Number of spectrum data value that the buffer can contain (per band)$/;"	m	struct:__anon126	access:public
__anon126::bControlPending	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_CHAR                    bControlPending;                    \/* Flag incating a change of the control parameters                                             *\/$/;"	m	struct:__anon126	access:public
__anon126::nBands	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  nBands;                             \/* Number of bands of the spectrum analyzer                                                     *\/$/;"	m	struct:__anon126	access:public
__anon126::nRelevantFilters	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  nRelevantFilters;                   \/* Number of relevent filters depending on sampling frequency and bands center frequency        *\/$/;"	m	struct:__anon126	access:public
__anon126::nSamplesBufferUpdate	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  nSamplesBufferUpdate;               \/* Number of samples to make 20ms                                                               *\/$/;"	m	struct:__anon126	access:public
__anon126::pBPFiltersPrecision	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_BPFilterPrecision_en *pBPFiltersPrecision;                \/* Points a nBands elements array that contains the filter precision for each band              *\/$/;"	m	struct:__anon126	access:public
__anon126::pBP_Instances	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    Biquad_Instance_t          *pBP_Instances;                      \/* Points a nBands elements array that contains the band pass filter instance for each band     *\/$/;"	m	struct:__anon126	access:public
__anon126::pBP_Taps	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    Biquad_1I_Order2_Taps_t    *pBP_Taps;                           \/* Points a nBands elements array that contains the band pass filter taps for each band         *\/$/;"	m	struct:__anon126	access:public
__anon126::pFiltersParams	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_FilterParam_t        *pFiltersParams;                     \/* Copy of the filters parameters from the input parameters                                     *\/$/;"	m	struct:__anon126	access:public
__anon126::pPostGains	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                 *pPostGains;                         \/* Points a nBands elements array that contains the post-filter gains for each band             *\/$/;"	m	struct:__anon126	access:public
__anon126::pPreviousPeaks	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT8                  *pPreviousPeaks;                     \/* Points to a nBands elements array that contains the previous peak value of the level$/;"	m	struct:__anon126	access:public
__anon126::pQPD_States	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    QPD_State_t                *pQPD_States;                        \/* Points a nBands elements array that contains the QPD filter instance for each band           *\/$/;"	m	struct:__anon126	access:public
__anon126::pQPD_Taps	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    QPD_Taps_t                 *pQPD_Taps;                          \/* Points a nBands elements array that contains the QPD filter taps for each band               *\/$/;"	m	struct:__anon126	access:public
__anon126::pSpectralDataBufferStart	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT8                  *pSpectralDataBufferStart;           \/* Starting address of the buffer                                                               *\/$/;"	m	struct:__anon126	access:public
__anon126::pSpectralDataBufferWritePointer	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT8                  *pSpectralDataBufferWritePointer;    \/* Current position of the writting pointer of the buffer                                       *\/$/;"	m	struct:__anon126	access:public
__anon127::Coefs	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^  LVM_INT32                            Coefs[2];       \/* pointer to the filter coefficients *\/$/;"	m	struct:__anon127	access:public
__anon127::pDelay	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^  LVM_INT32                            *pDelay;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:__anon127	access:public
__anon128::KM	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^    LVM_INT32 KM;    \/*should store b2*\/$/;"	m	struct:__anon128	access:public
__anon128::KP	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^    LVM_INT32 KP;    \/*should store a0*\/$/;"	m	struct:__anon128	access:public
__anon129::Storage	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^    LVM_INT32 Storage[1];$/;"	m	struct:__anon129	access:public
__anon12::AGCInstance	lvm/Bass/src/LVDBE_Private.h	/^    AGC_MIX_VOL_2St1Mon_D32_t   AGCInstance;        \/* AGC instance parameters *\/$/;"	m	struct:__anon12	access:public
__anon12::BPFTaps	lvm/Bass/src/LVDBE_Private.h	/^    Biquad_1I_Order2_Taps_t     BPFTaps;            \/* Band pass filter taps *\/$/;"	m	struct:__anon12	access:public
__anon12::BypassMixer	lvm/Bass/src/LVDBE_Private.h	/^    LVMixer3_2St_st             BypassMixer;        \/* Bypass Mixer for Click Removal *\/$/;"	m	struct:__anon12	access:public
__anon12::BypassVolume	lvm/Bass/src/LVDBE_Private.h	/^    LVMixer3_1St_st             BypassVolume;       \/* Bypass volume scaler *\/$/;"	m	struct:__anon12	access:public
__anon12::HPFTaps	lvm/Bass/src/LVDBE_Private.h	/^    Biquad_2I_Order2_Taps_t     HPFTaps;            \/* High pass filter taps *\/$/;"	m	struct:__anon12	access:public
__anon131::in_buf	include/dtap.h	/^    uint8_t *in_buf;$/;"	m	struct:__anon131	access:public
__anon131::in_len	include/dtap.h	/^    int in_len;$/;"	m	struct:__anon131	access:public
__anon131::out_buf	include/dtap.h	/^    uint8_t *out_buf;$/;"	m	struct:__anon131	access:public
__anon131::out_len	include/dtap.h	/^    int out_len;$/;"	m	struct:__anon131	access:public
__anon132::mutex	include/dtap.h	/^    dtap_lock_t mutex;$/;"	m	struct:__anon132	access:public
__anon132::name	include/dtap.h	/^    char name[MAX_NAME_LEN];$/;"	m	struct:__anon132	access:public
__anon13::BPFInstance	lvm/Bass/src/LVDBE_Private.h	/^    Biquad_Instance_t           BPFInstance;        \/* Band pass filter instance *\/$/;"	m	struct:__anon13	access:public
__anon13::HPFInstance	lvm/Bass/src/LVDBE_Private.h	/^    Biquad_Instance_t           HPFInstance;        \/* High pass filter instance *\/$/;"	m	struct:__anon13	access:public
__anon14::Capabilities	lvm/Bass/src/LVDBE_Private.h	/^    LVDBE_Capabilities_t        Capabilities;         \/* Instance capabilities *\/$/;"	m	struct:__anon14	access:public
__anon14::MemoryTable	lvm/Bass/src/LVDBE_Private.h	/^    LVDBE_MemTab_t                MemoryTable;        \/* Instance memory allocation table *\/$/;"	m	struct:__anon14	access:public
__anon14::Params	lvm/Bass/src/LVDBE_Private.h	/^    LVDBE_Params_t                Params;             \/* Instance parameters *\/$/;"	m	struct:__anon14	access:public
__anon14::pCoef	lvm/Bass/src/LVDBE_Private.h	/^    LVDBE_Coef_t                *pCoef;                \/* Instance coefficients *\/$/;"	m	struct:__anon14	access:public
__anon14::pData	lvm/Bass/src/LVDBE_Private.h	/^    LVDBE_Data_t                *pData;                \/* Instance data *\/$/;"	m	struct:__anon14	access:public
__anon28::pPlatform	lvm/Bundle/lib/LVM.h	/^    LVM_CHAR                    *pPlatform;             \/* Pointer to the library platform type *\/$/;"	m	struct:__anon28	access:public
__anon28::pVersionNumber	lvm/Bundle/lib/LVM.h	/^    LVM_CHAR                    *pVersionNumber;        \/* Pointer to the version number in the format X.YY.ZZ *\/$/;"	m	struct:__anon28	access:public
__anon29::Region	lvm/Bundle/lib/LVM.h	/^    LVM_MemoryRegion_st         Region[LVM_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon29	access:public
__anon30::Frequency	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  Frequency;              \/* Band centre frequency in Hz *\/$/;"	m	struct:__anon30	access:public
__anon30::Gain	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   Gain;                   \/* Band gain in dB *\/$/;"	m	struct:__anon30	access:public
__anon30::QFactor	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  QFactor;                \/* Band quality factor (x100) *\/$/;"	m	struct:__anon30	access:public
__anon31::Headroom_Offset	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   Headroom_Offset;        \/* Headroom = biggest band gain - Headroom_Offset *\/$/;"	m	struct:__anon31	access:public
__anon31::Limit_High	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  Limit_High;             \/* High frequency limit of the band in Hertz *\/$/;"	m	struct:__anon31	access:public
__anon31::Limit_Low	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  Limit_Low;              \/* Low frequency limit of the band in Hertz *\/$/;"	m	struct:__anon31	access:public
__anon32::BE_CentreFreq	lvm/Bundle/lib/LVM.h	/^    LVM_BE_CentreFreq_en        BE_CentreFreq;          \/* Bass Enhancement centre frequency *\/$/;"	m	struct:__anon32	access:public
__anon32::BE_EffectLevel	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   BE_EffectLevel;         \/* Bass Enhancement effect level *\/$/;"	m	struct:__anon32	access:public
__anon32::BE_HPF	lvm/Bundle/lib/LVM.h	/^    LVM_BE_FilterSelect_en      BE_HPF;                 \/* Bass Enhancement high pass filter selector *\/$/;"	m	struct:__anon32	access:public
__anon32::BE_OperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_BE_Mode_en              BE_OperatingMode;       \/* Bass Enhancement operating mode *\/$/;"	m	struct:__anon32	access:public
__anon32::CS_EffectLevel	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   CS_EffectLevel;           \/* Concert Sound effect level *\/$/;"	m	struct:__anon32	access:public
__anon32::EQNB_NBands	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  EQNB_NBands;            \/* Number of bands *\/$/;"	m	struct:__anon32	access:public
__anon32::EQNB_OperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_EQNB_Mode_en            EQNB_OperatingMode;     \/* N-Band Equaliser operating mode *\/$/;"	m	struct:__anon32	access:public
__anon32::OperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_Mode_en                 OperatingMode;          \/* Bundle operating mode On\/Bypass *\/$/;"	m	struct:__anon32	access:public
__anon32::PSA_Enable	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_Mode_en             PSA_Enable;$/;"	m	struct:__anon32	access:public
__anon32::PSA_PeakDecayRate	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_DecaySpeed_en       PSA_PeakDecayRate;      \/* Peak value decay rate*\/$/;"	m	struct:__anon32	access:public
__anon32::SampleRate	lvm/Bundle/lib/LVM.h	/^    LVM_Fs_en                   SampleRate;             \/* Sample rate *\/$/;"	m	struct:__anon32	access:public
__anon32::SourceFormat	lvm/Bundle/lib/LVM.h	/^    LVM_Format_en               SourceFormat;           \/* Input data format *\/$/;"	m	struct:__anon32	access:public
__anon32::SpeakerType	lvm/Bundle/lib/LVM.h	/^    LVM_OutputDeviceType_en     SpeakerType;            \/* Output device type *\/$/;"	m	struct:__anon32	access:public
__anon32::TE_EffectLevel	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   TE_EffectLevel;         \/* Treble Enhancement gain dBs *\/$/;"	m	struct:__anon32	access:public
__anon32::TE_OperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_TE_Mode_en              TE_OperatingMode;       \/* Treble Enhancement On\/Off *\/$/;"	m	struct:__anon32	access:public
__anon32::VC_Balance	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   VC_Balance;             \/* Left Right Balance control in dB (-96 to 96 dB), -ve values reduce$/;"	m	struct:__anon32	access:public
__anon32::VC_EffectLevel	lvm/Bundle/lib/LVM.h	/^    LVM_INT16                   VC_EffectLevel;         \/* Volume Control setting in dBs *\/$/;"	m	struct:__anon32	access:public
__anon32::VirtualizerOperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_Mode_en                 VirtualizerOperatingMode; \/* Virtualizer operating mode On\/Off *\/$/;"	m	struct:__anon32	access:public
__anon32::VirtualizerReverbLevel	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  VirtualizerReverbLevel;   \/* Virtualizer reverb level in % *\/$/;"	m	struct:__anon32	access:public
__anon32::VirtualizerType	lvm/Bundle/lib/LVM.h	/^    LVM_VirtualizerType_en      VirtualizerType;          \/* Virtualizer type: ConcertSound *\/$/;"	m	struct:__anon32	access:public
__anon32::pEQNB_BandDefinition	lvm/Bundle/lib/LVM.h	/^    LVM_EQNB_BandDef_t          *pEQNB_BandDefinition;  \/* Pointer to equaliser definitions *\/$/;"	m	struct:__anon32	access:public
__anon33::BufferMode	lvm/Bundle/lib/LVM.h	/^    LVM_BufferMode_en           BufferMode;             \/* Buffer management mode *\/$/;"	m	struct:__anon33	access:public
__anon33::EQNB_NumBands	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  EQNB_NumBands;          \/* Maximum number of equaliser bands *\/$/;"	m	struct:__anon33	access:public
__anon33::MaxBlockSize	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  MaxBlockSize;           \/* Maximum processing block size *\/$/;"	m	struct:__anon33	access:public
__anon33::PSA_Included	lvm/Bundle/lib/LVM.h	/^    LVM_PSA_Mode_en             PSA_Included;            \/* Controls the instance memory allocation for PSA: ON\/OFF *\/$/;"	m	struct:__anon33	access:public
__anon34::Headroom_OperatingMode	lvm/Bundle/lib/LVM.h	/^    LVM_Headroom_Mode_en        Headroom_OperatingMode; \/* Headroom Control On\/Off *\/$/;"	m	struct:__anon34	access:public
__anon34::NHeadroomBands	lvm/Bundle/lib/LVM.h	/^    LVM_UINT16                  NHeadroomBands;         \/* Number of headroom bands *\/$/;"	m	struct:__anon34	access:public
__anon34::pHeadroomDefinition	lvm/Bundle/lib/LVM.h	/^    LVM_HeadroomBandDef_t       *pHeadroomDefinition;   \/* Pointer to headroom bands definition *\/$/;"	m	struct:__anon34	access:public
__anon35::Alignment	lvm/Bundle/src/LVM_Private.h	/^    LVM_UINT16              Alignment;          \/* Byte alignment *\/$/;"	m	struct:__anon35	access:public
__anon35::Size	lvm/Bundle/src/LVM_Private.h	/^    LVM_UINT32              Size;               \/* Region size in bytes *\/$/;"	m	struct:__anon35	access:public
__anon35::Type	lvm/Bundle/src/LVM_Private.h	/^    LVM_MemoryTypes_en      Type;               \/* Region type *\/$/;"	m	struct:__anon35	access:public
__anon35::pBaseAddress	lvm/Bundle/src/LVM_Private.h	/^    void                    *pBaseAddress;      \/* Pointer to the region base address *\/$/;"	m	struct:__anon35	access:public
__anon36::Region	lvm/Bundle/src/LVM_Private.h	/^    LVM_IntMemoryRegion_t   Region[LVM_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon36	access:public
__anon37::BufferState	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               BufferState;        \/* Buffer status *\/$/;"	m	struct:__anon37	access:public
__anon37::InDelayBuffer	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               InDelayBuffer[6*MIN_INTERNAL_BLOCKSIZE]; \/* Input buffer delay line, left and right *\/$/;"	m	struct:__anon37	access:public
__anon37::InDelaySamples	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               InDelaySamples;     \/* Number of samples in the input delay buffer *\/$/;"	m	struct:__anon37	access:public
__anon37::OutDelayBuffer	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               OutDelayBuffer[2*MIN_INTERNAL_BLOCKSIZE]; \/* Output buffer delay line *\/$/;"	m	struct:__anon37	access:public
__anon37::OutDelaySamples	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               OutDelaySamples;    \/* Number of samples in the output delay buffer, left and right *\/$/;"	m	struct:__anon37	access:public
__anon37::SamplesToOutput	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               SamplesToOutput;    \/* Samples to write to the output *\/$/;"	m	struct:__anon37	access:public
__anon37::pScratch	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               *pScratch;          \/* Bundle scratch buffer *\/$/;"	m	struct:__anon37	access:public
__anon38::TrebleBoost_Taps	lvm/Bundle/src/LVM_Private.h	/^    Biquad_2I_Order1_Taps_t TrebleBoost_Taps;   \/* Treble boost Taps *\/$/;"	m	struct:__anon38	access:public
__anon39::TrebleBoost_State	lvm/Bundle/src/LVM_Private.h	/^    Biquad_Instance_t       TrebleBoost_State;  \/* State for the treble boost filter *\/$/;"	m	struct:__anon39	access:public
__anon40::BlickSizeMultiple	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT32               BlickSizeMultiple;$/;"	m	struct:__anon40	access:public
__anon40::CS_Active	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               CS_Active;          \/* Control flag *\/$/;"	m	struct:__anon40	access:public
__anon40::CS_Instance	lvm/Bundle/src/LVM_Private.h	/^    LVCS_Instance_t         CS_Instance;        \/* Concert Sound instance *\/$/;"	m	struct:__anon40	access:public
__anon40::CallBack	lvm/Bundle/src/LVM_Private.h	/^    LVM_Callback            CallBack;$/;"	m	struct:__anon40	access:public
__anon40::ConfigurationNumber	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT32               ConfigurationNumber;$/;"	m	struct:__anon40	access:public
__anon40::ControlPending	lvm/Bundle/src/LVM_Private.h	/^    LVM_UINT16              ControlPending;     \/* Control flag to indicate update pending *\/$/;"	m	struct:__anon40	access:public
__anon40::DBE_Active	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               DBE_Active;         \/* Control flag *\/$/;"	m	struct:__anon40	access:public
__anon40::DBE_Instance	lvm/Bundle/src/LVM_Private.h	/^    LVDBE_Instance_t        DBE_Instance;       \/* Dynamic Bass Enhancement instance *\/$/;"	m	struct:__anon40	access:public
__anon40::DC_RemovalInstance	lvm/Bundle/src/LVM_Private.h	/^    Biquad_Instance_t       DC_RemovalInstance; \/* DC removal filter instance *\/$/;"	m	struct:__anon40	access:public
__anon40::EQNB_Active	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               EQNB_Active;        \/* Control flag *\/$/;"	m	struct:__anon40	access:public
__anon40::EQNB_Instance	lvm/Bundle/src/LVM_Private.h	/^    LVEQNB_Instance_t       EQNB_Instance;      \/* N-Band Equaliser instance *\/$/;"	m	struct:__anon40	access:public
__anon40::Headroom	lvm/Bundle/src/LVM_Private.h	/^    LVM_UINT16              Headroom;            \/* Value of the current headroom *\/$/;"	m	struct:__anon40	access:public
__anon40::HeadroomParams	lvm/Bundle/src/LVM_Private.h	/^    LVM_HeadroomParams_t    HeadroomParams;      \/* Headroom parameters *\/$/;"	m	struct:__anon40	access:public
__anon40::InstParams	lvm/Bundle/src/LVM_Private.h	/^    LVM_InstParams_t        InstParams;         \/* Instance parameters *\/$/;"	m	struct:__anon40	access:public
__anon40::InternalBlockSize	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               InternalBlockSize;  \/* Maximum internal block size *\/$/;"	m	struct:__anon40	access:public
__anon40::MemoryTable	lvm/Bundle/src/LVM_Private.h	/^    LVM_MemTab_t            MemoryTable;        \/* Instance memory allocation table *\/$/;"	m	struct:__anon40	access:public
__anon40::NewHeadroomParams	lvm/Bundle/src/LVM_Private.h	/^    LVM_HeadroomParams_t    NewHeadroomParams;   \/* New headroom parameters pending update *\/$/;"	m	struct:__anon40	access:public
__anon40::NewParams	lvm/Bundle/src/LVM_Private.h	/^    LVM_ControlParams_t     NewParams;          \/* New control parameters pending update *\/$/;"	m	struct:__anon40	access:public
__anon40::NoSmoothVolume	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16              NoSmoothVolume;      \/* Enable or disable smooth volume changes*\/$/;"	m	struct:__anon40	access:public
__anon40::PSA_ControlParams	lvm/Bundle/src/LVM_Private.h	/^    LVPSA_ControlParams_t   PSA_ControlParams;  \/* Spectrum Analyzer control parameters *\/$/;"	m	struct:__anon40	access:public
__anon40::PSA_GainOffset	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               PSA_GainOffset;     \/* Tone control flag *\/$/;"	m	struct:__anon40	access:public
__anon40::PSA_InitParams	lvm/Bundle/src/LVM_Private.h	/^    LVPSA_InitParams_t      PSA_InitParams;     \/* Spectrum Analyzer initialization parameters *\/$/;"	m	struct:__anon40	access:public
__anon40::PSA_Instance	lvm/Bundle/src/LVM_Private.h	/^    LVPSA_InstancePr_t      PSA_Instance;       \/* Spectrum Analyzer instance *\/$/;"	m	struct:__anon40	access:public
__anon40::Params	lvm/Bundle/src/LVM_Private.h	/^    LVM_ControlParams_t     Params;             \/* Control parameters *\/$/;"	m	struct:__anon40	access:public
__anon40::SamplesToProcess	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               SamplesToProcess;   \/* Input samples left to process *\/$/;"	m	struct:__anon40	access:public
__anon40::TE_Active	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               TE_Active;          \/* Control flag *\/$/;"	m	struct:__anon40	access:public
__anon40::VC_AVLFixedVolume	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               VC_AVLFixedVolume;  \/* AVL fixed volume *\/$/;"	m	struct:__anon40	access:public
__anon40::VC_Active	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               VC_Active;          \/* Control flag *\/$/;"	m	struct:__anon40	access:public
__anon40::VC_BalanceMix	lvm/Bundle/src/LVM_Private.h	/^    LVMixer3_2St_st         VC_BalanceMix;      \/* VC balance mixer *\/$/;"	m	struct:__anon40	access:public
__anon40::VC_Volume	lvm/Bundle/src/LVM_Private.h	/^    LVMixer3_1St_st         VC_Volume;          \/* Volume scaler *\/$/;"	m	struct:__anon40	access:public
__anon40::VC_VolumedB	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               VC_VolumedB;        \/* Gain in dB *\/$/;"	m	struct:__anon40	access:public
__anon40::hCSInstance	lvm/Bundle/src/LVM_Private.h	/^    LVCS_Handle_t           hCSInstance;        \/* Concert Sound instance handle *\/$/;"	m	struct:__anon40	access:public
__anon40::hDBEInstance	lvm/Bundle/src/LVM_Private.h	/^    LVDBE_Handle_t          hDBEInstance;       \/* Dynamic Bass Enhancement instance handle *\/$/;"	m	struct:__anon40	access:public
__anon40::hEQNBInstance	lvm/Bundle/src/LVM_Private.h	/^    LVEQNB_Handle_t         hEQNBInstance;      \/* N-Band Equaliser instance handle *\/$/;"	m	struct:__anon40	access:public
__anon40::hPSAInstance	lvm/Bundle/src/LVM_Private.h	/^    pLVPSA_Handle_t         hPSAInstance;       \/* Spectrum Analyzer instance handle *\/$/;"	m	struct:__anon40	access:public
__anon40::pBufferManagement	lvm/Bundle/src/LVM_Private.h	/^    LVM_Buffer_t            *pBufferManagement; \/* Buffer management variables *\/$/;"	m	struct:__anon40	access:public
__anon40::pEQNB_BandDefs	lvm/Bundle/src/LVM_Private.h	/^    LVM_EQNB_BandDef_t      *pEQNB_BandDefs;    \/* Local storage for new definitions *\/$/;"	m	struct:__anon40	access:public
__anon40::pEQNB_UserDefs	lvm/Bundle/src/LVM_Private.h	/^    LVM_EQNB_BandDef_t      *pEQNB_UserDefs;    \/* Local storage for the user's definitions *\/$/;"	m	struct:__anon40	access:public
__anon40::pHeadroom_BandDefs	lvm/Bundle/src/LVM_Private.h	/^    LVM_HeadroomBandDef_t   *pHeadroom_BandDefs; \/* Local storage for new definitions *\/$/;"	m	struct:__anon40	access:public
__anon40::pHeadroom_UserDefs	lvm/Bundle/src/LVM_Private.h	/^    LVM_HeadroomBandDef_t   *pHeadroom_UserDefs; \/* Local storage for the user's definitions *\/$/;"	m	struct:__anon40	access:public
__anon40::pInputSamples	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               *pInputSamples;     \/* External input sample pointer *\/$/;"	m	struct:__anon40	access:public
__anon40::pOutputSamples	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               *pOutputSamples;    \/* External output sample pointer *\/$/;"	m	struct:__anon40	access:public
__anon40::pPSAInput	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               *pPSAInput;         \/* PSA input pointer *\/$/;"	m	struct:__anon40	access:public
__anon40::pTE_State	lvm/Bundle/src/LVM_Private.h	/^    LVM_TE_Coefs_t          *pTE_State;         \/* State for the treble boost filter *\/$/;"	m	struct:__anon40	access:public
__anon40::pTE_Taps	lvm/Bundle/src/LVM_Private.h	/^    LVM_TE_Data_t           *pTE_Taps;          \/* Treble boost Taps *\/$/;"	m	struct:__anon40	access:public
__anon43::Region	lvm/Reverb/lib/LVREV.h	/^    LVM_MemoryRegion_st        Region[LVREV_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon43	access:public
__anon44::Damping	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  Damping;                \/* Damping *\/$/;"	m	struct:__anon44	access:public
__anon44::Density	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  Density;                \/* Echo density, 0 to 100 for minimum to maximum density *\/$/;"	m	struct:__anon44	access:public
__anon44::HPF	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  HPF;                    \/* High pass filter, in Hz *\/$/;"	m	struct:__anon44	access:public
__anon44::LPF	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  LPF;                    \/* Low pass filter, in Hz *\/$/;"	m	struct:__anon44	access:public
__anon44::Level	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  Level;                  \/* Level, 0 to 100 representing percentage of reverb *\/$/;"	m	struct:__anon44	access:public
__anon44::OperatingMode	lvm/Reverb/lib/LVREV.h	/^    LVM_Mode_en                 OperatingMode;          \/* Operating mode *\/$/;"	m	struct:__anon44	access:public
__anon44::RoomSize	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  RoomSize;               \/* Simulated room size, 1 to 100 for minimum to maximum size *\/$/;"	m	struct:__anon44	access:public
__anon44::SampleRate	lvm/Reverb/lib/LVREV.h	/^    LVM_Fs_en                   SampleRate;             \/* Sample rate *\/$/;"	m	struct:__anon44	access:public
__anon44::SourceFormat	lvm/Reverb/lib/LVREV.h	/^    LVM_Format_en               SourceFormat;           \/* Source data format *\/$/;"	m	struct:__anon44	access:public
__anon44::T60	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  T60;                    \/* Decay time constant, in ms *\/$/;"	m	struct:__anon44	access:public
__anon45::MaxBlockSize	lvm/Reverb/lib/LVREV.h	/^    LVM_UINT16                  MaxBlockSize;           \/* Maximum processing block size *\/$/;"	m	struct:__anon45	access:public
__anon45::NumDelays	lvm/Reverb/lib/LVREV.h	/^    LVREV_NumDelayLines_en      NumDelays;              \/* The number of delay lines, 1, 2 or 4 *\/$/;"	m	struct:__anon45	access:public
__anon45::SourceFormat	lvm/Reverb/lib/LVREV.h	/^    LVM_Format_en               SourceFormat;           \/* Source data formats to support *\/$/;"	m	struct:__anon45	access:public
__anon46::HPTaps	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_1I_Order1_Taps_t HPTaps;                     \/* High pass filter taps *\/$/;"	m	struct:__anon46	access:public
__anon46::LPTaps	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_1I_Order1_Taps_t LPTaps;                     \/* Low pass filter taps *\/$/;"	m	struct:__anon46	access:public
__anon46::RevLPTaps	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_1I_Order1_Taps_t RevLPTaps[4];               \/* Reverb low pass filters taps *\/$/;"	m	struct:__anon46	access:public
__anon47::HPCoefs	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_Instance_t       HPCoefs;                    \/* High pass filter coefficients *\/$/;"	m	struct:__anon47	access:public
__anon47::LPCoefs	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_Instance_t       LPCoefs;                    \/* Low pass filter coefficients *\/$/;"	m	struct:__anon47	access:public
__anon47::RevLPCoefs	lvm/Reverb/src/LVREV_Private.h	/^    Biquad_Instance_t       RevLPCoefs[4];              \/* Reverb low pass filters coefficients *\/$/;"	m	struct:__anon47	access:public
__anon48::AB_Selection	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT16               AB_Selection;               \/* Smooth from tap A to B when 1 otherwise B to A *\/$/;"	m	struct:__anon48	access:public
__anon48::A_DelaySize	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               A_DelaySize[4];             \/* A delay length in samples *\/$/;"	m	struct:__anon48	access:public
__anon48::B_DelaySize	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               B_DelaySize[4];             \/* B delay length in samples *\/$/;"	m	struct:__anon48	access:public
__anon48::BypassMixer	lvm/Reverb/src/LVREV_Private.h	/^    Mix_2St_Cll_t           BypassMixer;                \/* Dry\/wet mixer *\/$/;"	m	struct:__anon48	access:public
__anon48::CurrentParams	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_ControlParams_st  CurrentParams;              \/* Parameters being used *\/$/;"	m	struct:__anon48	access:public
__anon48::Delay_AP	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               Delay_AP[4];                \/* Offset to AP delay buffer start *\/$/;"	m	struct:__anon48	access:public
__anon48::FeedbackMixer	lvm/Reverb/src/LVREV_Private.h	/^    Mix_1St_Cll_t           FeedbackMixer[4];           \/* Mixer for Pop and Click Supression caused by feedback Gain *\/$/;"	m	struct:__anon48	access:public
__anon48::Gain	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT16               Gain;                       \/* Gain applied to output to maintain average signal power *\/$/;"	m	struct:__anon48	access:public
__anon48::GainMixer	lvm/Reverb/src/LVREV_Private.h	/^    Mix_1St_Cll_t           GainMixer;                  \/* Gain smoothing *\/$/;"	m	struct:__anon48	access:public
__anon48::InstanceParams	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_InstanceParams_st InstanceParams;             \/* Initialisation time instance parameters *\/$/;"	m	struct:__anon48	access:public
__anon48::MaxBlkLen	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               MaxBlkLen;                  \/* Maximum block size for internal processing *\/$/;"	m	struct:__anon48	access:public
__anon48::MemoryTable	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_MemoryTable_st    MemoryTable;                \/* Memory table *\/$/;"	m	struct:__anon48	access:public
__anon48::Mixer_APTaps	lvm/Reverb/src/LVREV_Private.h	/^    Mix_2St_Cll_t           Mixer_APTaps[4];            \/* Smoothed AP delay mixer *\/$/;"	m	struct:__anon48	access:public
__anon48::Mixer_SGFeedback	lvm/Reverb/src/LVREV_Private.h	/^    Mix_1St_Cll_t           Mixer_SGFeedback[4];        \/* Smoothed SAfeedback gain *\/$/;"	m	struct:__anon48	access:public
__anon48::Mixer_SGFeedforward	lvm/Reverb/src/LVREV_Private.h	/^    Mix_1St_Cll_t           Mixer_SGFeedforward[4];     \/* Smoothed AP feedforward gain *\/$/;"	m	struct:__anon48	access:public
__anon48::NewParams	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_ControlParams_st  NewParams;                  \/* New parameters from the calling application *\/$/;"	m	struct:__anon48	access:public
__anon48::RoomSizeInms	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               RoomSizeInms;               \/* Room size in msec *\/$/;"	m	struct:__anon48	access:public
__anon48::T	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               T[4];                       \/* Maximum delay size of buffer *\/$/;"	m	struct:__anon48	access:public
__anon48::bControlPending	lvm/Reverb/src/LVREV_Private.h	/^    LVM_CHAR                bControlPending;            \/* Flag to indicate new parameters are available *\/$/;"	m	struct:__anon48	access:public
__anon48::bDisableReverb	lvm/Reverb/src/LVREV_Private.h	/^    LVM_CHAR                bDisableReverb;             \/* Flag to indicate that the mix level is 0% and the reverb can be disabled *\/$/;"	m	struct:__anon48	access:public
__anon48::bFirstControl	lvm/Reverb/src/LVREV_Private.h	/^    LVM_CHAR                bFirstControl;              \/* Flag to indicate that the control function is called for the first time *\/$/;"	m	struct:__anon48	access:public
__anon48::pDelay_T	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pDelay_T[4];               \/* Pointer to delay buffers *\/$/;"	m	struct:__anon48	access:public
__anon48::pFastCoef	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_FastCoef_st       *pFastCoef;                 \/* Fast coefficient memory base address *\/$/;"	m	struct:__anon48	access:public
__anon48::pFastData	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_FastData_st       *pFastData;                 \/* Fast data memory base address *\/$/;"	m	struct:__anon48	access:public
__anon48::pInputSave	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pInputSave;                \/* Reverb block input save for dry\/wet mixing*\/$/;"	m	struct:__anon48	access:public
__anon48::pOffsetA	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pOffsetA[4];               \/* Offset for the A delay tap *\/$/;"	m	struct:__anon48	access:public
__anon48::pOffsetB	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pOffsetB[4];               \/* Offset for the B delay tap *\/$/;"	m	struct:__anon48	access:public
__anon48::pScratch	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pScratch;                  \/* Multi ussge scratch *\/$/;"	m	struct:__anon48	access:public
__anon48::pScratchDelayLine	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pScratchDelayLine[4];      \/* Delay line scratch memory *\/$/;"	m	struct:__anon48	access:public
__anon55::Alignment	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  Alignment;              \/* Region alignment in bytes *\/$/;"	m	struct:__anon55	access:public
__anon55::Size	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT32                  Size;                   \/* Region size in bytes *\/$/;"	m	struct:__anon55	access:public
__anon55::Type	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_MemoryTypes_en       Type;                   \/* Region type *\/$/;"	m	struct:__anon55	access:public
__anon55::pBaseAddress	lvm/Eq/lib/LVEQNB.h	/^    void                        *pBaseAddress;          \/* Pointer to the region base address *\/$/;"	m	struct:__anon55	access:public
__anon56::Region	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_MemoryRegion_t       Region[LVEQNB_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon56	access:public
__anon57::Frequency	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  Frequency;              \/* Band centre frequency in Hz *\/$/;"	m	struct:__anon57	access:public
__anon57::Gain	lvm/Eq/lib/LVEQNB.h	/^    LVM_INT16                   Gain;                   \/* Band gain in dB *\/$/;"	m	struct:__anon57	access:public
__anon57::QFactor	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  QFactor;                \/* Band quality factor *\/$/;"	m	struct:__anon57	access:public
__anon58::NBands	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  NBands;                 \/* Number of bands *\/$/;"	m	struct:__anon58	access:public
__anon58::OperatingMode	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_Mode_en              OperatingMode;$/;"	m	struct:__anon58	access:public
__anon58::SampleRate	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_Fs_en                SampleRate;$/;"	m	struct:__anon58	access:public
__anon58::SourceFormat	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_SourceFormat_en      SourceFormat;$/;"	m	struct:__anon58	access:public
__anon58::pBandDefinition	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_BandDef_t            *pBandDefinition;       \/* Pointer to equaliser definitions *\/$/;"	m	struct:__anon58	access:public
__anon59::CallBack	lvm/Eq/lib/LVEQNB.h	/^    LVM_Callback                CallBack;               \/* Bundle callback *\/$/;"	m	struct:__anon59	access:public
__anon59::MaxBands	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  MaxBands;$/;"	m	struct:__anon59	access:public
__anon59::MaxBlockSize	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  MaxBlockSize;$/;"	m	struct:__anon59	access:public
__anon59::SampleRate	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  SampleRate;$/;"	m	struct:__anon59	access:public
__anon59::SourceFormat	lvm/Eq/lib/LVEQNB.h	/^    LVM_UINT16                  SourceFormat;$/;"	m	struct:__anon59	access:public
__anon59::pBundleInstance	lvm/Eq/lib/LVEQNB.h	/^    void                        *pBundleInstance;       \/* Bundle instance handle *\/$/;"	m	struct:__anon59	access:public
__anon61::BypassMixer	lvm/Eq/src/LVEQNB_Private.h	/^    LVMixer3_2St_st           BypassMixer;              \/* Bypass mixer used in transitions *\/$/;"	m	struct:__anon61	access:public
__anon61::Capabilities	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_Capabilities_t           Capabilities;       \/* Instance capabilities *\/$/;"	m	struct:__anon61	access:public
__anon61::MemoryTable	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_MemTab_t                 MemoryTable;        \/* Instance memory allocation table *\/$/;"	m	struct:__anon61	access:public
__anon61::NBands	lvm/Eq/src/LVEQNB_Private.h	/^    LVM_UINT16                      NBands;             \/* Number of bands *\/$/;"	m	struct:__anon61	access:public
__anon61::Params	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_Params_t                 Params;             \/* Instance parameters *\/$/;"	m	struct:__anon61	access:public
__anon61::bInOperatingModeTransition	lvm/Eq/src/LVEQNB_Private.h	/^    LVM_INT16               bInOperatingModeTransition; \/* Operating mode transition flag *\/$/;"	m	struct:__anon61	access:public
__anon61::pBandDefinitions	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_BandDef_t                *pBandDefinitions;  \/* Filter band definitions *\/$/;"	m	struct:__anon61	access:public
__anon61::pBiquadType	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_BiquadType_en            *pBiquadType;       \/* Filter biquad types *\/$/;"	m	struct:__anon61	access:public
__anon61::pEQNB_FilterState	lvm/Eq/src/LVEQNB_Private.h	/^    Biquad_Instance_t               *pEQNB_FilterState; \/* State for each filter band *\/$/;"	m	struct:__anon61	access:public
__anon61::pEQNB_Taps	lvm/Eq/src/LVEQNB_Private.h	/^    Biquad_2I_Order2_Taps_t         *pEQNB_Taps;        \/* Equaliser Taps *\/$/;"	m	struct:__anon61	access:public
__anon61::pFastTemporary	lvm/Eq/src/LVEQNB_Private.h	/^    LVM_INT16                      *pFastTemporary;        \/* Fast temporary data base address *\/$/;"	m	struct:__anon61	access:public
__anon62::Storage	lvm/Common/lib/LVM_Timer.h	/^    LVM_INT32 Storage[6];$/;"	m	struct:__anon62	access:public
__anon63::CallBackParam	lvm/Common/lib/LVM_Timer.h	/^    LVM_INT32  CallBackParam;$/;"	m	struct:__anon63	access:public
__anon63::SamplingRate	lvm/Common/lib/LVM_Timer.h	/^    LVM_INT32  SamplingRate;$/;"	m	struct:__anon63	access:public
__anon63::TimeInMs	lvm/Common/lib/LVM_Timer.h	/^    LVM_INT16  TimeInMs;$/;"	m	struct:__anon63	access:public
__anon63::pCallBack	lvm/Common/lib/LVM_Timer.h	/^    void       (*pCallBack)(void*,void*,LVM_INT32);$/;"	m	struct:__anon63	access:public
__anon63::pCallBackParams	lvm/Common/lib/LVM_Timer.h	/^    void       *pCallBackParams;$/;"	m	struct:__anon63	access:public
__anon63::pCallbackInstance	lvm/Common/lib/LVM_Timer.h	/^    void       *pCallbackInstance;$/;"	m	struct:__anon63	access:public
__anon64::Storage	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32 Storage[6];$/;"	m	struct:__anon64	access:public
__anon65::A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A0;   \/*  a0  *\/$/;"	m	struct:__anon65	access:public
__anon65::A1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A1;   \/*  a1  *\/$/;"	m	struct:__anon65	access:public
__anon65::A2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A2;   \/*  a2  *\/$/;"	m	struct:__anon65	access:public
__anon65::B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B1;   \/* -b1! *\/$/;"	m	struct:__anon65	access:public
__anon65::B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B2;   \/* -b2! *\/$/;"	m	struct:__anon65	access:public
__anon66::A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A0;   \/*  a0  *\/$/;"	m	struct:__anon66	access:public
__anon66::A1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A1;   \/*  a1  *\/$/;"	m	struct:__anon66	access:public
__anon66::A2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A2;   \/*  a2  *\/$/;"	m	struct:__anon66	access:public
__anon66::B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B1;   \/* -b1! *\/$/;"	m	struct:__anon66	access:public
__anon66::B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B2;   \/* -b2! *\/$/;"	m	struct:__anon66	access:public
__anon67::A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A0;   \/*  a0  *\/$/;"	m	struct:__anon67	access:public
__anon67::A1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A1;   \/*  a1  *\/$/;"	m	struct:__anon67	access:public
__anon67::B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B1;   \/* -b1! *\/$/;"	m	struct:__anon67	access:public
__anon68::A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A0;   \/*  a0  *\/$/;"	m	struct:__anon68	access:public
__anon68::A1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A1;   \/*  a1  *\/$/;"	m	struct:__anon68	access:public
__anon68::B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B1;   \/* -b1! *\/$/;"	m	struct:__anon68	access:public
__anon69::A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A0;    \/*  a0  *\/$/;"	m	struct:__anon69	access:public
__anon69::A1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A1;    \/*  a1  *\/$/;"	m	struct:__anon69	access:public
__anon69::B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B1;    \/* -b1! *\/$/;"	m	struct:__anon69	access:public
__anon69::Shift	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 Shift; \/* Shift *\/$/;"	m	struct:__anon69	access:public
__anon70::A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A0;   \/*  a0  *\/$/;"	m	struct:__anon70	access:public
__anon70::B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B1;   \/* -b1! *\/$/;"	m	struct:__anon70	access:public
__anon70::B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B2;   \/* -b2! *\/$/;"	m	struct:__anon70	access:public
__anon71::A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A0;   \/*  a0  *\/$/;"	m	struct:__anon71	access:public
__anon71::B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B1;   \/* -b1! *\/$/;"	m	struct:__anon71	access:public
__anon71::B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B2;   \/* -b2! *\/$/;"	m	struct:__anon71	access:public
__anon72::A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 A0;   \/*  a0  *\/$/;"	m	struct:__anon72	access:public
__anon72::B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B1;   \/* -b1! *\/$/;"	m	struct:__anon72	access:public
__anon72::B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16 B2;   \/* -b2! *\/$/;"	m	struct:__anon72	access:public
__anon72::G	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16  G;   \/* Gain *\/$/;"	m	struct:__anon72	access:public
__anon73::A0	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  A0;   \/*  a0  *\/$/;"	m	struct:__anon73	access:public
__anon73::B1	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B1;   \/* -b1! *\/$/;"	m	struct:__anon73	access:public
__anon73::B2	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32  B2;   \/* -b2! *\/$/;"	m	struct:__anon73	access:public
__anon73::G	lvm/Common/lib/BIQUAD.h	/^    LVM_INT16  G;   \/* Gain *\/$/;"	m	struct:__anon73	access:public
__anon74::Storage	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32 Storage[ (1*2) ];  \/* One channel, two taps of size LVM_INT32 *\/$/;"	m	struct:__anon74	access:public
__anon75::Storage	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32 Storage[ (2*2) ];  \/* Two channels, two taps of size LVM_INT32 *\/$/;"	m	struct:__anon75	access:public
__anon76::Storage	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32 Storage[ (1*4) ];  \/* One channel, four taps of size LVM_INT32 *\/$/;"	m	struct:__anon76	access:public
__anon77::Storage	lvm/Common/lib/BIQUAD.h	/^    LVM_INT32 Storage[ (2*4) ];  \/* Two channels, four taps of size LVM_INT32 *\/$/;"	m	struct:__anon77	access:public
__anon78::TotalSize	lvm/Common/lib/InstAlloc.h	/^    LVM_UINT32              TotalSize;      \/*  Accumulative total memory size                      *\/$/;"	m	struct:__anon78	access:public
__anon78::pNextMember	lvm/Common/lib/InstAlloc.h	/^    LVM_UINT32              pNextMember;    \/*  Pointer to the next instance member to be allocated *\/$/;"	m	struct:__anon78	access:public
__anon83::Size	lvm/Common/lib/LVM_Types.h	/^    LVM_UINT32                  Size;                   \/* Region size in bytes *\/$/;"	m	struct:__anon83	access:public
__anon83::Type	lvm/Common/lib/LVM_Types.h	/^    LVM_MemoryTypes_en          Type;                   \/* Region type *\/$/;"	m	struct:__anon83	access:public
__anon83::pBaseAddress	lvm/Common/lib/LVM_Types.h	/^    void                        *pBaseAddress;          \/* Pointer to the region base address *\/$/;"	m	struct:__anon83	access:public
__anon84::Region	lvm/Common/lib/LVM_Types.h	/^    LVM_MemoryRegion_st         Region[LVM_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon84	access:public
__anon85::CompIntFast	lvm/Common/lib/CompLim.h	/^    LVM_INT32   CompIntFast;        \/* Compressor fast integrator current value *\/$/;"	m	struct:__anon85	access:public
__anon85::CompIntSlow	lvm/Common/lib/CompLim.h	/^    LVM_INT32   CompIntSlow;        \/* Compressor slow integrator current value *\/$/;"	m	struct:__anon85	access:public
__anon85::Comp_Attack_F	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Comp_Attack_F;      \/* Attack time constant of fast the integrator *\/$/;"	m	struct:__anon85	access:public
__anon85::Comp_Attack_S	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Comp_Attack_S;      \/* Attack time constant of the slow integrator *\/$/;"	m	struct:__anon85	access:public
__anon85::Comp_Atten	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Comp_Atten;         \/* Attenuation applied before soft knee compressor *\/$/;"	m	struct:__anon85	access:public
__anon85::Comp_Decay_F	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Comp_Decay_F;       \/* Decay time constant of fast the integrator *\/$/;"	m	struct:__anon85	access:public
__anon85::Comp_Decay_S	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Comp_Decay_S;       \/* Decay time constant of slow the integrator *\/$/;"	m	struct:__anon85	access:public
__anon85::NormInt	lvm/Common/lib/CompLim.h	/^    LVM_INT32   NormInt;            \/* Normaliser integrator current value *\/$/;"	m	struct:__anon85	access:public
__anon85::Norm_Attack	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Norm_Attack;        \/* Attack time constant of the Normaliser integrator *\/$/;"	m	struct:__anon85	access:public
__anon85::Norm_Decay	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Norm_Decay;         \/* Decay time constant of the Normaliser integrator *\/$/;"	m	struct:__anon85	access:public
__anon85::Shift	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Shift;              \/* Shift gain *\/$/;"	m	struct:__anon85	access:public
__anon85::SoftClipGain	lvm/Common/lib/CompLim.h	/^    LVM_INT16   SoftClipGain;       \/* Soft clip gain control *\/$/;"	m	struct:__anon85	access:public
__anon85::Threshold	lvm/Common/lib/CompLim.h	/^    LVM_INT16   Threshold;          \/* Target threshold *\/$/;"	m	struct:__anon85	access:public
__anon86::Alpha	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Alpha;                    \/* Time constant. Set by calling application.  Can be changed at any time *\/$/;"	m	struct:__anon86	access:public
__anon86::CallbackParam	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackParam;            \/* Parameter that will be used in the calback function *\/$/;"	m	struct:__anon86	access:public
__anon86::CallbackSet	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackSet;              \/* Boolean.  Should be set by calling application each time the target value is updated *\/$/;"	m	struct:__anon86	access:public
__anon86::Current	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Current;                  \/* Current value.  Set by the mixer function. *\/$/;"	m	struct:__anon86	access:public
__anon86::Target	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Target;                   \/* Target value.  Set by calling application.  Can be changed at any time *\/$/;"	m	struct:__anon86	access:public
__anon86::pCallBack	lvm/Common/lib/Mixer.h	/^    LVM_Callback pCallBack;               \/* Pointer to the callback function *\/$/;"	m	struct:__anon86	access:public
__anon86::pCallbackHandle	lvm/Common/lib/Mixer.h	/^    void        *pCallbackHandle;         \/* Pointer to the instance of the callback function *\/$/;"	m	struct:__anon86	access:public
__anon86::pGeneralPurpose	lvm/Common/lib/Mixer.h	/^    void        *pGeneralPurpose;         \/* Pointer for general purpose usage *\/$/;"	m	struct:__anon86	access:public
__anon87::Alpha1	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Alpha1;$/;"	m	struct:__anon87	access:public
__anon87::Alpha2	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Alpha2;                   \/* Warning the address of this location is passed as a pointer to Mix_1St_Cll_t in some functions *\/$/;"	m	struct:__anon87	access:public
__anon87::CallbackParam1	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackParam1;$/;"	m	struct:__anon87	access:public
__anon87::CallbackParam2	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackParam2;$/;"	m	struct:__anon87	access:public
__anon87::CallbackSet1	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackSet1;$/;"	m	struct:__anon87	access:public
__anon87::CallbackSet2	lvm/Common/lib/Mixer.h	/^    LVM_INT16   CallbackSet2;$/;"	m	struct:__anon87	access:public
__anon87::Current1	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Current1;$/;"	m	struct:__anon87	access:public
__anon87::Current2	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Current2;$/;"	m	struct:__anon87	access:public
__anon87::Target1	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Target1;$/;"	m	struct:__anon87	access:public
__anon87::Target2	lvm/Common/lib/Mixer.h	/^    LVM_INT32   Target2;$/;"	m	struct:__anon87	access:public
__anon87::pCallBack1	lvm/Common/lib/Mixer.h	/^    LVM_Callback pCallBack1;$/;"	m	struct:__anon87	access:public
__anon87::pCallBack2	lvm/Common/lib/Mixer.h	/^    LVM_Callback pCallBack2;$/;"	m	struct:__anon87	access:public
__anon87::pCallbackHandle1	lvm/Common/lib/Mixer.h	/^    void        *pCallbackHandle1;$/;"	m	struct:__anon87	access:public
__anon87::pCallbackHandle2	lvm/Common/lib/Mixer.h	/^    void        *pCallbackHandle2;$/;"	m	struct:__anon87	access:public
__anon87::pGeneralPurpose1	lvm/Common/lib/Mixer.h	/^    void        *pGeneralPurpose1;$/;"	m	struct:__anon87	access:public
__anon87::pGeneralPurpose2	lvm/Common/lib/Mixer.h	/^    void        *pGeneralPurpose2;$/;"	m	struct:__anon87	access:public
__anon88::AGC_Attack	lvm/Common/lib/AGC.h	/^    LVM_INT16  AGC_Attack;                      \/* AGC attack scaler *\/$/;"	m	struct:__anon88	access:public
__anon88::AGC_Decay	lvm/Common/lib/AGC.h	/^    LVM_INT16  AGC_Decay;                       \/* AGC decay scaler *\/$/;"	m	struct:__anon88	access:public
__anon88::AGC_Gain	lvm/Common/lib/AGC.h	/^    LVM_INT32  AGC_Gain;                        \/* The current AGC gain *\/$/;"	m	struct:__anon88	access:public
__anon88::AGC_GainShift	lvm/Common/lib/AGC.h	/^    LVM_INT16  AGC_GainShift;                   \/* The gain shift *\/$/;"	m	struct:__anon88	access:public
__anon88::AGC_MaxGain	lvm/Common/lib/AGC.h	/^    LVM_INT32  AGC_MaxGain;                     \/* The maximum AGC gain *\/$/;"	m	struct:__anon88	access:public
__anon88::AGC_Target	lvm/Common/lib/AGC.h	/^    LVM_INT32  AGC_Target;                      \/* AGC target level *\/$/;"	m	struct:__anon88	access:public
__anon88::Target	lvm/Common/lib/AGC.h	/^    LVM_INT32  Target;                          \/* The target volume setting *\/$/;"	m	struct:__anon88	access:public
__anon88::Volume	lvm/Common/lib/AGC.h	/^    LVM_INT32  Volume;                          \/* The current volume setting *\/$/;"	m	struct:__anon88	access:public
__anon88::VolumeShift	lvm/Common/lib/AGC.h	/^    LVM_INT16  VolumeShift;                     \/* Volume shift scaling *\/$/;"	m	struct:__anon88	access:public
__anon88::VolumeTC	lvm/Common/lib/AGC.h	/^    LVM_INT16  VolumeTC;                        \/* Volume update time constant *\/$/;"	m	struct:__anon88	access:public
__anon89::CallbackParam	lvm/Common/src/LVC_Mixer.h	/^    LVM_INT16       CallbackParam;      \/* Parameter that will be used in the calback function *\/$/;"	m	struct:__anon89	access:public
__anon89::CallbackSet	lvm/Common/src/LVC_Mixer.h	/^    LVM_INT16       CallbackSet;        \/* Boolean.  Should be set by calling application each time the target value is updated *\/$/;"	m	struct:__anon89	access:public
__anon89::PrivateParams	lvm/Common/src/LVC_Mixer.h	/^    LVM_INT32       PrivateParams[4];   \/* Private Instance params for Audio Stream *\/$/;"	m	struct:__anon89	access:public
__anon89::pCallBack	lvm/Common/src/LVC_Mixer.h	/^    LVM_Callback    pCallBack;          \/* Pointer to the callback function *\/$/;"	m	struct:__anon89	access:public
__anon89::pCallbackHandle	lvm/Common/src/LVC_Mixer.h	/^    void            *pCallbackHandle;   \/* Pointer to the instance of the callback function *\/$/;"	m	struct:__anon89	access:public
__anon89::pGeneralPurpose	lvm/Common/src/LVC_Mixer.h	/^    void            *pGeneralPurpose;   \/* Pointer for general purpose usage *\/$/;"	m	struct:__anon89	access:public
__anon8::Alignment	lvm/Bass/lib/LVDBE.h	/^    LVM_UINT16                Alignment;                  \/* Region alignment in bytes *\/$/;"	m	struct:__anon8	access:public
__anon8::Size	lvm/Bass/lib/LVDBE.h	/^    LVM_UINT32                Size;                        \/* Region size in bytes *\/$/;"	m	struct:__anon8	access:public
__anon8::Type	lvm/Bass/lib/LVDBE.h	/^    LVDBE_MemoryTypes_en      Type;                       \/* Region type *\/$/;"	m	struct:__anon8	access:public
__anon8::pBaseAddress	lvm/Bass/lib/LVDBE.h	/^    void                      *pBaseAddress;              \/* Pointer to the region base address *\/$/;"	m	struct:__anon8	access:public
__anon90::MixerStream	lvm/Common/src/LVC_Mixer.h	/^    LVMixer3_st     MixerStream[1];    \/* Instance Params for one Audio Stream *\/$/;"	m	struct:__anon90	access:public
__anon91::MixerStream	lvm/Common/src/LVC_Mixer.h	/^    LVMixer3_st     MixerStream[2];    \/* Instance Params for two Audio Streams *\/$/;"	m	struct:__anon91	access:public
__anon92::MixerStream	lvm/Common/src/LVC_Mixer.h	/^    LVMixer3_st     MixerStream[3];    \/* Instance Params for three Audio Streams *\/$/;"	m	struct:__anon92	access:public
__anon93::CallBackParam	lvm/Common/src/LVM_Timer_Private.h	/^    LVM_INT32  CallBackParam;$/;"	m	struct:__anon93	access:public
__anon93::RemainingTimeInSamples	lvm/Common/src/LVM_Timer_Private.h	/^    LVM_INT32  RemainingTimeInSamples;$/;"	m	struct:__anon93	access:public
__anon93::TimerArmed	lvm/Common/src/LVM_Timer_Private.h	/^    LVM_INT16 TimerArmed;                        \/* Boolean, true between init and callback *\/$/;"	m	struct:__anon93	access:public
__anon93::pCallBack	lvm/Common/src/LVM_Timer_Private.h	/^    void  (*pCallBack)(void*,void*,LVM_INT32);$/;"	m	struct:__anon93	access:public
__anon93::pCallBackParams	lvm/Common/src/LVM_Timer_Private.h	/^    LVM_INT32  *pCallBackParams;$/;"	m	struct:__anon93	access:public
__anon93::pCallbackInstance	lvm/Common/src/LVM_Timer_Private.h	/^    void  *pCallbackInstance;$/;"	m	struct:__anon93	access:public
__anon94::A0	lvm/Common/src/Filters.h	/^        LVM_INT16   A0;$/;"	m	struct:__anon94	access:public
__anon94::A1	lvm/Common/src/Filters.h	/^        LVM_INT16   A1;$/;"	m	struct:__anon94	access:public
__anon94::A2	lvm/Common/src/Filters.h	/^        LVM_INT16   A2;$/;"	m	struct:__anon94	access:public
__anon94::B1	lvm/Common/src/Filters.h	/^        LVM_INT16   B1;$/;"	m	struct:__anon94	access:public
__anon94::B2	lvm/Common/src/Filters.h	/^        LVM_INT16   B2;$/;"	m	struct:__anon94	access:public
__anon94::Scale	lvm/Common/src/Filters.h	/^        LVM_UINT16  Scale;$/;"	m	struct:__anon94	access:public
__anon95::A0	lvm/Common/src/Filters.h	/^        LVM_INT16   A0;$/;"	m	struct:__anon95	access:public
__anon95::A1	lvm/Common/src/Filters.h	/^        LVM_INT16   A1;$/;"	m	struct:__anon95	access:public
__anon95::B1	lvm/Common/src/Filters.h	/^        LVM_INT16   B1;$/;"	m	struct:__anon95	access:public
__anon95::Scale	lvm/Common/src/Filters.h	/^        LVM_UINT16  Scale;$/;"	m	struct:__anon95	access:public
__anon96::Current	lvm/Common/src/LVC_Mixer_Private.h	/^    LVM_INT32                       Current;                \/* 32 bit number specifying fractional valude of Current Gain *\/$/;"	m	struct:__anon96	access:public
__anon96::Delta	lvm/Common/src/LVC_Mixer_Private.h	/^    LVM_INT32                       Delta;                  \/* 32 bit number specifying the fractional value of Delta Gain *\/$/;"	m	struct:__anon96	access:public
__anon96::Shift	lvm/Common/src/LVC_Mixer_Private.h	/^    LVM_INT32                       Shift;                  \/* Left Shift for Integer part of Gain *\/$/;"	m	struct:__anon96	access:public
__anon96::Target	lvm/Common/src/LVC_Mixer_Private.h	/^    LVM_INT32                       Target;                 \/* 32 bit number specifying fractional value of Target Gain *\/$/;"	m	struct:__anon96	access:public
__anon9::Region	lvm/Bass/lib/LVDBE.h	/^    LVDBE_MemoryRegion_t    Region[LVDBE_NR_MEMORY_REGIONS];  \/* One definition for each region *\/$/;"	m	struct:__anon9	access:public
bControlPending	lvm/Reverb/src/LVREV_Private.h	/^    LVM_CHAR                bControlPending;            \/* Flag to indicate new parameters are available *\/$/;"	m	struct:__anon48	access:public
bControlPending	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_CHAR                    bControlPending;                    \/* Flag incating a change of the control parameters                                             *\/$/;"	m	struct:__anon126	access:public
bDisableReverb	lvm/Reverb/src/LVREV_Private.h	/^    LVM_CHAR                bDisableReverb;             \/* Flag to indicate that the mix level is 0% and the reverb can be disabled *\/$/;"	m	struct:__anon48	access:public
bFirstControl	lvm/Reverb/src/LVREV_Private.h	/^    LVM_CHAR                bFirstControl;              \/* Flag to indicate that the control function is called for the first time *\/$/;"	m	struct:__anon48	access:public
bInOperatingModeTransition	lvm/Eq/src/LVEQNB_Private.h	/^    LVM_INT16               bInOperatingModeTransition; \/* Operating mode transition flag *\/$/;"	m	struct:__anon61	access:public
bInOperatingModeTransition	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               bInOperatingModeTransition;         \/* Operating mode transition flag *\/$/;"	m	struct:__anon114	access:public
bTimerDone	lvm/StereoWidening/src/LVCS_Private.h	/^    LVM_INT16               bTimerDone;                         \/* Timer completion flag *\/$/;"	m	struct:__anon114	access:public
bundle_test	test/test.c	/^int bundle_test();$/;"	p	file:
bundle_test	test/test_bundle.c	/^int bundle_test()$/;"	f
coefs	lvm/Common/src/BP_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT32         coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/BP_1I_D16F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32         coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/BP_1I_D32F32Cll_TRC_WRA_02_Private.h	/^  LVM_INT32         coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/BQ_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT16         coefs[5];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/BQ_1I_D16F32Css_TRC_WRA_01_Private.h	/^  LVM_INT16     coefs[5];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/BQ_2I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT16     coefs[5];           \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/BQ_2I_D16F32Css_TRC_WRA_01_Private.h	/^  LVM_INT16                           coefs[5];         \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/BQ_2I_D32F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32                            coefs[5];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/FO_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT16         coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/FO_1I_D32F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32         coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/FO_2I_D16F32Css_LShx_TRC_WRA_01_Private.h	/^  LVM_INT16     coefs[3];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/PK_2I_D32F32CllGss_TRC_WRA_01_Private.h	/^  LVM_INT32         coefs[5];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
coefs	lvm/Common/src/PK_2I_D32F32CssGss_TRC_WRA_01_Private.h	/^  LVM_INT32         coefs[5];       \/* pointer to the filter coefficients *\/$/;"	m	struct:_Filter_State_	access:public
dB_to_Lin32	lvm/Common/lib/ScalarArithmetic.h	/^LVM_INT32 dB_to_Lin32(LVM_INT16  db_fix);$/;"	p	signature:(LVM_INT16 db_fix)
dB_to_Lin32	lvm/Common/src/dB_to_Lin32.c	/^LVM_INT32   dB_to_Lin32(LVM_INT16    db_fix)$/;"	f	signature:(LVM_INT16 db_fix)
dtap_context_t	include/dtap.h	/^}dtap_context_t;$/;"	t	typeref:struct:__anon132
dtap_frame_t	include/dtap.h	/^}dtap_frame_t;$/;"	t	typeref:struct:__anon131
dtap_free	include/dtap.h	24;"	d
dtap_init	dtap.c	/^int dtap_init(dtap_context_t * ctx)$/;"	f	signature:(dtap_context_t * ctx)
dtap_init	include/dtap.h	/^int dtap_init(dtap_context_t * ctx);$/;"	p	signature:(dtap_context_t * ctx)
dtap_lock	include/dtap.h	13;"	d
dtap_lock_init	include/dtap.h	12;"	d
dtap_lock_t	include/dtap.h	11;"	d
dtap_malloc	include/dtap.h	23;"	d
dtap_print	include/dtap.h	18;"	d
dtap_process	dtap.c	/^int dtap_process(dtap_context_t *ctx, dtap_frame_t *frame)$/;"	f	signature:(dtap_context_t *ctx, dtap_frame_t *frame)
dtap_process	include/dtap.h	/^int dtap_process(dtap_context_t *ctx, dtap_frame_t *frame);$/;"	p	signature:(dtap_context_t *ctx, dtap_frame_t *frame)
dtap_release	dtap.c	/^int dtap_release(dtap_context_t * ctx)$/;"	f	signature:(dtap_context_t * ctx)
dtap_release	include/dtap.h	/^int dtap_release(dtap_context_t *ctx);$/;"	p	signature:(dtap_context_t *ctx)
dtap_unlock	include/dtap.h	14;"	d
hCSInstance	lvm/Bundle/src/LVM_Private.h	/^    LVCS_Handle_t           hCSInstance;        \/* Concert Sound instance handle *\/$/;"	m	struct:__anon40	access:public
hDBEInstance	lvm/Bundle/src/LVM_Private.h	/^    LVDBE_Handle_t          hDBEInstance;       \/* Dynamic Bass Enhancement instance handle *\/$/;"	m	struct:__anon40	access:public
hEQNBInstance	lvm/Bundle/src/LVM_Private.h	/^    LVEQNB_Handle_t         hEQNBInstance;      \/* N-Band Equaliser instance handle *\/$/;"	m	struct:__anon40	access:public
hPSAInstance	lvm/Bundle/src/LVM_Private.h	/^    pLVPSA_Handle_t         hPSAInstance;       \/* Spectrum Analyzer instance handle *\/$/;"	m	struct:__anon40	access:public
in_buf	include/dtap.h	/^    uint8_t *in_buf;$/;"	m	struct:__anon131	access:public
in_len	include/dtap.h	/^    int in_len;$/;"	m	struct:__anon131	access:public
main	test/test.c	/^int main(int argc, char ** argv)$/;"	f	signature:(int argc, char ** argv)
mutex	include/dtap.h	/^    dtap_lock_t mutex;$/;"	m	struct:__anon132	access:public
nBands	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVM_UINT16                 nBands;                      \/* Number of bands of the SA                                         *\/$/;"	m	struct:__anon120	access:public
nBands	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  nBands;                             \/* Number of bands of the spectrum analyzer                                                     *\/$/;"	m	struct:__anon126	access:public
nRelevantFilters	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  nRelevantFilters;                   \/* Number of relevent filters depending on sampling frequency and bands center frequency        *\/$/;"	m	struct:__anon126	access:public
nSamplesBufferUpdate	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                  nSamplesBufferUpdate;               \/* Number of samples to make 20ms                                                               *\/$/;"	m	struct:__anon126	access:public
name	include/dtap.h	/^    char name[MAX_NAME_LEN];$/;"	m	struct:__anon132	access:public
out_buf	include/dtap.h	/^    uint8_t *out_buf;$/;"	m	struct:__anon131	access:public
out_len	include/dtap.h	/^    int out_len;$/;"	m	struct:__anon131	access:public
pBPFiltersPrecision	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_BPFilterPrecision_en *pBPFiltersPrecision;                \/* Points a nBands elements array that contains the filter precision for each band              *\/$/;"	m	struct:__anon126	access:public
pBP_Instances	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    Biquad_Instance_t          *pBP_Instances;                      \/* Points a nBands elements array that contains the band pass filter instance for each band     *\/$/;"	m	struct:__anon126	access:public
pBP_Taps	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    Biquad_1I_Order2_Taps_t    *pBP_Taps;                           \/* Points a nBands elements array that contains the band pass filter taps for each band         *\/$/;"	m	struct:__anon126	access:public
pBandDefinition	lvm/Eq/lib/LVEQNB.h	/^    LVEQNB_BandDef_t            *pBandDefinition;       \/* Pointer to equaliser definitions *\/$/;"	m	struct:__anon58	access:public
pBandDefinitions	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_BandDef_t                *pBandDefinitions;  \/* Filter band definitions *\/$/;"	m	struct:__anon61	access:public
pBaseAddress	lvm/Bass/lib/LVDBE.h	/^    void                      *pBaseAddress;              \/* Pointer to the region base address *\/$/;"	m	struct:__anon8	access:public
pBaseAddress	lvm/Bundle/src/LVM_Private.h	/^    void                    *pBaseAddress;      \/* Pointer to the region base address *\/$/;"	m	struct:__anon35	access:public
pBaseAddress	lvm/Common/lib/LVM_Types.h	/^    void                        *pBaseAddress;          \/* Pointer to the region base address *\/$/;"	m	struct:__anon83	access:public
pBaseAddress	lvm/Eq/lib/LVEQNB.h	/^    void                        *pBaseAddress;          \/* Pointer to the region base address *\/$/;"	m	struct:__anon55	access:public
pBaseAddress	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    void                       *pBaseAddress;               \/* Pointer to the region base address                                *\/$/;"	m	struct:__anon122	access:public
pBaseAddress	lvm/StereoWidening/lib/LVCS.h	/^    void                    *pBaseAddress;          \/* Pointer to the region base address *\/$/;"	m	struct:__anon103	access:public
pBiquadCallBack	lvm/StereoWidening/src/LVCS_Equaliser.h	/^    void (*pBiquadCallBack) (Biquad_Instance_t*, LVM_INT16*, LVM_INT16*, LVM_INT16);$/;"	m	struct:__anon108	access:public
pBiquadCallBack	lvm/StereoWidening/src/LVCS_ReverbGenerator.h	/^    void                        (*pBiquadCallBack) (Biquad_Instance_t*, LVM_INT16*, LVM_INT16*, LVM_INT16);$/;"	m	struct:__anon107	access:public
pBiquadCallBack_Mid	lvm/StereoWidening/src/LVCS_StereoEnhancer.h	/^    void                    (*pBiquadCallBack_Mid)(Biquad_Instance_t*, LVM_INT16*, LVM_INT16*, LVM_INT16);$/;"	m	struct:__anon109	access:public
pBiquadCallBack_Side	lvm/StereoWidening/src/LVCS_StereoEnhancer.h	/^    void                    (*pBiquadCallBack_Side)(Biquad_Instance_t*, LVM_INT16*, LVM_INT16*, LVM_INT16);$/;"	m	struct:__anon109	access:public
pBiquadType	lvm/Eq/src/LVEQNB_Private.h	/^    LVEQNB_BiquadType_en            *pBiquadType;       \/* Filter biquad types *\/$/;"	m	struct:__anon61	access:public
pBufferManagement	lvm/Bundle/src/LVM_Private.h	/^    LVM_Buffer_t            *pBufferManagement; \/* Buffer management variables *\/$/;"	m	struct:__anon40	access:public
pBundleInstance	lvm/Eq/lib/LVEQNB.h	/^    void                        *pBundleInstance;       \/* Bundle instance handle *\/$/;"	m	struct:__anon59	access:public
pBundleInstance	lvm/StereoWidening/lib/LVCS.h	/^    void                    *pBundleInstance;       \/* Bundle instance handle *\/$/;"	m	struct:__anon106	access:public
pCallBack	lvm/Common/lib/LVM_Timer.h	/^    void       (*pCallBack)(void*,void*,LVM_INT32);$/;"	m	struct:__anon63	access:public
pCallBack	lvm/Common/lib/Mixer.h	/^    LVM_Callback pCallBack;               \/* Pointer to the callback function *\/$/;"	m	struct:__anon86	access:public
pCallBack	lvm/Common/src/LVC_Mixer.h	/^    LVM_Callback    pCallBack;          \/* Pointer to the callback function *\/$/;"	m	struct:__anon89	access:public
pCallBack	lvm/Common/src/LVM_Timer_Private.h	/^    void  (*pCallBack)(void*,void*,LVM_INT32);$/;"	m	struct:__anon93	access:public
pCallBack1	lvm/Common/lib/Mixer.h	/^    LVM_Callback pCallBack1;$/;"	m	struct:__anon87	access:public
pCallBack2	lvm/Common/lib/Mixer.h	/^    LVM_Callback pCallBack2;$/;"	m	struct:__anon87	access:public
pCallBackParams	lvm/Common/lib/LVM_Timer.h	/^    void       *pCallBackParams;$/;"	m	struct:__anon63	access:public
pCallBackParams	lvm/Common/src/LVM_Timer_Private.h	/^    LVM_INT32  *pCallBackParams;$/;"	m	struct:__anon93	access:public
pCallbackHandle	lvm/Common/lib/Mixer.h	/^    void        *pCallbackHandle;         \/* Pointer to the instance of the callback function *\/$/;"	m	struct:__anon86	access:public
pCallbackHandle	lvm/Common/src/LVC_Mixer.h	/^    void            *pCallbackHandle;   \/* Pointer to the instance of the callback function *\/$/;"	m	struct:__anon89	access:public
pCallbackHandle1	lvm/Common/lib/Mixer.h	/^    void        *pCallbackHandle1;$/;"	m	struct:__anon87	access:public
pCallbackHandle2	lvm/Common/lib/Mixer.h	/^    void        *pCallbackHandle2;$/;"	m	struct:__anon87	access:public
pCallbackInstance	lvm/Common/lib/LVM_Timer.h	/^    void       *pCallbackInstance;$/;"	m	struct:__anon63	access:public
pCallbackInstance	lvm/Common/src/LVM_Timer_Private.h	/^    void  *pCallbackInstance;$/;"	m	struct:__anon93	access:public
pCoef	lvm/Bass/src/LVDBE_Private.h	/^    LVDBE_Coef_t                *pCoef;                \/* Instance coefficients *\/$/;"	m	struct:__anon14	access:public
pData	lvm/Bass/src/LVDBE_Private.h	/^    LVDBE_Data_t                *pData;                \/* Instance data *\/$/;"	m	struct:__anon14	access:public
pDelay	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^  LVM_INT32                            *pDelay;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:__anon127	access:public
pDelay_T	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pDelay_T[4];               \/* Pointer to delay buffers *\/$/;"	m	struct:__anon48	access:public
pDelays	lvm/Common/src/BP_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/BP_1I_D16F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/BP_1I_D32F32Cll_TRC_WRA_02_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/BQ_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/BQ_1I_D16F32Css_TRC_WRA_01_Private.h	/^  LVM_INT32 *   pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/BQ_2I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT32 *   pDelays;            \/* pointer to the delayed samples (data of 32 bits) *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/BQ_2I_D16F32Css_TRC_WRA_01_Private.h	/^  LVM_INT32 *                          pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/BQ_2I_D32F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32 *                          pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/FO_1I_D16F16Css_TRC_WRA_01_Private.h	/^  LVM_INT32*        pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/FO_1I_D32F32Cll_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/FO_2I_D16F32Css_LShx_TRC_WRA_01_Private.h	/^  LVM_INT32     *pDelays;       \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/PK_2I_D32F32CllGss_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pDelays	lvm/Common/src/PK_2I_D32F32CssGss_TRC_WRA_01_Private.h	/^  LVM_INT32 *       pDelays;        \/* pointer to the delayed samples (data of 32 bits)   *\/$/;"	m	struct:_Filter_State_	access:public
pEQNB_BandDefinition	lvm/Bundle/lib/LVM.h	/^    LVM_EQNB_BandDef_t          *pEQNB_BandDefinition;  \/* Pointer to equaliser definitions *\/$/;"	m	struct:__anon32	access:public
pEQNB_BandDefs	lvm/Bundle/src/LVM_Private.h	/^    LVM_EQNB_BandDef_t      *pEQNB_BandDefs;    \/* Local storage for new definitions *\/$/;"	m	struct:__anon40	access:public
pEQNB_FilterState	lvm/Eq/src/LVEQNB_Private.h	/^    Biquad_Instance_t               *pEQNB_FilterState; \/* State for each filter band *\/$/;"	m	struct:__anon61	access:public
pEQNB_Taps	lvm/Eq/src/LVEQNB_Private.h	/^    Biquad_2I_Order2_Taps_t         *pEQNB_Taps;        \/* Equaliser Taps *\/$/;"	m	struct:__anon61	access:public
pEQNB_UserDefs	lvm/Bundle/src/LVM_Private.h	/^    LVM_EQNB_BandDef_t      *pEQNB_UserDefs;    \/* Local storage for the user's definitions *\/$/;"	m	struct:__anon40	access:public
pFastCoef	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_FastCoef_st       *pFastCoef;                 \/* Fast coefficient memory base address *\/$/;"	m	struct:__anon48	access:public
pFastData	lvm/Reverb/src/LVREV_Private.h	/^    LVREV_FastData_st       *pFastData;                 \/* Fast data memory base address *\/$/;"	m	struct:__anon48	access:public
pFastTemporary	lvm/Eq/src/LVEQNB_Private.h	/^    LVM_INT16                      *pFastTemporary;        \/* Fast temporary data base address *\/$/;"	m	struct:__anon61	access:public
pFiltersParams	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^    LVPSA_FilterParam_t       *pFiltersParams;              \/* Points to nBands filter param structures for filters settings     *\/$/;"	m	struct:__anon120	access:public
pFiltersParams	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVPSA_FilterParam_t        *pFiltersParams;                     \/* Copy of the filters parameters from the input parameters                                     *\/$/;"	m	struct:__anon126	access:public
pGeneralPurpose	lvm/Common/lib/Mixer.h	/^    void        *pGeneralPurpose;         \/* Pointer for general purpose usage *\/$/;"	m	struct:__anon86	access:public
pGeneralPurpose	lvm/Common/src/LVC_Mixer.h	/^    void            *pGeneralPurpose;   \/* Pointer for general purpose usage *\/$/;"	m	struct:__anon89	access:public
pGeneralPurpose1	lvm/Common/lib/Mixer.h	/^    void        *pGeneralPurpose1;$/;"	m	struct:__anon87	access:public
pGeneralPurpose2	lvm/Common/lib/Mixer.h	/^    void        *pGeneralPurpose2;$/;"	m	struct:__anon87	access:public
pHeadroomDefinition	lvm/Bundle/lib/LVM.h	/^    LVM_HeadroomBandDef_t       *pHeadroomDefinition;   \/* Pointer to headroom bands definition *\/$/;"	m	struct:__anon34	access:public
pHeadroom_BandDefs	lvm/Bundle/src/LVM_Private.h	/^    LVM_HeadroomBandDef_t   *pHeadroom_BandDefs; \/* Local storage for new definitions *\/$/;"	m	struct:__anon40	access:public
pHeadroom_UserDefs	lvm/Bundle/src/LVM_Private.h	/^    LVM_HeadroomBandDef_t   *pHeadroom_UserDefs; \/* Local storage for the user's definitions *\/$/;"	m	struct:__anon40	access:public
pInputSamples	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               *pInputSamples;     \/* External input sample pointer *\/$/;"	m	struct:__anon40	access:public
pInputSave	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pInputSave;                \/* Reverb block input save for dry\/wet mixing*\/$/;"	m	struct:__anon48	access:public
pLVPSA_ControlParams_t	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^} LVPSA_ControlParams_t, *pLVPSA_ControlParams_t;$/;"	t	typeref:struct:__anon121
pLVPSA_Handle_t	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^typedef void *pLVPSA_Handle_t;$/;"	t
pLVPSA_InitParams_t	lvm/SpectrumAnalyzer/lib/LVPSA.h	/^} LVPSA_InitParams_t, *pLVPSA_InitParams_t;$/;"	t	typeref:struct:__anon120
pLVPSA_InstancePr_t	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^}LVPSA_InstancePr_t, *pLVPSA_InstancePr_t;$/;"	t	typeref:struct:__anon126
pNextMember	lvm/Common/lib/InstAlloc.h	/^    LVM_UINT32              pNextMember;    \/*  Pointer to the next instance member to be allocated *\/$/;"	m	struct:__anon78	access:public
pOffsetA	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pOffsetA[4];               \/* Offset for the A delay tap *\/$/;"	m	struct:__anon48	access:public
pOffsetB	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pOffsetB[4];               \/* Offset for the B delay tap *\/$/;"	m	struct:__anon48	access:public
pOutputSamples	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               *pOutputSamples;    \/* External output sample pointer *\/$/;"	m	struct:__anon40	access:public
pPSAInput	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               *pPSAInput;         \/* PSA input pointer *\/$/;"	m	struct:__anon40	access:public
pPlatform	lvm/Bundle/lib/LVM.h	/^    LVM_CHAR                    *pPlatform;             \/* Pointer to the library platform type *\/$/;"	m	struct:__anon28	access:public
pPostGains	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT16                 *pPostGains;                         \/* Points a nBands elements array that contains the post-filter gains for each band             *\/$/;"	m	struct:__anon126	access:public
pPreviousPeaks	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT8                  *pPreviousPeaks;                     \/* Points to a nBands elements array that contains the previous peak value of the level$/;"	m	struct:__anon126	access:public
pQPD_State_t	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^}QPD_State_t, *pQPD_State_t;$/;"	t	typeref:struct:__anon127
pQPD_States	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    QPD_State_t                *pQPD_States;                        \/* Points a nBands elements array that contains the QPD filter instance for each band           *\/$/;"	m	struct:__anon126	access:public
pQPD_Taps	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    QPD_Taps_t                 *pQPD_Taps;                          \/* Points a nBands elements array that contains the QPD filter taps for each band               *\/$/;"	m	struct:__anon126	access:public
pQPD_Taps_t	lvm/SpectrumAnalyzer/src/LVPSA_QPD.h	/^} QPD_Taps_t, *pQPD_Taps_t;$/;"	t	typeref:struct:__anon129
pScratch	lvm/Bundle/src/LVM_Private.h	/^    LVM_INT16               *pScratch;          \/* Bundle scratch buffer *\/$/;"	m	struct:__anon37	access:public
pScratch	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pScratch;                  \/* Multi ussge scratch *\/$/;"	m	struct:__anon48	access:public
pScratchDelayLine	lvm/Reverb/src/LVREV_Private.h	/^    LVM_INT32               *pScratchDelayLine[4];      \/* Delay line scratch memory *\/$/;"	m	struct:__anon48	access:public
pSpectralDataBufferStart	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT8                  *pSpectralDataBufferStart;           \/* Starting address of the buffer                                                               *\/$/;"	m	struct:__anon126	access:public
pSpectralDataBufferWritePointer	lvm/SpectrumAnalyzer/src/LVPSA_Private.h	/^    LVM_UINT8                  *pSpectralDataBufferWritePointer;    \/* Current position of the writting pointer of the buffer                                       *\/$/;"	m	struct:__anon126	access:public
pTE_State	lvm/Bundle/src/LVM_Private.h	/^    LVM_TE_Coefs_t          *pTE_State;         \/* State for the treble boost filter *\/$/;"	m	struct:__anon40	access:public
pTE_Taps	lvm/Bundle/src/LVM_Private.h	/^    LVM_TE_Data_t           *pTE_Taps;          \/* Treble boost Taps *\/$/;"	m	struct:__anon40	access:public
pTable1	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable1;$/;"	m	struct:__anon102	access:public
pTable2	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable2;$/;"	m	struct:__anon102	access:public
pTable3	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable3;$/;"	m	struct:__anon102	access:public
pTable4	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable4;$/;"	m	struct:__anon102	access:public
pTable5	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable5;$/;"	m	struct:__anon102	access:public
pTable6	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable6;$/;"	m	struct:__anon102	access:public
pTable7	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable7;$/;"	m	struct:__anon102	access:public
pTable8	lvm/StereoWidening/lib/LVCS.h	/^    void    *pTable8;$/;"	m	struct:__anon102	access:public
pVersionNumber	lvm/Bundle/lib/LVM.h	/^    LVM_CHAR                    *pVersionNumber;        \/* Pointer to the version number in the format X.YY.ZZ *\/$/;"	m	struct:__anon28	access:public
usage	build.sh	/^usage()$/;"	f
usage	test/test.c	/^static void usage()$/;"	f	file:
